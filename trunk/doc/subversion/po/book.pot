msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2007-05-06 15:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ./build/en/book.xml:4(title) 
msgid "Version Control with Subversion"
msgstr ""

#: ./build/en/book.xml:8(subtitle) 
msgid "For Subversion 1.4"
msgstr ""

#. don't seem to render it.
#: ./build/en/book.xml:12(subtitle) 
msgid "(Compiled from r2789)"
msgstr ""

#: ./build/en/book.xml:14(edition) 
msgid "Second"
msgstr ""

#: ./build/en/book.xml:15(isbn) 
msgid "?-?????-???-?"
msgstr ""

#: ./build/en/book.xml:19(firstname) 
msgid "Ben"
msgstr ""

#: ./build/en/book.xml:20(surname) 
msgid "Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:24(firstname) 
msgid "Brian W."
msgstr ""

#: ./build/en/book.xml:25(surname) 
msgid "Fitzpatrick"
msgstr ""

#: ./build/en/book.xml:29(firstname) 
msgid "C. Michael"
msgstr ""

#: ./build/en/book.xml:30(surname) 
msgid "Pilato"
msgstr ""

#: ./build/en/book.xml:36(firstname) 
msgid "Tatiana"
msgstr ""

#: ./build/en/book.xml:37(surname) 
msgid "Apandi"
msgstr ""

#: ./build/en/book.xml:40(pagenums) 
msgid "350 pages (est.)"
msgstr ""

#: ./build/en/book.xml:41(pubdate) 
msgid "(TBA)"
msgstr ""

#: ./build/en/book.xml:44(year) 
msgid "2002"
msgstr ""

#: ./build/en/book.xml:45(year) 
msgid "2003"
msgstr ""

#: ./build/en/book.xml:46(year) 
msgid "2004"
msgstr ""

#: ./build/en/book.xml:47(year) 
msgid "2005"
msgstr ""

#: ./build/en/book.xml:48(year) 
msgid "2006"
msgstr ""

#: ./build/en/book.xml:49(year) 
msgid "2007"
msgstr ""

#: ./build/en/book.xml:50(holder) 
msgid "Ben Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:51(holder) 
msgid "Brian W. Fitzpatrick"
msgstr ""

#: ./build/en/book.xml:52(holder) 
msgid "C. Michael Pilato"
msgstr ""

#: ./build/en/book.xml:55(para) 
msgid "This work is licensed under the Creative Commons Attribution License. To view a copy of this license, visit <ulink url=\"http://creativecommons.org/licenses/by/2.0/\"/> or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA."
msgstr ""

#: ./build/en/book.xml:74(firstname) 
msgid "Karl"
msgstr ""

#: ./build/en/book.xml:75(surname) 
msgid "Fogel"
msgstr ""

#: ./build/en/book.xml:77(pubdate) 
msgid "Chicago, March 14, 2004"
msgstr ""

#: ./build/en/book.xml:80(title) 
msgid "Foreword"
msgstr ""

#: ./build/en/book.xml:82(para) 
msgid "A bad Frequently Asked Questions (FAQ) sheet is one that is composed not of the questions people actually asked, but of the questions the FAQ's author <emphasis>wished</emphasis> people had asked. Perhaps you've seen the type before:"
msgstr ""

#: ./build/en/book.xml:88(para) 
msgid "Q: How can I use Glorbosoft XYZ to maximize team productivity?"
msgstr ""

#: ./build/en/book.xml:93(para) 
msgid "A: Many of our customers want to know how they can maximize productivity through our patented office groupware innovations. The answer is simple: first, click on the <quote><literal moreinfo=\"none\">File</literal></quote> menu, scroll down to <quote><literal moreinfo=\"none\">Increase Productivity</literal></quote>, then…"
msgstr ""

#: ./build/en/book.xml:101(para) 
msgid "The problem with such FAQs is that they are not, in a literal sense, FAQs at all. No one ever called the tech support line and asked, <quote>How can we maximize productivity?</quote>. Rather, people asked highly specific questions, like, <quote>How can we change the calendaring system to send reminders two days in advance instead of one?</quote> and so on. But it's a lot easier to make up imaginary Frequently Asked Questions than it is to discover the real ones. Compiling a true FAQ sheet requires a sustained, organized effort: over the lifetime of the software, incoming questions must be tracked, responses monitored, and all gathered into a coherent, searchable whole that reflects the collective experience of users in the wild. It calls for the patient, observant attitude of a field naturalist. No grand hypothesizing, no visionary pronouncements here—open eyes and accurate note-taking are what's needed most."
msgstr ""

#: ./build/en/book.xml:118(para) 
msgid "What I love about this book is that it grew out of just such a process, and shows it on every page. It is the direct result of the authors' encounters with users. It began with Ben Collins-Sussman's observation that people were asking the same basic questions over and over on the Subversion mailing lists: What are the standard workflows to use with Subversion? Do branches and tags work the same way as in other version control systems? How can I find out who made a particular change?"
msgstr ""

#: ./build/en/book.xml:127(para) 
msgid "Frustrated at seeing the same questions day after day, Ben worked intensely over a month in the summer of 2002 to write <citetitle>The Subversion Handbook</citetitle>, a sixty page manual that covered all the basics of using Subversion. The manual made no pretense of being complete, but it was distributed with Subversion and got users over that initial hump in the learning curve. When O'Reilly and Associates decided to publish a full-length Subversion book, the path of least resistance was obvious: just expand the Subversion handbook."
msgstr ""

#: ./build/en/book.xml:138(para) 
msgid "The three co-authors of the new book were thus presented with an unusual opportunity. Officially, their task was to write a book top-down, starting from a table of contents and an initial draft. But they also had access to a steady stream—indeed, an uncontrollable geyser—of bottom-up source material. Subversion was already in the hands of thousands of early adopters, and those users were giving tons of feedback, not only about Subversion, but about its existing documentation."
msgstr ""

#: ./build/en/book.xml:148(para) 
msgid "During the entire time they wrote this book, Ben, Mike, and Brian haunted the Subversion mailing lists and chat rooms incessantly, carefully noting the problems users were having in real-life situations. Monitoring such feedback was part of their job descriptions at CollabNet anyway, and it gave them a huge advantage when they set out to document Subversion. The book they produced is grounded firmly in the bedrock of experience, not in the shifting sands of wishful thinking; it combines the best aspects of user manual and FAQ sheet. This duality might not be noticeable on a first reading. Taken in order, front to back, the book is simply a straightforward description of a piece of software. There's the overview, the obligatory guided tour, the chapter on administrative configuration, some advanced topics, and of course a command reference and troubleshooting guide. Only when you come back to it later, seeking the solution to some specific problem, does its authenticity shine out: the telling details that can only result from encounters with the unexpected, the examples honed from genuine use cases, and most of all the sensitivity to the user's needs and the user's point of view."
msgstr ""

#: ./build/en/book.xml:169(para) 
msgid "Of course, no one can promise that this book will answer every question you have about Subversion. Sometimes, the precision with which it anticipates your questions will seem eerily telepathic; yet occasionally, you will stumble into a hole in the community's knowledge, and come away empty-handed. When this happens, the best thing you can do is email <email>users@subversion.tigris.org</email> and present your problem. The authors are still there, still watching, and they include not just the three listed on the cover, but many others who contributed corrections and original material. From the community's point of view, solving your problem is merely a pleasant side effect of a much larger project—namely, slowly adjusting this book, and ultimately Subversion itself, to more closely match the way people actually use it. They are eager to hear from you not merely because they can help you, but because you can help them. With Subversion as with all active free software projects, <emphasis>you are not alone</emphasis>."
msgstr ""

#: ./build/en/book.xml:188(para) 
msgid "Let this book be your first companion."
msgstr ""

#: ./build/en/book.xml:199(title) 
msgid "Preface"
msgstr ""

#: ./build/en/book.xml:202(attribution) 
msgid "Greg Hudson"
msgstr ""

#: ./build/en/book.xml:203(quote) 
msgid "It is important not to let the perfect become the enemy of the good, even when you can agree on what perfect is. Doubly so when you can't. As unpleasant as it is to be trapped by past mistakes, you can't make any progress by being afraid of your own shadow during design."
msgstr ""

#: ./build/en/book.xml:210(para) 
msgid "<indexterm significance=\"normal\"><primary>Concurrent Versions System (CVS)</primary></indexterm> In the world of open-source software, the Concurrent Versions System (CVS) was the tool of choice for version control for many years. And rightly so. CVS was open-source software itself, and its non-restrictive modus operandi and support for networked operation allowed dozens of geographically dispersed programmers to share their work. It fit the collaborative nature of the open-source world very well. CVS and its semi-chaotic development model have since become cornerstones of open-source culture."
msgstr ""

#: ./build/en/book.xml:225(para) 
msgid "But CVS was not without its flaws, and simply fixing those flaws promised to be an enormous effort. Enter Subversion. Designed to be a successor to CVS, Subversion's originators set out to win the hearts of CVS users in two ways—by creating an open-source system with a design (and <quote>look and feel</quote>) similar to CVS, and by attempting to avoid most of CVS's noticeable flaws. While the result isn't necessarily the next great evolution in version control design, Subversion <emphasis>is</emphasis> very powerful, very usable, and very flexible. And for the most part, almost all newly-started open-source projects now choose Subversion instead of CVS."
msgstr ""

#: ./build/en/book.xml:237(para) 
msgid "This book is written to document the 1.4 series of the Subversion version control system. We have made every attempt to be thorough in our coverage. However, Subversion has a thriving and energetic development community, so there are already a number of features and improvements planned for future versions of Subversion that may change some of the commands and specific notes in this book."
msgstr ""

#: ./build/en/book.xml:251(title) 
msgid "Audience"
msgstr ""

#: ./build/en/book.xml:253(para) 
msgid "This book is written for computer-literate folk who want to use Subversion to manage their data. While Subversion runs on a number of different operating systems, its primary user interface is command-line based. That command-line tool (<command moreinfo=\"none\">svn</command>) and auxiliary program are the focus of this book."
msgstr ""

#: ./build/en/book.xml:260(para) 
msgid "For consistency, the examples in this book assume the reader is using a Unix-like operating system and relatively comfortable with Unix and command-line interfaces. That said, the <command moreinfo=\"none\">svn</command> program also runs on non-Unix platforms like Microsoft Windows. With a few minor exceptions, such as the use of backward slashes (<literal moreinfo=\"none\">\\</literal>) instead of forward slashes (<literal moreinfo=\"none\">/</literal>) for path separators, the input to and output from this tool when run on Windows are identical to its Unix counterpart."
msgstr ""

#: ./build/en/book.xml:270(para) 
msgid "Most readers are probably programmers or system administrators who need to track changes to source code. This is the most common use for Subversion, and therefore it is the scenario underlying all of the book's examples. But Subversion can be used to manage changes to any sort of information—images, music, databases, documentation, and so on. To Subversion, all data is just data."
msgstr ""

#: ./build/en/book.xml:278(para) 
msgid "While this book is written with the assumption that the reader has never used a version control system, we've also tried to make it easy for users of CVS (and other systems) to make a painless leap into Subversion. Special sidebars may mention other version control systems from time to time, and a special appendix summarizes many of the differences between CVS and Subversion."
msgstr ""

#: ./build/en/book.xml:286(para) 
msgid "Note also that the source code examples used throughout the book are only examples. While they will compile with the proper compiler incantations, they are intended to illustrate a particular scenario, not necessarily serve as examples of good programming style or practices."
msgstr ""

#: ./build/en/book.xml:298(title) 
msgid "How to Read this Book"
msgstr ""

#: ./build/en/book.xml:300(para) 
msgid "This book aims to be useful to people of widely different backgrounds—from people with no previous experience in version control to experienced system administrators. Depending on your own background, certain chapters may be more or less important to you. The following can be considered a <quote>recommended reading list</quote> for various types of readers:"
msgstr ""

#: ./build/en/book.xml:310(term) 
msgid "Experienced System Administrators"
msgstr ""

#: ./build/en/book.xml:312(para) 
msgid "The assumption here is that you've probably used version control before before, and are dying to get a Subversion server up and running ASAP. <xref linkend=\"svn.reposadmin\"/> and <xref linkend=\"svn.serverconfig\"/> will show you how to create your first repository and make it available over the network. After that's done, <xref linkend=\"svn.tour\"/> and <xref linkend=\"svn.forcvs\"/> are the fastest routes to learning the Subversion client."
msgstr ""

#: ./build/en/book.xml:326(term) 
msgid "New users"
msgstr ""

#: ./build/en/book.xml:328(para) 
msgid "Your administrator has probably set up Subversion already, and you need to learn how to use the client. If you've never used a version control system, then <xref linkend=\"svn.basic\"/> is a vital introduction to the ideas behind version control. <xref linkend=\"svn.tour\"/> is a guided tour of the Subversion client."
msgstr ""

#: ./build/en/book.xml:338(term) 
msgid "Advanced users"
msgstr ""

#: ./build/en/book.xml:340(para) 
msgid "Whether you're a user or administrator, eventually your project will grow larger. You're going to want to learn how to do more advanced things with Subversion, such as how to use branches and perform merges (<xref linkend=\"svn.branchmerge\"/>), how to use Subversion's property support (<xref linkend=\"svn.advanced\"/>), how to configure runtime options (<xref linkend=\"svn.customization\"/>), and other things. These chapters aren't critical at first, but be sure to read them once you're comfortable with the basics."
msgstr ""

#: ./build/en/book.xml:352(term) 
msgid "Developers"
msgstr ""

#: ./build/en/book.xml:354(para) 
msgid "Presumably, you're already familiar with Subversion, and now want to either extend it or build new software on top of its many APIs. <xref linkend=\"svn.developer\"/> is just for you."
msgstr ""

#: ./build/en/book.xml:362(para) 
msgid "The book ends with reference material—<xref linkend=\"svn.ref\"/> is a reference guide for all Subversion commands, and the appendices cover a number of useful topics. These are the chapters you're mostly likely to come back to after you've finished the book."
msgstr ""

#: ./build/en/book.xml:373(title) 
msgid "Conventions Used in This Book"
msgstr ""

#: ./build/en/book.xml:375(para) 
msgid "This section covers the various conventions used in this book."
msgstr ""

#: ./build/en/book.xml:380(title) 
msgid "Typographic Conventions"
msgstr ""

#: ./build/en/book.xml:385(command) 
msgid "Constant width"
msgstr ""

#: ./build/en/book.xml:387(para) 
msgid "Used for commands, command output, and switches"
msgstr ""

#: ./build/en/book.xml:392(replaceable) 
msgid "Constant width italic"
msgstr ""

#: ./build/en/book.xml:394(para) 
msgid "Used for replaceable items in code and text"
msgstr ""

#: ./build/en/book.xml:399(filename) 
msgid "Italic"
msgstr ""

#: ./build/en/book.xml:401(para) 
msgid "Used for file and directory names"
msgstr ""

#: ./build/en/book.xml:411(title) 
msgid "Icons"
msgstr ""

#: ./build/en/book.xml:414(para) 
msgid "This icon designates a note relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:419(para) 
msgid "This icon designates a helpful tip relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:424(para) 
msgid "This icon designates a warning relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:435(title) 
msgid "Organization of This Book"
msgstr ""

#: ./build/en/book.xml:437(para) 
msgid "The chapters that follow and their contents are listed here:"
msgstr ""

#: ./build/en/book.xml:445(para) 
msgid "Covers the history of Subversion as well as its features, architecture, and components."
msgstr ""

#: ./build/en/book.xml:453(para) 
msgid "Explains the basics of version control and different versioning models, along with Subversion's repository, working copies, and revisions."
msgstr ""

#: ./build/en/book.xml:462(para) 
msgid "Walks you through a day in the life of a Subversion user. It demonstrates how to use a Subversion client to obtain, modify, and commit data."
msgstr ""

#: ./build/en/book.xml:471(para) 
msgid "Covers more complex features that regular users will eventually come into contact with, such as versioned metadata, file locking, and peg revisions."
msgstr ""

#: ./build/en/book.xml:480(para) 
msgid "Discusses branches, merges, and tagging, including best practices for branching and merging, common use cases, how to undo changes, and how to easily swing from one branch to the next."
msgstr ""

#: ./build/en/book.xml:490(para) 
msgid "Describes the basics of the Subversion repository, how to create, configure, and maintain a repository, and the tools you can use to do all of this."
msgstr ""

#: ./build/en/book.xml:499(para) 
msgid "Explains how to configure your Subversion server and the three ways to access your repository: <literal moreinfo=\"none\">HTTP</literal>, the <literal moreinfo=\"none\">svn</literal> protocol, and local disk access. It also covers the details of authentication, authorization and anonymous access."
msgstr ""

#: ./build/en/book.xml:511(para) 
msgid "Explores the Subversion client configuration files, the handling of internationalized text, and how to make external tools cooperate with Subversion."
msgstr ""

#: ./build/en/book.xml:520(para) 
msgid "Describes the internals of Subversion, the Subversion filesystem, and the working copy administrative areas from a programmer's point of view. Demonstrates how to use the public APIs to write a program that uses Subversion, and most importantly, how to contribute to the development of Subversion."
msgstr ""

#: ./build/en/book.xml:532(para) 
msgid "Explains in great detail every subcommand of <command moreinfo=\"none\">svn</command>, <command moreinfo=\"none\">svnadmin</command>, and <command moreinfo=\"none\">svnlook</command> with plenty of examples for the whole family!"
msgstr ""

#: ./build/en/book.xml:542(para) 
msgid "For the impatient, a whirlwind explanation of how to install Subversion and start using it immediately. You have been warned."
msgstr ""

#: ./build/en/book.xml:551(para) 
msgid "Covers the similarities and differences between Subversion and CVS, with numerous suggestions on how to break all the bad habits you picked up from years of using CVS. Included are descriptions of Subversion revision numbers, versioned directories, offline operations, <command moreinfo=\"none\">update</command> vs. <command moreinfo=\"none\">status</command>, branches, tags, metadata, conflict resolution, and authentication."
msgstr ""

#: ./build/en/book.xml:565(para) 
msgid "Describes the details of WebDAV and DeltaV, and how you can configure your Subversion repository to be mounted read/write as a DAV share."
msgstr ""

#: ./build/en/book.xml:574(para) 
msgid "Discusses tools that support or use Subversion, including alternative client programs, repository browser tools, and so on."
msgstr ""

#: ./build/en/book.xml:589(title) 
msgid "This Book is Free"
msgstr ""

#: ./build/en/book.xml:591(para) 
msgid "This book started out as bits of documentation written by Subversion project developers, which were then coalesced into a single work and rewritten. As such, it has always been under a free license. (See <xref linkend=\"svn.copyright\"/>.) In fact, the book was written in the public eye, originally as a part of Subversion project itself. This means two things:"
msgstr ""

#: ./build/en/book.xml:600(para) 
msgid "You will always find the latest version of this book in the book's own Subversion repository."
msgstr ""

#: ./build/en/book.xml:605(para) 
msgid "You can make changes to this book and redistribute it however you wish—it's under a free license. Your only obligation is to maintain proper attribution to the original authors. Of course, rather than distribute your own private version of this book, we'd much rather you send feedback and patches to the Subversion developer community."
msgstr ""

#. O'REILLY SHOULD TWEAK THIS PARAGRAPH
#: ./build/en/book.xml:615(para) 
msgid "The online home of this book's development and most of the volunteer-driven translation efforts around it is <ulink url=\"http://svnbook.red-bean.com\"/>. There, you can find links to the latest snapshots and tagged versions of the book in various formats, as well as instructions for accessing the book's Subversion repository (where lives its DocBook XML source code). Feedback is welcome—encouraged, even. Please submit all comments, complaints, and patches against the book sources to <email>svnbook-dev@red-bean.com</email>."
msgstr ""

#: ./build/en/book.xml:630(title) 
msgid "Acknowledgments"
msgstr ""

#: ./build/en/book.xml:638(para) 
msgid "Oh, and thanks, Karl, for being too overworked to write this book yourself."
msgstr ""

#: ./build/en/book.xml:632(para) 
msgid "This book would not be possible (nor very useful) if Subversion did not exist. For that, the authors would like to thank Brian Behlendorf and CollabNet for the vision to fund such a risky and ambitious new Open Source project; Jim Blandy for the original Subversion name and design—we love you, Jim; Karl Fogel for being such a good friend and a great community leader, in that order.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:642(para) 
msgid "Thanks to O'Reilly and our editors, Linda Mui and Tatiana Diaz for their patience and support."
msgstr ""

#: ./build/en/book.xml:645(para) 
msgid "Finally, we thank the countless people who contributed to this book with informal reviews, suggestions, and fixes: While this is undoubtedly not a complete list, this book would be incomplete and incorrect without the help of: David Anderson, Jani Averbach, Ryan Barrett, Francois Beausoleil, Jennifer Bevan, Matt Blais, Zack Brown, Martin Buchholz, Brane Cibej, John R. Daily, Peter Davis, Olivier Davy, Robert P. J. Day, Mo DeJong, Brian Denny, Joe Drew, Nick Duffek, Ben Elliston, Justin Erenkrantz, Shlomi Fish, Julian Foad, Chris Foote, Martin Furter, Dave Gilbert, Eric Gillespie, David Glasser, Matthew Gregan, Art Haas, Eric Hanchrow, Greg Hudson, Alexis Huxley, Jens B. Jorgensen, Tez Kamihira, David Kimdon, Mark Benedetto King, Andreas J. Koenig, Nuutti Kotivuori, Matt Kraai, Scott Lamb, Vincent Lefevre, Morten Ludvigsen, Paul Lussier, Bruce A. Mah, Philip Martin, Feliciano Matias, Patrick Mayweg, Gareth McCaughan, Jon Middleton, Tim Moloney, Christopher Ness, Mats Nilsson, Joe Orton, Amy Lyn Pilato, Kevin Pilch-Bisson, Dmitriy Popkov, Michael Price, Mark Proctor, Steffen Prohaska, Daniel Rall, Jack Repenning, Tobias Ringstrom, Garrett Rooney, Joel Rosdahl, Christian Sauer, Larry Shatzer, Russell Steicke, Sander Striker, Erik Sjoelund, Johan Sundstroem, John Szakmeister, Mason Thomas, Eric Wadsworth, Colin Watson, Alex Waugh, Chad Whitacre, Josef Wolf, Blair Zajac, and the entire Subversion community."
msgstr ""

#: ./build/en/book.xml:672(title) 
msgid "From Ben Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:674(para) 
msgid "Thanks to my wife Frances, who, for many months, got to hear, <quote>But honey, I'm still working on the book</quote>, rather than the usual, <quote>But honey, I'm still doing email.</quote> I don't know where she gets all that patience! She's my perfect counterbalance."
msgstr ""

#: ./build/en/book.xml:680(para) 
msgid "Thanks to my extended family and friends for their sincere encouragement, despite having no actual interest in the subject. (You know, the ones who say, <quote>Ooh, you wrote a book?</quote>, and then when you tell them it's a computer book, sort of glaze over.)"
msgstr ""

#: ./build/en/book.xml:686(para) 
msgid "Thanks to all my close friends, who make me a rich, rich man. Don't look at me that way—you know who you are."
msgstr ""

#: ./build/en/book.xml:689(para) 
msgid "Thanks to my parents for the perfect low-level formatting, and being unbelievable role models. Thanks to my son for the opportunity to pass that on."
msgstr ""

#: ./build/en/book.xml:697(title) 
msgid "From Brian W. Fitzpatrick"
msgstr ""

#. ### TODO(fitz):  update this?
#: ./build/en/book.xml:701(para) 
msgid "Huge thanks to my wife Marie for being incredibly understanding, supportive, and most of all, patient. Thank you to my brother Eric who first introduced me to UNIX programming way back when. Thanks to my Mom and Grandmother for all their support, not to mention enduring a Christmas holiday where I came home and promptly buried my head in my laptop to work on the book."
msgstr ""

#: ./build/en/book.xml:709(para) 
msgid "To Mike and Ben: It was a pleasure working with you on the book. Heck, it's a pleasure working with you at work!"
msgstr ""

#: ./build/en/book.xml:712(para) 
msgid "To everyone in the Subversion community and the Apache Software Foundation, thanks for having me. Not a day goes by where I don't learn something from at least one of you."
msgstr ""

#: ./build/en/book.xml:717(para) 
msgid "Lastly, thanks to my Grandfather who always told me that <quote>freedom equals responsibility.</quote> I couldn't agree more."
msgstr ""

#: ./build/en/book.xml:725(title) 
msgid "From C. Michael Pilato"
msgstr ""

#: ./build/en/book.xml:727(para) 
msgid "Special thanks to Amy, my best friend and wife of nine incredible years, for her love and patient support, for putting up with the late nights, and for graciously enduring the version control processes I've imposed on her. Don't worry, Sweetheart—you'll be a TortoiseSVN wizard in no time!"
msgstr ""

#: ./build/en/book.xml:734(para) 
msgid "Gavin, there probably aren't many words in this book that you can successfully <quote>sound out</quote> at this stage, but when you've finally got a handle on the written form of this crazy language we speak, I hope you're as proud of your Daddy as he is of you."
msgstr ""

#: ./build/en/book.xml:743(para) 
msgid "Translation: Daddy loves you and hopes you like computers as much as you like basketball, baseball, and football. (Wasn't that obvious?)"
msgstr ""

#: ./build/en/book.xml:740(para) 
msgid "Aidan, Daddy luffoo et ope Aiduh yike contootoo as much as Aiduh yike batetball, base-ball, et bootball. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:749(para) 
msgid "Mom and Dad, thanks for your constant support and enthusiasm. Mom- and Dad-in-law, thanks for all of the same <emphasis>plus</emphasis> your fabulous daughter."
msgstr ""

#: ./build/en/book.xml:753(para) 
msgid "Hats off to Shep Kendall, through whom the world of computers was first opened to me; Ben Collins-Sussman, my tour-guide through the open-source world; Karl Fogel—you <emphasis>are</emphasis> my <filename moreinfo=\"none\">.emacs</filename>; Greg Stein, for oozing practical programming know-how; Brian Fitzpatrick—for sharing this writing experience with me. To the many folks from whom I am constantly picking up new knowledge—keep dropping it!"
msgstr ""

#: ./build/en/book.xml:762(para) 
msgid "Finally, to the One who perfectly demonstrates creative excellence—thank You."
msgstr ""

#: ./build/en/book.xml:774(title) 
msgid "What is Subversion?"
msgstr ""

#: ./build/en/book.xml:776(para) 
msgid "Subversion is a free/open-source version control system. That is, Subversion manages files and directories, and the changes made to them, over time. This allows you to recover older versions of your data, or examine the history of how your data changed. In this regard, many people think of a version control system as a sort of <quote>time machine</quote>."
msgstr ""

#: ./build/en/book.xml:783(para) 
msgid "Subversion can operate across networks, which allows it to be used by people on different computers. At some level, the ability for various people to modify and manage the same set of data from their respective locations fosters collaboration. Progress can occur more quickly without a single conduit through which all modifications must occur. And because the work is versioned, you need not fear that quality is the trade-off for losing that conduit—if some incorrect change is made to the data, just undo that change."
msgstr ""

#: ./build/en/book.xml:793(para) 
msgid "Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code, and have many features that are specific to software development—such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage <emphasis>any</emphasis> collection of files. For you, those files might be source code—for others, anything from grocery shopping lists to digital video mixdowns and beyond."
msgstr ""

#: ./build/en/book.xml:808(title) 
msgid "Subversion's History"
msgstr ""

#: ./build/en/book.xml:810(para) 
msgid "<indexterm significance=\"normal\"><primary>Subversion</primary><secondary>history of</secondary></indexterm> In early 2000, CollabNet, Inc. (<ulink url=\"http://www.collab.net\"/>) began seeking developers to write a replacement for CVS. CollabNet offers a collaboration software suite called CollabNet Enterprise Edition (CEE) of which one component is version control. Although CEE used CVS as its initial version control system, CVS's limitations were obvious from the beginning, and CollabNet knew it would eventually have to find something better. Unfortunately, CVS had become the de facto standard in the open source world largely because there <emphasis>wasn't</emphasis> anything better, at least not under a free license. So CollabNet determined to write a new version control system from scratch, retaining the basic ideas of CVS, but without the bugs and misfeatures."
msgstr ""

#: ./build/en/book.xml:830(para) 
msgid "In February 2000, they contacted Karl Fogel, the author of <citetitle>Open Source Development with CVS</citetitle> (Coriolis, 1999), and asked if he'd like to work on this new project. Coincidentally, at the time Karl was already discussing a design for a new version control system with his friend Jim Blandy. In 1995, the two had started Cyclic Software, a company providing CVS support contracts, and although they later sold the business, they still used CVS every day at their jobs. Their frustration with CVS had led Jim to think carefully about better ways to manage versioned data, and he'd already come up with not only the name <quote>Subversion</quote>, but also with the basic design of the Subversion data store. When CollabNet called, Karl immediately agreed to work on the project, and Jim got his employer, Red Hat Software, to essentially donate him to the project for an indefinite period of time. CollabNet hired Karl and Ben Collins-Sussman, and detailed design work began in May. With the help of some well-placed prods from Brian Behlendorf and Jason Robbins of CollabNet, and Greg Stein (at the time an independent developer active in the WebDAV/DeltaV specification process), Subversion quickly attracted a community of active developers. It turned out that many people had had the same frustrating experiences with CVS, and welcomed the chance to finally do something about it."
msgstr ""

#: ./build/en/book.xml:855(para) 
msgid "The original design team settled on some simple goals. They didn't want to break new ground in version control methodology, they just wanted to fix CVS. They decided that Subversion would match CVS's features, and preserve the same development model, but not duplicate CVS's most obvious flaws. And although it did not need to be a drop-in replacement for CVS, it should be similar enough that any CVS user could make the switch with little effort."
msgstr ""

#: ./build/en/book.xml:864(para) 
msgid "After fourteen months of coding, Subversion became <quote>self-hosting</quote> on August 31, 2001. That is, Subversion developers stopped using CVS to manage Subversion's own source code, and started using Subversion instead."
msgstr ""

#: ./build/en/book.xml:869(para) 
msgid "While CollabNet started the project, and still funds a large chunk of the work (it pays the salaries of a few full-time Subversion developers), Subversion is run like most open-source projects, governed by a loose, transparent set of rules that encourage meritocracy. CollabNet's copyright license is fully compliant with the Debian Free Software Guidelines. In other words, anyone is free to download, modify, and redistribute Subversion as he pleases; no permission from CollabNet or anyone else is required."
msgstr ""

#: ./build/en/book.xml:884(title) 
msgid "Subversion's Features"
msgstr ""

#: ./build/en/book.xml:886(para) 
msgid "When discussing the features that Subversion brings to the version control table, it is often helpful to speak of them in terms of how they improve upon CVS's design. If you're not familiar with CVS, you may not understand all of these features. And if you're not familiar with version control at all, your eyes may glaze over unless you first read <xref linkend=\"svn.basic\"/>, in which we provide a gentle introduction to version control."
msgstr ""

#: ./build/en/book.xml:894(para) 
msgid "Subversion provides:"
msgstr ""

#: ./build/en/book.xml:898(term) 
msgid "Directory versioning"
msgstr ""

#: ./build/en/book.xml:900(para) 
msgid "CVS only tracks the history of individual files, but Subversion implements a <quote>virtual</quote> versioned filesystem that tracks changes to whole directory trees over time. Files <emphasis>and</emphasis> directories are versioned."
msgstr ""

#: ./build/en/book.xml:909(term) 
msgid "True version history"
msgstr ""

#: ./build/en/book.xml:911(para) 
msgid "Since CVS is limited to file versioning, operations such as copies and renames—which might happen to files, but which are really changes to the contents of some containing directory—aren't supported in CVS. Additionally, in CVS you cannot replace a versioned file with some new thing of the same name without the new item inheriting the history of the old—perhaps completely unrelated—file. With Subversion, you can add, delete, copy, and rename both files and directories. And every newly added file begins with a fresh, clean history all its own."
msgstr ""

#: ./build/en/book.xml:926(term) 
msgid "Atomic commits"
msgstr ""

#: ./build/en/book.xml:928(para) 
msgid "A collection of modifications either goes into the repository completely, or not at all. This allows developers to construct and commit changes as logical chunks, and prevents problems that can occur when only a portion of a set of changes is successfully sent to the repository."
msgstr ""

#: ./build/en/book.xml:938(term) 
msgid "Versioned metadata"
msgstr ""

#: ./build/en/book.xml:940(para) 
msgid "Each file and directory has a set of properties—keys and their values—associated with it. You can create and store any arbitrary key/value pairs you wish. Properties are versioned over time, just like file contents."
msgstr ""

#: ./build/en/book.xml:949(term) 
msgid "Choice of network layers"
msgstr ""

#: ./build/en/book.xml:951(para) 
msgid "Subversion has an abstracted notion of repository access, making it easy for people to implement new network mechanisms. Subversion can plug into the Apache HTTP Server as an extension module. This gives Subversion a big advantage in stability and interoperability, and instant access to existing features provided by that server—authentication, authorization, wire compression, and so on. A more lightweight, standalone Subversion server process is also available. This server speaks a custom protocol which can be easily tunneled over SSH."
msgstr ""

#: ./build/en/book.xml:966(term) 
msgid "Consistent data handling"
msgstr ""

#: ./build/en/book.xml:968(para) 
msgid "Subversion expresses file differences using a binary differencing algorithm, which works identically on both text (human-readable) and binary (human-unreadable) files. Both types of files are stored equally compressed in the repository, and differences are transmitted in both directions across the network."
msgstr ""

#: ./build/en/book.xml:978(term) 
msgid "Efficient branching and tagging"
msgstr ""

#: ./build/en/book.xml:980(para) 
msgid "The cost of branching and tagging need not be proportional to the project size. Subversion creates branches and tags by simply copying the project, using a mechanism similar to a hard-link. Thus these operations take only a very small, constant amount of time."
msgstr ""

#: ./build/en/book.xml:990(term) 
msgid "Hackability"
msgstr ""

#: ./build/en/book.xml:992(para) 
msgid "Subversion has no historical baggage; it is implemented as a collection of shared C libraries with well-defined APIs. This makes Subversion extremely maintainable and usable by other applications and languages."
msgstr ""

#: ./build/en/book.xml:1007(title) ./build/en/book.xml:1014(title) 
msgid "Subversion's Architecture"
msgstr ""

#: ./build/en/book.xml:1009(para) 
msgid "<xref linkend=\"svn.intro.architecture.dia-1\"/> illustrates a <quote>mile-high</quote> view of Subversion's design."
msgstr ""

#: ./build/en/book.xml:1018(para) 
msgid "On one end is a Subversion repository that holds all of your versioned data. On the other end is your Subversion client program, which manages local reflections of portions of that versioned data (called <quote>working copies</quote>). Between these extremes are multiple routes through various Repository Access (RA) layers. Some of these routes go across computer networks and through network servers which then access the repository. Others bypass the network altogether and access the repository directly."
msgstr ""

#: ./build/en/book.xml:1033(title) 
msgid "Subversion's Components"
msgstr ""

#: ./build/en/book.xml:1035(para) 
msgid "Subversion, once installed, has a number of different pieces. The following is a quick overview of what you get. Don't be alarmed if the brief descriptions leave you scratching your head—there are <emphasis>plenty</emphasis> more pages in this book devoted to alleviating that confusion."
msgstr ""

#: ./build/en/book.xml:1043(term) ./build/en/book.xml:18147(primary) ./build/en/book.xml:18253(primary) ./build/en/book.xml:18323(primary) ./build/en/book.xml:18408(primary) ./build/en/book.xml:18545(primary) ./build/en/book.xml:18623(primary) ./build/en/book.xml:18761(primary) ./build/en/book.xml:18936(primary) ./build/en/book.xml:19049(primary) ./build/en/book.xml:19301(primary) ./build/en/book.xml:19415(primary) ./build/en/book.xml:19467(primary) ./build/en/book.xml:19569(primary) ./build/en/book.xml:19730(primary) ./build/en/book.xml:19842(primary) ./build/en/book.xml:19942(primary) ./build/en/book.xml:20186(primary) ./build/en/book.xml:20307(primary) ./build/en/book.xml:20393(primary) ./build/en/book.xml:20507(primary) ./build/en/book.xml:20585(primary) ./build/en/book.xml:20661(primary) ./build/en/book.xml:20743(primary) ./build/en/book.xml:20830(primary) ./build/en/book.xml:20965(primary) ./build/en/book.xml:21054(primary) ./build/en/book.xml:21158(primary) ./build/en/book.xml:21563(primary) ./build/en/book.xml:21723(primary) ./build/en/book.xml:21816(primary) 
msgid "svn"
msgstr ""

#: ./build/en/book.xml:1045(para) 
msgid "The command-line client program."
msgstr ""

#: ./build/en/book.xml:1050(term) ./build/en/book.xml:24024(command) ./build/en/book.xml:24029(primary) ./build/en/book.xml:24033(refname) 
msgid "svnversion"
msgstr ""

#: ./build/en/book.xml:1052(para) 
msgid "A program for reporting the state (in terms of revisions of the items present) of a working copy."
msgstr ""

#: ./build/en/book.xml:1058(term) ./build/en/book.xml:10734(title) ./build/en/book.xml:22908(command) ./build/en/book.xml:22998(primary) ./build/en/book.xml:23044(primary) ./build/en/book.xml:23102(primary) ./build/en/book.xml:23201(primary) ./build/en/book.xml:23247(primary) ./build/en/book.xml:23318(primary) ./build/en/book.xml:23365(primary) ./build/en/book.xml:23396(primary) ./build/en/book.xml:23461(primary) ./build/en/book.xml:23512(primary) ./build/en/book.xml:23564(primary) ./build/en/book.xml:23609(primary) ./build/en/book.xml:23664(primary) ./build/en/book.xml:23730(primary) ./build/en/book.xml:23784(primary) ./build/en/book.xml:23823(primary) 
msgid "svnlook"
msgstr ""

#: ./build/en/book.xml:1060(para) 
msgid "A tool for directly inspecting a Subversion repository."
msgstr ""

#: ./build/en/book.xml:1065(term) ./build/en/book.xml:10701(title) ./build/en/book.xml:21967(command) ./build/en/book.xml:22102(primary) ./build/en/book.xml:22165(primary) ./build/en/book.xml:22205(primary) ./build/en/book.xml:22315(primary) ./build/en/book.xml:22347(primary) ./build/en/book.xml:22389(primary) ./build/en/book.xml:22421(primary) ./build/en/book.xml:22469(primary) ./build/en/book.xml:22535(primary) ./build/en/book.xml:22583(primary) ./build/en/book.xml:22623(primary) ./build/en/book.xml:22705(primary) ./build/en/book.xml:22751(primary) ./build/en/book.xml:22805(primary) ./build/en/book.xml:22865(primary) 
msgid "svnadmin"
msgstr ""

#: ./build/en/book.xml:1067(para) 
msgid "A tool for creating, tweaking or repairing a Subversion repository."
msgstr ""

#: ./build/en/book.xml:1073(term) ./build/en/book.xml:10859(title) 
msgid "svndumpfilter"
msgstr ""

#: ./build/en/book.xml:1075(para) 
msgid "A program for filtering Subversion repository dump streams."
msgstr ""

#: ./build/en/book.xml:1081(term) ./build/en/book.xml:16483(term) ./build/en/book.xml:24178(command) ./build/en/book.xml:24183(literal) 
msgid "mod_dav_svn"
msgstr ""

#: ./build/en/book.xml:1083(para) 
msgid "A plug-in module for the Apache HTTP Server, used to make your repository available to others over a network."
msgstr ""

#: ./build/en/book.xml:1090(term) ./build/en/book.xml:1624(literal) ./build/en/book.xml:12672(entry) ./build/en/book.xml:23864(command) 
msgid "svnserve"
msgstr ""

#: ./build/en/book.xml:1092(para) 
msgid "A custom standalone server program, runnable as a daemon process or invokable by SSH; another way to make your repository available to others over a network."
msgstr ""

#: ./build/en/book.xml:1099(term) ./build/en/book.xml:10912(title) 
msgid "svnsync"
msgstr ""

#: ./build/en/book.xml:1101(para) 
msgid "A program for incrementally mirroring one repository to another over a network."
msgstr ""

#: ./build/en/book.xml:1108(para) 
msgid "Assuming you have Subversion installed correctly, you should be ready to start. The next two chapters will walk you through the use of <command moreinfo=\"none\">svn</command>, Subversion's command-line client program."
msgstr ""

#: ./build/en/book.xml:1126(title) 
msgid "Fundamental Concepts"
msgstr ""

#: ./build/en/book.xml:1128(para) 
msgid "This chapter is a short, casual introduction to Subversion. If you're new to version control, this chapter is definitely for you. We begin with a discussion of general version control concepts, work our way into the specific ideas behind Subversion, and show some simple examples of Subversion in use."
msgstr ""

#: ./build/en/book.xml:1135(para) 
msgid "Even though the examples in this chapter show people sharing collections of program source code, keep in mind that Subversion can manage any sort of file collection—it's not limited to helping computer programmers."
msgstr ""

#: ./build/en/book.xml:1145(title) 
msgid "The Repository"
msgstr ""

#: ./build/en/book.xml:1147(para) 
msgid "Subversion is a centralized system for sharing information. At its core is a repository, which is a central store of data. The repository stores information in the form of a <firstterm>filesystem tree</firstterm>—a typical hierarchy of files and directories. Any number of <firstterm>clients</firstterm> connect to the repository, and then read or write to these files. By writing data, a client makes the information available to others; by reading data, the client receives information from others. <xref linkend=\"svn.basic.repository.dia-1\"/> illustrates this."
msgstr ""

#: ./build/en/book.xml:1158(title) 
msgid "A typical client/server system"
msgstr ""

#: ./build/en/book.xml:1162(para) 
msgid "So why is this interesting? So far, this sounds like the definition of a typical file server. And indeed, the repository <emphasis>is</emphasis> a kind of file server, but it's not your usual breed. What makes the Subversion repository special is that <emphasis>it remembers every change</emphasis> ever written to it: every change to every file, and even changes to the directory tree itself, such as the addition, deletion, and rearrangement of files and directories."
msgstr ""

#: ./build/en/book.xml:1171(para) 
msgid "When a client reads data from the repository, it normally sees only the latest version of the filesystem tree. But the client also has the ability to view <emphasis>previous</emphasis> states of the filesystem. For example, a client can ask historical questions like, <quote>What did this directory contain last Wednesday?</quote> or <quote>Who was the last person to change this file, and what changes did he make?</quote> These are the sorts of questions that are at the heart of any <firstterm>version control system</firstterm>: systems that are designed to record and track changes to data over time."
msgstr ""

#: ./build/en/book.xml:1189(title) 
msgid "Versioning Models"
msgstr ""

#: ./build/en/book.xml:1191(para) 
msgid "The core mission of a version control system is to enable collaborative editing and sharing of data. But different systems use different strategies to achieve this. It's important to understand these different strategies for a couple of reasons. First, it will help you compare and contrast existing version control systems, in case you encounter other systems similar to Subversion. Beyond that, it will also help you make more effective use of Subversion, since Subversion itself supports a couple of different ways of working."
msgstr ""

#: ./build/en/book.xml:1203(title) 
msgid "The Problem of File-Sharing"
msgstr ""

#: ./build/en/book.xml:1205(para) 
msgid "All version control systems have to solve the same fundamental problem: how will the system allow users to share information, but prevent them from accidentally stepping on each other's feet? It's all too easy for users to accidentally overwrite each other's changes in the repository."
msgstr ""

#: ./build/en/book.xml:1212(para) 
msgid "Consider the scenario shown in <xref linkend=\"svn.basic.vsn-models.problem-sharing.dia-1\"/>. Suppose we have two co-workers, Harry and Sally. They each decide to edit the same repository file at the same time. If Harry saves his changes to the repository first, then it's possible that (a few moments later) Sally could accidentally overwrite them with her own new version of the file. While Harry's version of the file won't be lost forever (because the system remembers every change), any changes Harry made <emphasis>won't</emphasis> be present in Sally's newer version of the file, because she never saw Harry's changes to begin with. Harry's work is still effectively lost—or at least missing from the latest version of the file—and probably by accident. This is definitely a situation we want to avoid!"
msgstr ""

#: ./build/en/book.xml:1228(title) 
msgid "The problem to avoid"
msgstr ""

#: ./build/en/book.xml:1236(title) 
msgid "The Lock-Modify-Unlock Solution"
msgstr ""

#: ./build/en/book.xml:1238(para) 
msgid "Many version control systems use a <firstterm>lock-modify-unlock</firstterm> model to address the problem of many authors clobbering each other's work. In this model, the repository allows only one person to change a file at a time. This exclusivity policy is managed using locks. Harry must <quote>lock</quote> a file before he can begin making changes to it. If Harry has locked a file, then Sally cannot also lock it, and therefore cannot make any changes to that file. All she can do is read the file, and wait for Harry to finish his changes and release his lock. After Harry unlocks the file, Sally can take her turn by locking and editing the file. <xref linkend=\"svn.basic.vsn-models.lock-unlock.dia-1\"/> demonstrates this simple solution."
msgstr ""

#: ./build/en/book.xml:1253(title) 
msgid "The lock-modify-unlock solution"
msgstr ""

#: ./build/en/book.xml:1257(para) 
msgid "The problem with the lock-modify-unlock model is that it's a bit restrictive, and often becomes a roadblock for users:"
msgstr ""

#: ./build/en/book.xml:1263(para) 
msgid "<emphasis>Locking may cause administrative problems.</emphasis> Sometimes Harry will lock a file and then forget about it. Meanwhile, because Sally is still waiting to edit the file, her hands are tied. And then Harry goes on vacation. Now Sally has to get an administrator to release Harry's lock. The situation ends up causing a lot of unnecessary delay and wasted time."
msgstr ""

#: ./build/en/book.xml:1275(para) 
msgid "<emphasis>Locking may cause unnecessary serialization.</emphasis> What if Harry is editing the beginning of a text file, and Sally simply wants to edit the end of the same file? These changes don't overlap at all. They could easily edit the file simultaneously, and no great harm would come, assuming the changes were properly merged together. There's no need for them to take turns in this situation."
msgstr ""

#: ./build/en/book.xml:1288(para) 
msgid "<emphasis>Locking may create a false sense of security.</emphasis> Suppose Harry locks and edits file A, while Sally simultaneously locks and edits file B. But what if A and B depend on one another, and the changes made to each are semantically incompatible? Suddenly A and B don't work together anymore. The locking system was powerless to prevent the problem—yet it somehow provided a false sense of security. It's easy for Harry and Sally to imagine that by locking files, each is beginning a safe, insulated task, and thus not bother discussing their incompatible changes early on. Locking often becomes a substitute for real communication."
msgstr ""

#: ./build/en/book.xml:1309(title) 
msgid "The Copy-Modify-Merge Solution"
msgstr ""

#: ./build/en/book.xml:1311(para) 
msgid "Subversion, CVS, and a number of other version control systems use a <firstterm>copy-modify-merge</firstterm> model as an alternative to locking. In this model, each user's client contacts the project repository and creates a personal <firstterm>working copy</firstterm>—a local reflection of the repository's files and directories. Users then work simultaneously and independently, modifying their private copies. Finally, the private copies are merged together into a new, final version. The version control system often assists with the merging, but ultimately a human being is responsible for making it happen correctly."
msgstr ""

#: ./build/en/book.xml:1323(para) 
msgid "Here's an example. Say that Harry and Sally each create working copies of the same project, copied from the repository. They work concurrently, and make changes to the same file A within their copies. Sally saves her changes to the repository first. When Harry attempts to save his changes later, the repository informs him that his file A is <firstterm>out-of-date</firstterm>. In other words, that file A in the repository has somehow changed since he last copied it. So Harry asks his client to <firstterm>merge</firstterm> any new changes from the repository into his working copy of file A. Chances are that Sally's changes don't overlap with his own; so once he has both sets of changes integrated, he saves his working copy back to the repository. <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-1\"/> and <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-2\"/> show this process."
msgstr ""

#: ./build/en/book.xml:1339(title) 
msgid "The copy-modify-merge solution"
msgstr ""

#: ./build/en/book.xml:1344(title) 
msgid "The copy-modify-merge solution (continued)"
msgstr ""

#: ./build/en/book.xml:1348(para) 
msgid "But what if Sally's changes <emphasis>do</emphasis> overlap with Harry's changes? What then? This situation is called a <firstterm>conflict</firstterm>, and it's usually not much of a problem. When Harry asks his client to merge the latest repository changes into his working copy, his copy of file A is somehow flagged as being in a state of conflict: he'll be able to see both sets of conflicting changes, and manually choose between them. Note that software can't automatically resolve conflicts; only humans are capable of understanding and making the necessary intelligent choices. Once Harry has manually resolved the overlapping changes—perhaps after a discussion with Sally—he can safely save the merged file back to the repository."
msgstr ""

#: ./build/en/book.xml:1362(para) 
msgid "The copy-modify-merge model may sound a bit chaotic, but in practice, it runs extremely smoothly. Users can work in parallel, never waiting for one another. When they work on the same files, it turns out that most of their concurrent changes don't overlap at all; conflicts are infrequent. And the amount of time it takes to resolve conflicts is usually far less than the time lost by a locking system."
msgstr ""

#: ./build/en/book.xml:1370(para) 
msgid "In the end, it all comes down to one critical factor: user communication. When users communicate poorly, both syntactic and semantic conflicts increase. No system can force users to communicate perfectly, and no system can detect semantic conflicts. So there's no point in being lulled into a false promise that a locking system will somehow prevent conflicts; in practice, locking seems to inhibit productivity more than anything else."
msgstr ""

#: ./build/en/book.xml:1380(title) 
msgid "When Locking is Necessary"
msgstr ""

#: ./build/en/book.xml:1382(para) 
msgid "While the lock-modify-unlock model is considered generally harmful to collaboration, there are still times when locking is appropriate."
msgstr ""

#: ./build/en/book.xml:1386(para) 
msgid "The copy-modify-merge model is based on the assumption that files are contextually mergeable: that is, that the majority of the files in the repository are line-based text files (such as program source code). But for files with binary formats, such as artwork or sound, it's often impossible to merge conflicting changes. In these situations, it really is necessary to users to take strict turns when changing the file. Without serialized access, somebody ends up wasting time on changes that are ultimately discarded."
msgstr ""

#: ./build/en/book.xml:1397(para) 
msgid "While Subversion is still primarily a copy-modify-merge system, it still recognizes the need to lock an occasional file ands provide mechanisms for this. This feature is discussed later in this book, in <xref linkend=\"svn.advanced.locking\"/>."
msgstr ""

#: ./build/en/book.xml:1415(title) 
msgid "Subversion in Action"
msgstr ""

#: ./build/en/book.xml:1417(para) 
msgid "It's time to move from the abstract to the concrete. In this section, we'll show real examples of Subversion being used."
msgstr ""

#: ./build/en/book.xml:1423(title) 
msgid "Subversion Repository URLs"
msgstr ""

#: ./build/en/book.xml:1425(para) 
msgid "Throughout this book, Subversion uses URLs to identify versioned files and directories in Subversion repositories. For the most part, these URLs use the standard syntax, allowing for server names and port numbers to be specified as part of the URL:"
msgstr ""

#: ./build/en/book.xml:1431(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com:9834/repos\n…\n"
msgstr ""

#: ./build/en/book.xml:1436(para) 
msgid "But there are some nuances in Subversion's handling of URLs that are notable. For example, URLs containing the <literal moreinfo=\"none\">file://</literal> access method (used for local repositories) must, in accordance with convention, have either a server name of <literal moreinfo=\"none\">localhost</literal> or no server name at all:"
msgstr ""

#: ./build/en/book.xml:1443(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///path/to/repos\n…\n$ svn checkout file://localhost/path/to/repos\n…\n"
msgstr ""

#: ./build/en/book.xml:1450(para) 
msgid "Also, users of the <literal moreinfo=\"none\">file://</literal> scheme on Windows platforms will need to use an unofficially <quote>standard</quote> syntax for accessing repositories that are on the same machine, but on a different drive than the client's current working drive. Either of the two following URL path syntaxes will work where <literal moreinfo=\"none\">X</literal> is the drive on which the repository resides:"
msgstr ""

#: ./build/en/book.xml:1459(screen) 
#, no-wrap
msgid "\nC:\\&gt; svn checkout file:///X:/path/to/repos\n…\nC:\\&gt; svn checkout \"file:///X|/path/to/repos\"\n…\n"
msgstr ""

#: ./build/en/book.xml:1466(para) 
msgid "In the second syntax, you need to quote the URL so that the vertical bar character is not interpreted as a pipe. Also, note that a URL uses forward slashes even though the native (non-URL) form of a path on Windows uses backslashes."
msgstr ""

#: ./build/en/book.xml:1472(para) 
msgid "Subversion's <literal moreinfo=\"none\">file://</literal> URLs cannot be used in a regular web browser the way typical <literal moreinfo=\"none\">file://</literal> URLs can. When you attempt to view a <literal moreinfo=\"none\">file://</literal> URL in a regular web browser, it reads and displays the contents of the file at that location by examining the filesystem directly. However, Subversion's resources exist in a virtual filesystem (see <xref linkend=\"svn.developer.layerlib.repos\"/>), and your browser will not understand how to interact with that filesystem."
msgstr ""

#: ./build/en/book.xml:1483(para) 
msgid "Finally, it should be noted that the Subversion client will automatically encode URLs as necessary, just like a web browser does. For example, if a URL contains a space or upper-ASCII character:"
msgstr ""

#: ./build/en/book.xml:1488(screen) 
#, no-wrap
msgid "\n$ svn checkout \"http://host/path with space/project/españa\"\n"
msgstr ""

#: ./build/en/book.xml:1492(para) 
msgid "…then Subversion will escape the unsafe characters and behave as if you had typed:"
msgstr ""

#: ./build/en/book.xml:1495(screen) 
#, no-wrap
msgid "\n$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a\n"
msgstr ""

#: ./build/en/book.xml:1499(para) 
msgid "If the URL contains spaces, be sure to place it within quote marks, so that your shell treats the whole thing as a single argument to the <command moreinfo=\"none\">svn</command> program."
msgstr ""

#: ./build/en/book.xml:1507(title) 
msgid "Working Copies"
msgstr ""

#: ./build/en/book.xml:1509(para) 
msgid "You've already read about working copies; now we'll demonstrate how the Subversion client creates and uses them."
msgstr ""

#: ./build/en/book.xml:1513(para) 
msgid "A Subversion working copy is an ordinary directory tree on your local system, containing a collection of files. You can edit these files however you wish, and if they're source code files, you can compile your program from them in the usual way. Your working copy is your own private work area: Subversion will never incorporate other people's changes, nor make your own changes available to others, until you explicitly tell it to do so. You can even have multiple working copies of the same project."
msgstr ""

#: ./build/en/book.xml:1523(para) 
msgid "After you've made some changes to the files in your working copy and verified that they work properly, Subversion provides you with commands to <quote>publish</quote> your changes to the other people working with you on your project (by writing to the repository). If other people publish their own changes, Subversion provides you with commands to merge those changes into your working directory (by reading from the repository)."
msgstr ""

#: ./build/en/book.xml:1532(para) 
msgid "A working copy also contains some extra files, created and maintained by Subversion, to help it carry out these commands. In particular, each directory in your working copy contains a subdirectory named <filename moreinfo=\"none\">.svn</filename>, also known as the working copy <firstterm>administrative directory</firstterm>. The files in each administrative directory help Subversion recognize which files contain unpublished changes, and which files are out-of-date with respect to others' work."
msgstr ""

#: ./build/en/book.xml:1542(para) 
msgid "A typical Subversion repository often holds the files (or source code) for several projects; usually, each project is a subdirectory in the repository's filesystem tree. In this arrangement, a user's working copy will usually correspond to a particular subtree of the repository."
msgstr ""

#: ./build/en/book.xml:1548(para) 
msgid "For example, suppose you have a repository that contains two software projects, <literal moreinfo=\"none\">paint</literal> and <literal moreinfo=\"none\">calc</literal>. Each project lives in its own top-level subdirectory, as shown in <xref linkend=\"svn.basic.in-action.wc.dia-1\"/>."
msgstr ""

#: ./build/en/book.xml:1554(title) 
msgid "The repository's filesystem"
msgstr ""

#: ./build/en/book.xml:1558(para) 
msgid "To get a working copy, you must <firstterm>check out</firstterm> some subtree of the repository. (The term <quote>check out</quote> may sound like it has something to do with locking or reserving resources, but it doesn't; it simply creates a private copy of the project for you.) For example, if you check out <filename moreinfo=\"none\">/calc</filename>, you will get a working copy like this:"
msgstr ""

#: ./build/en/book.xml:1566(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/repos/calc\nA    calc/Makefile\nA    calc/integer.c\nA    calc/button.c\nChecked out revision 56.\n\n$ ls -A calc\nMakefile  integer.c  button.c  .svn/\n"
msgstr ""

#: ./build/en/book.xml:1577(para) 
msgid "The list of letter A's indicates that Subversion is adding a number of items to your working copy. You now have a personal copy of the repository's <filename moreinfo=\"none\">/calc</filename> directory, with one additional entry—<filename moreinfo=\"none\">.svn</filename>—which holds the extra information needed by Subversion, as mentioned earlier."
msgstr ""

#: ./build/en/book.xml:1586(title) 
msgid "Repository URLs"
msgstr ""

#: ./build/en/book.xml:1588(para) 
msgid "Subversion repositories can be accessed through many different methods—on local disk, or through various network protocols, depending on how your administrator has set things up for you. A repository location, however, is always a URL. <xref linkend=\"svn.basic.in-action.wc.tbl-1\"/> describes how different URL schemas map to the available access methods."
msgstr ""

#: ./build/en/book.xml:1598(title) 
msgid "Repository Access URLs"
msgstr ""

#: ./build/en/book.xml:1602(entry) 
msgid "Schema"
msgstr ""

#: ./build/en/book.xml:1603(entry) 
msgid "Access Method"
msgstr ""

#: ./build/en/book.xml:1608(literal) 
msgid "file:///"
msgstr ""

#: ./build/en/book.xml:1609(entry) 
msgid "direct repository access (on local disk)"
msgstr ""

#: ./build/en/book.xml:1612(literal) ./build/en/book.xml:1618(literal) 
msgid "http://"
msgstr ""

#: ./build/en/book.xml:1613(entry) 
msgid "access via WebDAV protocol to Subversion-aware Apache server"
msgstr ""

#: ./build/en/book.xml:1617(literal) 
msgid "https://"
msgstr ""

#: ./build/en/book.xml:1618(entry) 
msgid "same as <placeholder-1/>, but with SSL encryption."
msgstr ""

#: ./build/en/book.xml:1622(literal) ./build/en/book.xml:1628(literal) 
msgid "svn://"
msgstr ""

#: ./build/en/book.xml:1623(entry) 
msgid "access via custom protocol to an <placeholder-1/> server"
msgstr ""

#: ./build/en/book.xml:1627(literal) 
msgid "svn+ssh://"
msgstr ""

#: ./build/en/book.xml:1628(entry) 
msgid "same as <placeholder-1/>, but through an SSH tunnel."
msgstr ""

#: ./build/en/book.xml:1635(para) 
msgid "For more information on how Subversion parses URLs, see <xref linkend=\"svn.advanced.reposurls\"/>. For more information on the different types of network servers available for Subversion, see <xref linkend=\"svn.serverconfig\"/>."
msgstr ""

#: ./build/en/book.xml:1643(para) 
msgid "Suppose you make changes to <filename moreinfo=\"none\">button.c</filename>. Since the <filename moreinfo=\"none\">.svn</filename> directory remembers the file's modification date and original contents, Subversion can tell that you've changed the file. However, Subversion does not make your changes public until you explicitly tell it to. The act of publishing your changes is more commonly known as <firstterm>committing</firstterm> (or <firstterm>checking in</firstterm>) changes to the repository."
msgstr ""

#: ./build/en/book.xml:1652(para) 
msgid "To publish your changes to others, you can use Subversion's <command moreinfo=\"none\">commit</command> command."
msgstr ""

#: ./build/en/book.xml:1655(screen) 
#, no-wrap
msgid "\n$ svn commit button.c -m \"Fixed a typo in button.c.\"\nSending        button.c\nTransmitting file data .\nCommitted revision 57.\n"
msgstr ""

#: ./build/en/book.xml:1662(para) 
msgid "Now your changes to <filename moreinfo=\"none\">button.c</filename> have been committed to the repository, with a note describing your change (namely, that you fixed a typo). If another user checks out a working copy of <filename moreinfo=\"none\">/calc</filename>, they will see your changes in the latest version of the file."
msgstr ""

#: ./build/en/book.xml:1669(para) 
msgid "Suppose you have a collaborator, Sally, who checked out a working copy of <filename moreinfo=\"none\">/calc</filename> at the same time you did. When you commit your change to <filename moreinfo=\"none\">button.c</filename>, Sally's working copy is left unchanged; Subversion only modifies working copies at the user's request."
msgstr ""

#: ./build/en/book.xml:1676(para) 
msgid "To bring her project up to date, Sally can ask Subversion to <firstterm>update</firstterm> her working copy, by using the Subversion <command moreinfo=\"none\">update</command> command. This will incorporate your changes into her working copy, as well as any others that have been committed since she checked it out."
msgstr ""

#: ./build/en/book.xml:1683(screen) 
#, no-wrap
msgid "\n$ pwd\n/home/sally/calc\n\n$ ls -A \n.svn/ Makefile integer.c button.c\n\n$ svn update\nU    button.c\nUpdated to revision 57.\n"
msgstr ""

#: ./build/en/book.xml:1695(para) 
msgid "The output from the <command moreinfo=\"none\">svn update</command> command indicates that Subversion updated the contents of <filename moreinfo=\"none\">button.c</filename>. Note that Sally didn't need to specify which files to update; Subversion uses the information in the <filename moreinfo=\"none\">.svn</filename> directory, and further information in the repository, to decide which files need to be brought up to date."
msgstr ""

#: ./build/en/book.xml:1708(title) 
msgid "Revisions"
msgstr ""

#: ./build/en/book.xml:1710(para) 
msgid "An <command moreinfo=\"none\">svn commit</command> operation publishes changes to any number of files and directories as a single atomic transaction. In your working copy, you can change files' contents, create, delete, rename and copy files and directories, and then commit a complete set of changes as an atomic transaction."
msgstr ""

#: ./build/en/book.xml:1717(para) 
msgid "By <quote>atomic transaction</quote>, we mean simply this: either all of the changes happen in the repository, or none of them happen. Subversion tries to retain this atomicity in the face of program crashes, system crashes, network problems, and other users' actions."
msgstr ""

#: ./build/en/book.xml:1723(para) 
msgid "Each time the repository accepts a commit, this creates a new state of the filesystem tree, called a <firstterm>revision</firstterm>. Each revision is assigned a unique natural number, one greater than the number of the previous revision. The initial revision of a freshly created repository is numbered zero, and consists of nothing but an empty root directory."
msgstr ""

#: ./build/en/book.xml:1731(para) 
msgid "<xref linkend=\"svn.basic.in-action.revs.dia-1\"/> illustrates a nice way to visualize the repository. Imagine an array of revision numbers, starting at 0, stretching from left to right. Each revision number has a filesystem tree hanging below it, and each tree is a <quote>snapshot</quote> of the way the repository looked after a commit."
msgstr ""

#: ./build/en/book.xml:1739(title) 
msgid "The repository"
msgstr ""

#: ./build/en/book.xml:1744(title) 
msgid "Global Revision Numbers"
msgstr ""

#: ./build/en/book.xml:1746(para) 
msgid "Unlike most version control systems, Subversion's revision numbers apply to <emphasis>entire trees</emphasis>, not individual files. Each revision number selects an entire tree, a particular state of the repository after some committed change. Another way to think about it is that revision N represents the state of the repository filesystem after the Nth commit. When Subversion users talk about <quote>revision 5 of <filename moreinfo=\"none\">foo.c</filename></quote>, they really mean <quote><filename moreinfo=\"none\">foo.c</filename> as it appears in revision 5.</quote> Notice that in general, revisions N and M of a file do <emphasis>not</emphasis> necessarily differ! Many other version control systems use per-file revision numbers, so this concept may seem unusual at first. (Former CVS users might want to see <xref linkend=\"svn.forcvs\"/> for more details.)"
msgstr ""

#: ./build/en/book.xml:1764(para) 
msgid "It's important to note that working copies do not always correspond to any single revision in the repository; they may contain files from several different revisions. For example, suppose you check out a working copy from a repository whose most recent revision is 4:"
msgstr ""

#: ./build/en/book.xml:1770(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:4\n"
msgstr ""

#: ./build/en/book.xml:1776(para) 
msgid "At the moment, this working directory corresponds exactly to revision 4 in the repository. However, suppose you make a change to <filename moreinfo=\"none\">button.c</filename>, and commit that change. Assuming no other commits have taken place, your commit will create revision 5 of the repository, and your working copy will now look like this:"
msgstr ""

#: ./build/en/book.xml:1783(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:5\n"
msgstr ""

#: ./build/en/book.xml:1789(para) 
msgid "Suppose that, at this point, Sally commits a change to <filename moreinfo=\"none\">integer.c</filename>, creating revision 6. If you use <command moreinfo=\"none\">svn update</command> to bring your working copy up to date, then it will look like this:"
msgstr ""

#: ./build/en/book.xml:1794(screen) 
#, no-wrap
msgid "\ncalc/Makefile:6\n     integer.c:6\n     button.c:6\n"
msgstr ""

#: ./build/en/book.xml:1800(para) 
msgid "Sally's change to <filename moreinfo=\"none\">integer.c</filename> will appear in your working copy, and your change will still be present in <filename moreinfo=\"none\">button.c</filename>. In this example, the text of <filename moreinfo=\"none\">Makefile</filename> is identical in revisions 4, 5, and 6, but Subversion will mark your working copy of <filename moreinfo=\"none\">Makefile</filename> with revision 6 to indicate that it is still current. So, after you do a clean update at the top of your working copy, it will generally correspond to exactly one revision in the repository."
msgstr ""

#: ./build/en/book.xml:1815(title) 
msgid "How Working Copies Track the Repository"
msgstr ""

#: ./build/en/book.xml:1817(para) 
msgid "For each file in a working directory, Subversion records two essential pieces of information in the <filename moreinfo=\"none\">.svn/</filename> administrative area:"
msgstr ""

#: ./build/en/book.xml:1824(para) 
msgid "what revision your working file is based on (this is called the file's <firstterm>working revision</firstterm>), and"
msgstr ""

#: ./build/en/book.xml:1830(para) 
msgid "a timestamp recording when the local copy was last updated by the repository."
msgstr ""

#: ./build/en/book.xml:1835(para) 
msgid "Given this information, by talking to the repository, Subversion can tell which of the following four states a working file is in:"
msgstr ""

#: ./build/en/book.xml:1841(term) 
msgid "Unchanged, and current"
msgstr ""

#: ./build/en/book.xml:1844(para) 
msgid "The file is unchanged in the working directory, and no changes to that file have been committed to the repository since its working revision. An <command moreinfo=\"none\">svn commit</command> of the file will do nothing, and an <command moreinfo=\"none\">svn update</command> of the file will do nothing."
msgstr ""

#: ./build/en/book.xml:1854(term) 
msgid "Locally changed, and current"
msgstr ""

#: ./build/en/book.xml:1857(para) 
msgid "The file has been changed in the working directory, and no changes to that file have been committed to the repository since you last updated. There are local changes that have not been committed to the repository, thus an <command moreinfo=\"none\">svn commit</command> of the file will succeed in publishing your changes, and an <command moreinfo=\"none\">svn update</command> of the file will do nothing."
msgstr ""

#: ./build/en/book.xml:1868(term) 
msgid "Unchanged, and out-of-date"
msgstr ""

#: ./build/en/book.xml:1871(para) 
msgid "The file has not been changed in the working directory, but it has been changed in the repository. The file should eventually be updated, to make it current with the latest public revision. An <command moreinfo=\"none\">svn commit</command> of the file will do nothing, and an <command moreinfo=\"none\">svn update</command> of the file will fold the latest changes into your working copy."
msgstr ""

#: ./build/en/book.xml:1882(term) 
msgid "Locally changed, and out-of-date"
msgstr ""

#: ./build/en/book.xml:1885(para) 
msgid "The file has been changed both in the working directory, and in the repository. An <command moreinfo=\"none\">svn commit</command> of the file will fail with an <quote>out-of-date</quote> error. The file should be updated first; an <command moreinfo=\"none\">svn update</command> command will attempt to merge the public changes with the local changes. If Subversion can't complete the merge in a plausible way automatically, it leaves it to the user to resolve the conflict."
msgstr ""

#: ./build/en/book.xml:1899(para) 
msgid "This may sound like a lot to keep track of, but the <command moreinfo=\"none\">svn status</command> command will show you the state of any item in your working copy. For more information on that command, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr ""

#: ./build/en/book.xml:1909(title) 
msgid "Mixed Revision Working Copies"
msgstr ""

#: ./build/en/book.xml:1911(para) 
msgid "As a general principle, Subversion tries to be as flexible as possible. One special kind of flexibility is the ability to have a working copy containing files and directories with a mix of different working revision numbers. Unfortunately, this flexibility tends to confuse a number of new users. If the earlier example showing mixed revisions perplexed you, here's a primer on both why the feature exists and how to make use of it."
msgstr ""

#: ./build/en/book.xml:1922(title) 
msgid "Updates and Commits are Separate"
msgstr ""

#: ./build/en/book.xml:1924(para) 
msgid "One of the fundamental rules of Subversion is that a <quote>push</quote> action does not cause a <quote>pull</quote>, nor the other way around. Just because you're ready to submit new changes to the repository doesn't mean you're ready to receive changes from other people. And if you have new changes still in progress, then <command moreinfo=\"none\">svn update</command> should gracefully merge repository changes into your own, rather than forcing you to publish them."
msgstr ""

#: ./build/en/book.xml:1934(para) 
msgid "The main side-effect of this rule is that it means a working copy has to do extra bookkeeping to track mixed revisions, and be tolerant of the mixture as well. It's made more complicated by the fact that directories themselves are versioned."
msgstr ""

#: ./build/en/book.xml:1940(para) 
msgid "For example, suppose you have a working copy entirely at revision 10. You edit the file <filename moreinfo=\"none\">foo.html</filename> and then perform an <command moreinfo=\"none\">svn commit</command>, which creates revision 15 in the repository. After the commit succeeds, many new users would expect the working copy to be entirely at revision 15, but that's not the case! Any number of changes might have happened in the repository between revisions 10 and 15. The client knows nothing of those changes in the repository, since you haven't yet run <command moreinfo=\"none\">svn update</command>, and <command moreinfo=\"none\">svn commit</command> doesn't pull down new changes. If, on the other hand, <command moreinfo=\"none\">svn commit</command><emphasis>were</emphasis> to automatically download the newest changes, then it would be possible to set the entire working copy to revision 15—but then we'd be breaking the fundamental rule of <quote>push</quote> and <quote>pull</quote> remaining separate actions. Therefore the only safe thing the Subversion client can do is mark the one file—<filename moreinfo=\"none\">foo.html</filename>—as being at revision 15. The rest of the working copy remains at revision 10. Only by running <command moreinfo=\"none\">svn update</command> can the latest changes be downloaded, and the whole working copy be marked as revision 15."
msgstr ""

#: ./build/en/book.xml:1969(title) 
msgid "Mixed revisions are normal"
msgstr ""

#: ./build/en/book.xml:1971(para) 
msgid "The fact is, <emphasis>every time</emphasis> you run <command moreinfo=\"none\">svn commit</command>, your working copy ends up with some mixture of revisions. The things you just committed are marked as having larger working revisions than everything else. After several commits (with no updates in-between) your working copy will contain a whole mixture of revisions. Even if you're the only person using the repository, you will still see this phenomenon. To examine your mixture of working revisions, use the <command moreinfo=\"none\">svn status --verbose</command> command (see <xref linkend=\"svn.tour.cycle.examine.status\"/> for more information.)"
msgstr ""

#: ./build/en/book.xml:1983(para) 
msgid "Often, new users are completely unaware that their working copy contains mixed revisions. This can be confusing, because many client commands are sensitive to the working revision of the item they're examining. For example, the <command moreinfo=\"none\">svn log</command> command is used to display the history of changes to a file or directory (see <xref linkend=\"svn.tour.history.log\"/>). When the user invokes this command on a working copy object, they expect to see the entire history of the object. But if the object's working revision is quite old (often because <command moreinfo=\"none\">svn update</command> hasn't been run in a long time), then the history of the <emphasis>older</emphasis> version of the object is shown."
msgstr ""

#: ./build/en/book.xml:2001(title) 
msgid "Mixed revisions are useful"
msgstr ""

#: ./build/en/book.xml:2003(para) 
msgid "If your project is sufficiently complex, you'll discover that it's sometimes nice to forcibly <quote>backdate</quote> portions of your working copy to an earlier revision; you'll learn how to do that in <xref linkend=\"svn.tour\"/>. Perhaps you'd like to test an earlier version of a sub-module contained in a subdirectory, or perhaps you'd like to figure out when a bug first came into existence in a specific file. This is the <quote>time machine</quote> aspect of a version control system — the feature which allows you to move any portion of your working copy forward and backward in history."
msgstr ""

#: ./build/en/book.xml:2019(title) 
msgid "Mixed revisions have limitations"
msgstr ""

#: ./build/en/book.xml:2021(para) 
msgid "However you make use of mixed revisions in your working copy, there are limitations to this flexibility."
msgstr ""

#: ./build/en/book.xml:2024(para) 
msgid "First, you cannot commit the deletion of a file or directory which isn't fully up-to-date. If a newer version of the item exists in the repository, your attempt to delete will be rejected, to prevent you from accidentally destroying changes you've not yet seen."
msgstr ""

#: ./build/en/book.xml:2030(para) 
msgid "Second, you cannot commit a metadata change to a directory unless it's fully up-to-date. You'll learn about attaching <quote>properties</quote> to items in <xref linkend=\"svn.advanced\"/>. A directory's working revision defines a specific set of entries and properties, and thus committing a property change to an out-of-date directory may destroy properties you've not yet seen."
msgstr ""

#: ./build/en/book.xml:2047(title) ./build/en/book.xml:3978(title) ./build/en/book.xml:9639(title) ./build/en/book.xml:12569(title) 
msgid "Summary"
msgstr ""

#: ./build/en/book.xml:2049(para) 
msgid "We've covered a number of fundamental Subversion concepts in this chapter:"
msgstr ""

#: ./build/en/book.xml:2054(para) 
msgid "We've introduced the notions of the central repository, the client working copy, and the array of repository revision trees."
msgstr ""

#: ./build/en/book.xml:2060(para) 
msgid "We've seen some simple examples of how two collaborators can use Subversion to publish and receive changes from one another, using the <quote>copy-modify-merge</quote> model."
msgstr ""

#: ./build/en/book.xml:2067(para) 
msgid "We've talked a bit about the way Subversion tracks and manages information in a working copy."
msgstr ""

#: ./build/en/book.xml:2073(para) 
msgid "At this point, you should have a good idea of how Subversion works in the most general sense. Armed with this knowledge, you should now be ready to move into the next chapter, which is a detailed tour of Subversion's commands and features."
msgstr ""

#: ./build/en/book.xml:2089(title) 
msgid "Basic Usage"
msgstr ""

#: ./build/en/book.xml:2091(para) 
msgid "Now we will go into the details of using Subversion. By the time you reach the end of this chapter, you will be able to perform all the tasks you need to use Subversion in a normal day's work. You'll start with getting your files into Subversion, followed by an initial checkout of your code. We'll then walk you through making changes and examining those changes. You'll also see how to bring changes made by others into your working copy, examine them, and work through any conflicts that might arise."
msgstr ""

#: ./build/en/book.xml:2101(para) 
msgid "Note that this chapter is not meant to be an exhaustive list of all Subversion's commands—rather, it's a conversational introduction to the most common Subversion tasks you'll encounter. This chapter assumes that you've read and understood <xref linkend=\"svn.basic\"/> and are familiar with the general model of Subversion. For a complete reference of all commands, see <xref linkend=\"svn.ref\"/>."
msgstr ""

#: ./build/en/book.xml:2114(title) ./build/en/book.xml:19422(refpurpose) ./build/en/book.xml:22321(refpurpose) ./build/en/book.xml:23371(refpurpose) 
msgid "Help!"
msgstr ""

#: ./build/en/book.xml:2116(para) 
msgid "Before reading on, here is the most important command you'll ever need when using Subversion: <command moreinfo=\"none\">svn help</command>. The Subversion command-line client is self-documenting—at any time, a quick <command moreinfo=\"none\">svn help <replaceable>SUBCOMMAND</replaceable></command> will describe the syntax, switches, and behavior of the subcommand."
msgstr ""

#: ./build/en/book.xml:2123(screen) 
#, no-wrap
msgid "\n$ svn help import\nimport: Commit an unversioned file or tree into the repository.\nusage: import [PATH] URL\n\n  Recursively commit a copy of PATH to URL.\n  If PATH is omitted '.' is assumed.\n  Parent directories are created as necessary in the repository.\n  If PATH is a directory, the contents of the directory are added\n  directly under URL.\n\nValid options:\n  -q [--quiet]             : print as little as possible\n  -N [--non-recursive]     : operate on single directory only\n…\n"
msgstr ""

#: ./build/en/book.xml:2145(title) 
msgid "Getting Data into your Repository"
msgstr ""

#: ./build/en/book.xml:2147(para) 
msgid "There are two ways to get new files into your Subversion repository: <command moreinfo=\"none\">svn import</command> and <command moreinfo=\"none\">svn add</command>. We'll discuss <command moreinfo=\"none\">svn import</command> here and <command moreinfo=\"none\">svn add</command> later in this chapter when we review a typical day with Subversion."
msgstr ""

#: ./build/en/book.xml:2155(title) ./build/en/book.xml:19473(refname) 
msgid "svn import"
msgstr ""

#: ./build/en/book.xml:2157(para) 
msgid "The <command moreinfo=\"none\">svn import</command> command is a quick way to copy an unversioned tree of files into a repository, creating intermediate directories as necessary. <command moreinfo=\"none\">svn import</command> doesn't require a working copy, and your files are immediately committed to the repository. This is typically used when you have an existing tree of files that you want to begin tracking in your Subversion repository. For example:"
msgstr ""

#: ./build/en/book.xml:2165(screen) 
#, no-wrap
msgid "\n$ svnadmin create /usr/local/svn/newrepos\n$ svn import mytree file:///usr/local/svn/newrepos/some/project \\\n             -m \"Initial import\"\nAdding         mytree/foo.c\nAdding         mytree/bar.c\nAdding         mytree/subdir\nAdding         mytree/subdir/quux.h\n\nCommitted revision 1.\n"
msgstr ""

#: ./build/en/book.xml:2177(para) 
msgid "The previous example copied the contents of directory <filename moreinfo=\"none\">mytree</filename> under the directory <filename moreinfo=\"none\">some/project</filename> in the repository:"
msgstr ""

#: ./build/en/book.xml:2181(screen) 
#, no-wrap
msgid "\n$ svn list file:///usr/local/svn/newrepos/some/project\nbar.c\nfoo.c\nsubdir/\n"
msgstr ""

#: ./build/en/book.xml:2188(para) 
msgid "Note that after the import is finished, the original tree is <emphasis>not</emphasis> converted into a working copy. To start working, you still need to <command moreinfo=\"none\">svn checkout</command> a fresh working copy of the tree."
msgstr ""

#: ./build/en/book.xml:2197(title) 
msgid "Recommended repository layout"
msgstr ""

#: ./build/en/book.xml:2199(para) 
msgid "While Subversion's flexibility allows you to layout your repository in any way that you choose, we recommend that you create a <filename moreinfo=\"none\">trunk</filename> directory to hold the <quote>main line</quote> of development, a <filename moreinfo=\"none\">branches</filename> directory to contain branch copies, and a <filename moreinfo=\"none\">tags</filename> directory to contain tag copies, for example:"
msgstr ""

#: ./build/en/book.xml:2207(screen) 
#, no-wrap
msgid "\n$ svn list file:///usr/local/svn/repos\n/trunk\n/branches\n/tags\n"
msgstr ""

#: ./build/en/book.xml:2214(para) 
msgid "You'll learn more about tags and branches in <xref linkend=\"svn.branchmerge\"/>. For details and how to setup multiple projects, see <xref linkend=\"svn.branchmerge.maint.layout\"/> and <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> to read more about <quote>project roots</quote>."
msgstr ""

#: ./build/en/book.xml:2226(title) 
msgid "Initial Checkout"
msgstr ""

#: ./build/en/book.xml:2228(para) 
msgid "Most of the time, you will start using a Subversion repository by doing a <firstterm>checkout</firstterm> of your project. Checking out a repository creates a <quote>working copy</quote> of it on your local machine. This copy contains the <literal moreinfo=\"none\">HEAD</literal> (latest revision) of the Subversion repository that you specify on the command line:"
msgstr ""

#: ./build/en/book.xml:2236(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.collab.net/repos/svn/trunk\nA    trunk/Makefile.in\nA    trunk/ac-helpers\nA    trunk/ac-helpers/install.sh\nA    trunk/ac-helpers/install-sh\nA    trunk/build.conf\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2248(title) 
msgid "What's in a Name?"
msgstr ""

#: ./build/en/book.xml:2250(para) 
msgid "Subversion tries hard not to limit the type of data you can place under version control. The contents of files and property values are stored and transmitted as binary data, and <xref linkend=\"svn.advanced.props.special.mime-type\"/> tells you how to give Subversion a hint that <quote>textual</quote> operations don't make sense for a particular file. There are a few places, however, where Subversion places restrictions on information it stores."
msgstr ""

#: ./build/en/book.xml:2260(para) 
msgid "Subversion internally handles certain bits of data—for example, property names, path names, and log messages—as UTF-8 encoded Unicode. This is not to say that all your interactions with Subversion must involve UTF-8, though. As a general rule, Subversion clients will gracefully and transparently handle conversions between UTF-8 and the encoding system in use on your computer, if such a conversion can meaningfully be done (which is the case for most common encodings in use today)."
msgstr ""

#: ./build/en/book.xml:2270(para) 
msgid "In addition, path names are used as XML attribute values in WebDAV exchanges, as well in as some of Subversion's housekeeping files. This means that path names can only contain legal XML (1.0) characters. Subversion also prohibits TAB, CR, and LF characters in path names to prevent paths from being broken up in diffs, or in the output of commands like <xref linkend=\"svn.ref.svn.c.log\"/> or <xref linkend=\"svn.ref.svn.c.status\"/>."
msgstr ""

#: ./build/en/book.xml:2278(para) 
msgid "While it may seem like a lot to remember, in practice these limitations are rarely a problem. As long as your locale settings are compatible with UTF-8, and you don't use control characters in path names, you should have no trouble communicating with Subversion. The command-line client adds an extra bit of help—it will automatically escape illegal path characters as needed in URLs you type to create <quote>legally correct</quote> versions for internal use."
msgstr ""

#: ./build/en/book.xml:2290(para) 
msgid "Although the above example checks out the trunk directory, you can just as easily check out any deep subdirectory of a repository by specifying the subdirectory in the checkout URL:"
msgstr ""

#: ./build/en/book.xml:2295(screen) 
#, no-wrap
msgid "\n$ svn checkout -r 8810 \\\n      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/\nA    cmdline/revert_tests.py\nA    cmdline/diff_tests.py\nA    cmdline/autoprop_tests.py\nA    cmdline/xmltests\nA    cmdline/xmltests/svn-test.sh\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2307(para) 
msgid "Since Subversion uses a <quote>copy-modify-merge</quote> model instead of <quote>lock-modify-unlock</quote> (see <xref linkend=\"svn.basic.vsn-models\"/>), you're already able to start making changes to the files and directories in your working copy. Your working copy is just like any other collection of files and directories on your system. You can edit and change them, move them around, you can even delete the entire working copy and forget about it."
msgstr ""

#: ./build/en/book.xml:2317(para) 
msgid "While your working copy is <quote>just like any other collection of files and directories on your system</quote>, you can edit files at will, but you must tell Subversion about <emphasis>everything else</emphasis> that you do. For example, if you want to copy or move an item in a working copy, you should use <command moreinfo=\"none\">svn copy</command> or <command moreinfo=\"none\">svn move</command> instead of the copy and move commands provided by your operating system. We'll talk more about them later in this chapter."
msgstr ""

#: ./build/en/book.xml:2328(para) 
msgid "Unless you're ready to commit a new file or directory, or changes to existing ones, there's no need to further notify the Subversion server that you've done anything."
msgstr ""

#: ./build/en/book.xml:2333(title) 
msgid "What's with the <filename moreinfo=\"none\">.svn</filename> directory?"
msgstr ""

#: ./build/en/book.xml:2335(para) 
msgid "Every directory in a working copy contains an administrative area, a subdirectory named <filename moreinfo=\"none\">.svn</filename>. Usually, directory listing commands won't show this subdirectory, but it is nevertheless an important directory. Whatever you do, don't delete or change anything in the administrative area! Subversion depends on it to manage your working copy."
msgstr ""

#: ./build/en/book.xml:2345(para) 
msgid "While you can certainly check out a working copy with the URL of the repository as the only argument, you can also specify a directory after your repository URL. This places your working copy in the new directory that you name. For example:"
msgstr ""

#: ./build/en/book.xml:2350(screen) 
#, no-wrap
msgid "\n$  svn -r 8810  checkout http://svn.collab.net/repos/svn/trunk subv\nA    subv/Makefile.in\nA    subv/ac-helpers\nA    subv/ac-helpers/install.sh\nA    subv/ac-helpers/install-sh\nA    subv/build.conf\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2361(para) 
msgid "That will place your working copy in a directory named <literal moreinfo=\"none\">subv</literal> instead of a directory named <literal moreinfo=\"none\">trunk</literal> as we did previously. The directory <literal moreinfo=\"none\">subv</literal> will be created if it doesn't already exist."
msgstr ""

#: ./build/en/book.xml:2369(title) 
msgid "Disabling Password Caching"
msgstr ""

#: ./build/en/book.xml:2374(para) 
msgid "Of course, you're not terribly worried—first because you know that you can't <emphasis>really</emphasis> delete anything from Subversion and, secondly, because your Subversion password isn't the same as any of the other three million passwords you have, right? Right?"
msgstr ""

#: ./build/en/book.xml:2371(para) 
msgid "When you perform a Subversion operation that requires you to authenticate, by default Subversion caches your authentication credentials on disk. If you're concerned about caching your Subversion passwords,<placeholder-1/> you can disable caching either permanently or on a case-by-case basis."
msgstr ""

#: ./build/en/book.xml:2382(para) 
msgid "To disable password caching for a particular one-time command, pass the <option>--no-auth-cache</option> switch on the commandline. To permanently disable caching, you can add the line <literal moreinfo=\"none\">store-passwords = no</literal> to your local machine's Subversion configuration file. See <xref linkend=\"svn.serverconfig.netmodel.credcache\"/> for details."
msgstr ""

#: ./build/en/book.xml:2392(title) 
msgid "Authenticating as a Different User"
msgstr ""

#: ./build/en/book.xml:2394(para) 
msgid "Since Subversion caches auth credentials by default (both username and password), it conveniently remembers who you were acting as the last time you modified you working copy. But sometimes that's not helpful—particularly if you're working in a shared working copy, like a system configuration directory or a webserver document root. In this case, just pass the <option>--username</option> option on the commandline and Subversion will attempt to authenticate as that user, prompting you for a password if necessary."
msgstr ""

#: ./build/en/book.xml:2412(title) 
msgid "Basic Work Cycle"
msgstr ""

#: ./build/en/book.xml:2414(para) 
msgid "Subversion has numerous features, switches, bells and whistles, but on a day-to-day basis, odds are that you will only use a few of them. In this section we'll run through the most common things that you might find yourself doing with Subversion in the course of a day's work."
msgstr ""

#: ./build/en/book.xml:2420(para) 
msgid "The typical work cycle looks like this:"
msgstr ""

#: ./build/en/book.xml:2424(para) 
msgid "Update your working copy"
msgstr ""

#: ./build/en/book.xml:2427(command) ./build/en/book.xml:2477(command) ./build/en/book.xml:21822(refname) 
msgid "svn update"
msgstr ""

#: ./build/en/book.xml:2434(para) 
msgid "Make changes"
msgstr ""

#: ./build/en/book.xml:2437(command) ./build/en/book.xml:18153(refname) 
msgid "svn add"
msgstr ""

#: ./build/en/book.xml:2440(command) ./build/en/book.xml:18942(refname) 
msgid "svn delete"
msgstr ""

#: ./build/en/book.xml:2443(command) ./build/en/book.xml:18767(refname) 
msgid "svn copy"
msgstr ""

#: ./build/en/book.xml:2446(command) ./build/en/book.xml:20399(refname) 
msgid "svn move"
msgstr ""

#: ./build/en/book.xml:2452(para) 
msgid "Examine your changes"
msgstr ""

#: ./build/en/book.xml:2455(command) ./build/en/book.xml:21164(refname) ./build/en/book.xml:25449(command) 
msgid "svn status"
msgstr ""

#: ./build/en/book.xml:2458(command) ./build/en/book.xml:3515(command) ./build/en/book.xml:19055(refname) ./build/en/book.xml:25456(command) 
msgid "svn diff"
msgstr ""

#: ./build/en/book.xml:2464(para) 
msgid "Possibly undo some changes"
msgstr ""

#: ./build/en/book.xml:2467(command) ./build/en/book.xml:21060(refname) ./build/en/book.xml:25463(command) 
msgid "svn revert"
msgstr ""

#: ./build/en/book.xml:2474(para) 
msgid "Resolve Conflicts (Merge Others' Changes)"
msgstr ""

#: ./build/en/book.xml:2480(command) ./build/en/book.xml:20971(refname) 
msgid "svn resolved"
msgstr ""

#: ./build/en/book.xml:2486(para) 
msgid "Commit your changes"
msgstr ""

#: ./build/en/book.xml:2489(command) ./build/en/book.xml:18629(refname) 
msgid "svn commit"
msgstr ""

#: ./build/en/book.xml:2497(title) 
msgid "Update Your Working Copy"
msgstr ""

#: ./build/en/book.xml:2499(para) 
msgid "When working on a project with a team, you'll want to update your working copy to receive any changes made since your last update by other developers on the project. Use <command moreinfo=\"none\">svn update</command> to bring your working copy into sync with the latest revision in the repository."
msgstr ""

#: ./build/en/book.xml:2505(screen) 
#, no-wrap
msgid "\n$ svn update\nU  foo.c\nU  bar.c\nUpdated to revision 2.\n"
msgstr ""

#: ./build/en/book.xml:2512(para) 
msgid "In this case, someone else checked in modifications to both <filename moreinfo=\"none\">foo.c</filename> and <filename moreinfo=\"none\">bar.c</filename> since the last time you updated, and Subversion has updated your working copy to include those changes."
msgstr ""

#: ./build/en/book.xml:2517(para) 
msgid "When the server sends changes to your working copy via <command moreinfo=\"none\">svn update</command>, a letter code is displayed next to each item to let you know what actions Subversion performed to bring your working copy up-to-date. To find out what these letters mean, see <xref linkend=\"svn.ref.svn.c.update\"/>"
msgstr ""

#: ./build/en/book.xml:2527(title) 
msgid "Make Changes to Your Working Copy"
msgstr ""

#: ./build/en/book.xml:2529(para) 
msgid "Now you can get to work and make changes in your working copy. It's usually most convenient to decide on a discrete change (or set of changes) to make, such as writing a new feature, fixing a bug, etc. The Subversion commands that you will use here are <command moreinfo=\"none\">svn add</command>, <command moreinfo=\"none\">svn delete</command>, <command moreinfo=\"none\">svn copy</command>, <command moreinfo=\"none\">svn move</command>, and <command moreinfo=\"none\">svn mkdir</command>. However, if you are merely editing files that are already in Subversion, you may not need to use any of these commands until you commit."
msgstr ""

#: ./build/en/book.xml:2540(para) 
msgid "There are two kinds of changes you can make to your working copy: file changes and tree changes. You don't need to tell Subversion that you intend to change a file; just make your changes using your text editor, word processor, graphics program, or whatever tool you would normally use. Subversion automatically detects which files have been changed, and in addition handles binary files just as easily as it handles text files—and just as efficiently too. For tree changes, you can ask Subversion to <quote>mark</quote> files and directories for scheduled removal, addition, copying, or moving. While these changes may take place immediately in your working copy, no additions or removals will happen in the repository until you commit them."
msgstr ""

#: ./build/en/book.xml:2554(para) 
msgid "Here is an overview of the five Subversion subcommands that you'll use most often to make tree changes."
msgstr ""

#: ./build/en/book.xml:2558(title) 
msgid "Versioning symbolic links"
msgstr ""

#: ./build/en/book.xml:2560(para) 
msgid "On non-Windows platforms, Subversion is able to version files of the special type <firstterm>symbolic link</firstterm> (or, <quote>symlink</quote>). A symlink is a file which acts as a sort of transparent reference to some other object in the filesystem, allowing programs to read and write to those objects indirectly by way of performing operations on the symlink itself."
msgstr ""

#: ./build/en/book.xml:2568(para) 
msgid "When a symlink is committed into a Subversion repository, Subversion remembers that the file was in fact a symlink, as well as to what object the symlink <quote>points</quote>. When that symlink is checked out to another working copy on a supporting system, Subversion reconstructs a real filesystem-level symbolic link from the versioned symlink. But that doesn't in any way limit the usability of working copies on systems such as Windows which do not support symlinks. On such systems, Subversion simply creates a regular text file whose contents are the path to which to the original symlink pointed. While that file can't be used as a symlink on a Windows system, it also won't prevent Windows users from performing their other Subversion-related activities."
msgstr ""

#: ./build/en/book.xml:2586(command) 
msgid "svn add foo"
msgstr ""

#: ./build/en/book.xml:2588(para) 
msgid "Schedule file, directory, or symbolic link <filename moreinfo=\"none\">foo</filename> to be added to the repository. When you next commit, <filename moreinfo=\"none\">foo</filename> will become a child of its parent directory. Note that if <filename moreinfo=\"none\">foo</filename> is a directory, everything underneath <filename moreinfo=\"none\">foo</filename> will be scheduled for addition. If you only want to add <filename moreinfo=\"none\">foo</filename> itself, pass the <option>--non-recursive (-N)</option> option."
msgstr ""

#: ./build/en/book.xml:2602(command) 
msgid "svn delete foo"
msgstr ""

#: ./build/en/book.xml:2612(para) 
msgid "Of course, nothing is ever totally deleted from the repository—just from the <literal moreinfo=\"none\">HEAD</literal> of the repository. You can get back anything you delete by checking out (or updating your working copy) a revision earlier than the one in which you deleted it. Also see <xref linkend=\"svn.branchmerge.commonuses.resurrect\"/>&gt;"
msgstr ""

#: ./build/en/book.xml:2604(para) 
msgid "Schedule file, directory, or symbolic link <filename moreinfo=\"none\">foo</filename> to be deleted from the repository. If <filename moreinfo=\"none\">foo</filename> is a file or link, it is immediately deleted from your working copy. If <filename moreinfo=\"none\">foo</filename> is a directory, it is not deleted, but Subversion schedules it for deletion. When you commit your changes, <filename moreinfo=\"none\">foo</filename> will be removed from your working copy and the repository. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:2622(command) 
msgid "svn copy foo bar"
msgstr ""

#: ./build/en/book.xml:2624(para) 
msgid "Create a new item <filename moreinfo=\"none\">bar</filename> as a duplicate of <filename moreinfo=\"none\">foo</filename> and automatically schedule <filename moreinfo=\"none\">bar</filename> for addition. When <filename moreinfo=\"none\">bar</filename> is added to the repository on the next commit, its copy history is recorded (as having originally come from <filename moreinfo=\"none\">foo</filename>). <command moreinfo=\"none\">svn copy</command> does not create intermediate directories."
msgstr ""

#: ./build/en/book.xml:2636(command) 
msgid "svn move foo bar"
msgstr ""

#: ./build/en/book.xml:2638(para) 
msgid "This command is exactly the same as running <command moreinfo=\"none\">svn copy foo bar; svn delete foo</command>. That is, <filename moreinfo=\"none\">bar</filename> is scheduled for addition as a copy of <filename moreinfo=\"none\">foo</filename>, and <filename moreinfo=\"none\">foo</filename> is scheduled for removal. <command moreinfo=\"none\">svn move</command> does not create intermediate directories."
msgstr ""

#: ./build/en/book.xml:2649(command) 
msgid "svn mkdir blort"
msgstr ""

#: ./build/en/book.xml:2651(para) 
msgid "This command is exactly the same as running <command moreinfo=\"none\">mkdir blort; svn add blort</command>. That is, a new directory named <filename moreinfo=\"none\">blort</filename> is created and scheduled for addition."
msgstr ""

#: ./build/en/book.xml:2661(title) 
msgid "Changing the Repository Without a Working Copy"
msgstr ""

#: ./build/en/book.xml:2663(para) 
msgid "There <emphasis>are</emphasis> some use cases that immediately commit tree changes to the repository. This only happens when a subcommand is operating directly on a URL, rather than on a working-copy path. In particular, specific uses of <command moreinfo=\"none\">svn mkdir</command>, <command moreinfo=\"none\">svn copy</command>, <command moreinfo=\"none\">svn move</command>, and <command moreinfo=\"none\">svn delete</command> can work with URLs (And don't forget that <command moreinfo=\"none\">svn import</command> always makes changes to a URL)."
msgstr ""

#: ./build/en/book.xml:2673(para) 
msgid "URL operations behave in this manner because commands that operate on a working copy can use the working copy as a sort of <quote>staging area</quote> to set up your changes before committing them to the repository. Commands that operate on URLs don't have this luxury, so when you operate directly on a URL, any of the above actions represent an immediate commit."
msgstr ""

#: ./build/en/book.xml:2687(title) 
msgid "Examine Your Changes"
msgstr ""

#: ./build/en/book.xml:2689(para) 
msgid "Once you've finished making changes, you need to commit them to the repository, but before you do so, it's usually a good idea to take a look at exactly what you've changed. By examining your changes before you commit, you can make a more accurate log message. You may also discover that you've inadvertently changed a file, and this gives you a chance to revert those changes before committing. Additionally, this is a good opportunity to review and scrutinize changes before publishing them. You can see an overview of the changes you've made by using <command moreinfo=\"none\">svn status</command>, and dig into the details of those changes by using <command moreinfo=\"none\">svn diff</command>."
msgstr ""

#: ./build/en/book.xml:2703(title) 
msgid "Look Ma! No Network!"
msgstr ""

#: ./build/en/book.xml:2712(para) 
msgid "And also that you don't have a WAN card. Thought you got us, huh?"
msgstr ""

#: ./build/en/book.xml:2705(para) 
msgid "The commands (<command moreinfo=\"none\">svn status</command>, <command moreinfo=\"none\">svn diff</command>, and <command moreinfo=\"none\">svn revert</command>) can be used without any network access (assuming, of course, that your repository is across the network and not local). This makes it easy to manage your changes-in-progress when you are somewhere without a network connection, such as travelling on an airplane, riding a commuter train or hacking on the beach.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:2716(para) 
msgid "Subversion does this by keeping private caches of pristine versions of each versioned file inside of the <filename moreinfo=\"none\">.svn</filename> administrative areas. This allows Subversion to report—and revert—local modifications to those files <emphasis>without network access</emphasis>. This cache (called the <quote>text-base</quote>) also allows Subversion to send the user's local modifications during a commit to the server as a compressed <firstterm>delta</firstterm> (or <quote>difference</quote>) against the pristine version. Having this cache is a tremendous benefit—even if you have a fast net connection, it's much faster to send only a file's changes rather than the whole file to the server."
msgstr ""

#: ./build/en/book.xml:2733(para) 
msgid "Subversion has been optimized to help you with this task, and is able to do many things without communicating with the repository. In particular, your working copy contains a secret cached <quote>pristine</quote> copy of each version controlled file within the <filename moreinfo=\"none\">.svn</filename> area. Because of this, Subversion can quickly show you how your working files have changed, or even allow you to undo your changes without contacting the repository."
msgstr ""

#: ./build/en/book.xml:2744(title) 
msgid "See an overview of your changes"
msgstr ""

#: ./build/en/book.xml:2746(para) 
msgid "To get an overview of your changes, you'll use the <command moreinfo=\"none\">svn status</command> command. You'll probably use <command moreinfo=\"none\">svn status</command> more than any other Subversion command."
msgstr ""

#: ./build/en/book.xml:2752(title) 
msgid "CVS Users: Hold That Update!"
msgstr ""

#: ./build/en/book.xml:2754(para) 
msgid "You're probably used to using <command moreinfo=\"none\">cvs update</command> to see what changes you've made to your working copy. <command moreinfo=\"none\">svn status</command> will give you all the information you need regarding what has changed in your working copy—without accessing the repository or potentially incorporating new changes published by other users."
msgstr ""

#: ./build/en/book.xml:2762(para) 
msgid "In Subversion, <command moreinfo=\"none\">update</command> does just that—it updates your working copy with any changes committed to the repository since the last time you've updated your working copy. You may have to break the habit of using the <command moreinfo=\"none\">update</command> command to see what local modifications you've made."
msgstr ""

#: ./build/en/book.xml:2771(para) 
msgid "If you run <command moreinfo=\"none\">svn status</command> at the top of your working copy with no arguments, it will detect all file and tree changes you've made. Below are a few examples of the most common status codes that <command moreinfo=\"none\">svn status</command> can return. (Note that the text following <literal moreinfo=\"none\">#</literal> is not actually printed by <command moreinfo=\"none\">svn status</command>.)"
msgstr ""

#: ./build/en/book.xml:2779(screen) 
#, no-wrap
msgid "\nA       stuff/loot/bloo.h   # file is scheduled for addition\nC       stuff/loot/lump.c   # file has textual conflicts from an update\nD       stuff/fish.c        # file is scheduled for deletion\nM       bar.c               # the content in bar.c has local modifications\n"
msgstr ""

#: ./build/en/book.xml:2786(para) 
msgid "In this output format <command moreinfo=\"none\">svn status</command> prints six columns of characters, followed by several whitespace characters, followed by a file or directory name. The first column tells the status of a file or directory and/or its contents. The codes we listed are:"
msgstr ""

#: ./build/en/book.xml:2795(computeroutput) 
#, no-wrap
msgid "A      item"
msgstr ""

#: ./build/en/book.xml:2797(para) 
msgid "The file, directory, or symbolic link <filename moreinfo=\"none\">item</filename> has been scheduled for addition into the repository."
msgstr ""

#: ./build/en/book.xml:2804(computeroutput) 
#, no-wrap
msgid "C      item"
msgstr ""

#: ./build/en/book.xml:2806(para) 
msgid "The file <filename moreinfo=\"none\">item</filename> is in a state of conflict. That is, changes received from the server during an update overlap with local changes that you have in your working copy. You must resolve this conflict before committing your changes to the repository."
msgstr ""

#: ./build/en/book.xml:2816(computeroutput) 
#, no-wrap
msgid "D      item"
msgstr ""

#: ./build/en/book.xml:2818(para) 
msgid "The file, directory, or symbolic link <filename moreinfo=\"none\">item</filename> has been scheduled for deletion from the repository."
msgstr ""

#: ./build/en/book.xml:2825(computeroutput) 
#, no-wrap
msgid "M      item"
msgstr ""

#: ./build/en/book.xml:2827(para) 
msgid "The contents of the file <filename moreinfo=\"none\">item</filename> have been modified."
msgstr ""

#: ./build/en/book.xml:2834(para) 
msgid "If you pass a specific path to <command moreinfo=\"none\">svn status</command>, you get information about that item alone:"
msgstr ""

#: ./build/en/book.xml:2838(screen) 
#, no-wrap
msgid "\n$ svn status stuff/fish.c\nD      stuff/fish.c\n"
msgstr ""

#: ./build/en/book.xml:2843(para) 
msgid "<command moreinfo=\"none\">svn status</command> also has a <option>--verbose (-v)</option> switch, which will show you the status of <emphasis>every</emphasis> item in your working copy, even if it has not been changed:"
msgstr ""

#: ./build/en/book.xml:2848(screen) 
#, no-wrap
msgid "\n$ svn status -v\nM               44        23    sally     README\n                44        30    sally     INSTALL\nM               44        20    harry     bar.c\n                44        18    ira       stuff\n                44        35    harry     stuff/trout.c\nD               44        19    ira       stuff/fish.c\n                44        21    sally     stuff/things\nA                0         ?     ?        stuff/things/bloo.h\n                44        36    harry     stuff/things/gloo.c\n"
msgstr ""

#: ./build/en/book.xml:2861(para) 
msgid "This is the <quote>long form</quote> output of <command moreinfo=\"none\">svn status</command>. The first column remains the same, but the second column shows the working-revision of the item. The third and fourth columns show the revision in which the item last changed, and who changed it (these columns are not to be confused with the columns of characters that we just discussed)."
msgstr ""

#: ./build/en/book.xml:2869(para) 
msgid "None of the above invocations to <command moreinfo=\"none\">svn status</command> contact the repository, they work only locally by comparing the metadata in the <filename moreinfo=\"none\">.svn</filename> directory with the working copy. Finally, there is the <option>--show-updates (-u)</option> option, which contacts the repository and adds information about things that are out-of-date:"
msgstr ""

#: ./build/en/book.xml:2877(screen) 
#, no-wrap
msgid "\n$ svn status -u -v\nM      *        44        23    sally     README\nM               44        20    harry     bar.c\n       *        44        35    harry     stuff/trout.c\nD               44        19    ira       stuff/fish.c\nA                0         ?     ?        stuff/things/bloo.h\nStatus against revision:   46\n"
msgstr ""

#: ./build/en/book.xml:2887(para) 
msgid "Notice the two asterisks: if you were to run <command moreinfo=\"none\">svn update</command> at this point, you would receive changes to <filename moreinfo=\"none\">README</filename> and <filename moreinfo=\"none\">trout.c</filename>. This tells you some very useful information—you'll need to update and get the server changes on <filename moreinfo=\"none\">README</filename> before you commit, or the repository will reject your commit for being out-of-date. (More on this subject later.)"
msgstr ""

#: ./build/en/book.xml:2896(para) 
msgid "<command moreinfo=\"none\">svn status</command> displays much more information about the files and directories in your working copy than we've shown here—for an exhaustive description of svn status and its output, see <xref linkend=\"svn.ref.svn.c.status\"/>."
msgstr ""

#: ./build/en/book.xml:2905(title) 
msgid "Examine the details of your local modifications"
msgstr ""

#: ./build/en/book.xml:2907(para) 
msgid "Another way to examine your changes is with the <command moreinfo=\"none\">svn diff</command> command. You can find out <emphasis>exactly</emphasis> how you've modified things by running <command moreinfo=\"none\">svn diff</command> with no arguments, which prints out file changes in unified diff format:"
msgstr ""

#: ./build/en/book.xml:2914(screen) 
#, no-wrap
msgid "\n$ svn diff\nIndex: bar.c\n===================================================================\n--- bar.c\t(revision 3)\n+++ bar.c\t(working copy)\n@@ -1,7 +1,12 @@\n+#include &lt;sys/types.h&gt;\n+#include &lt;sys/stat.h&gt;\n+#include &lt;unistd.h&gt;\n+\n+#include &lt;stdio.h&gt;\n\n int main(void) {\n-  printf(\"Sixty-four slices of American Cheese...\\n\");\n+  printf(\"Sixty-five slices of American Cheese...\\n\");\n return 0;\n }\n\nIndex: README\n===================================================================\n--- README\t(revision 3)\n+++ README\t(working copy)\n@@ -193,3 +193,4 @@\n+Note to self:  pick up laundry.\n\nIndex: stuff/fish.c\n===================================================================\n--- stuff/fish.c\t(revision 1)\n+++ stuff/fish.c\t(working copy)\n-Welcome to the file known as 'fish'.\n-Information on fish will be here soon.\n\nIndex: stuff/things/bloo.h\n===================================================================\n--- stuff/things/bloo.h\t(revision 8)\n+++ stuff/things/bloo.h\t(working copy)\n+Here is a new file to describe\n+things about bloo.\n"
msgstr ""

#: ./build/en/book.xml:2955(para) 
msgid "The <command moreinfo=\"none\">svn diff</command> command produces this output by comparing your working files against the cached <quote>pristine</quote> copies within the <filename moreinfo=\"none\">.svn</filename> area. Files scheduled for addition are displayed as all added-text, and files scheduled for deletion are displayed as all deleted text."
msgstr ""

#: ./build/en/book.xml:2963(para) 
msgid "Output is displayed in <firstterm>unified diff format</firstterm>. That is, removed lines are prefaced with a <literal moreinfo=\"none\">-</literal> and added lines are prefaced with a <literal moreinfo=\"none\">+</literal>. <command moreinfo=\"none\">svn diff</command> also prints filename and offset information useful to the <command moreinfo=\"none\">patch</command> program, so you can generate <quote>patches</quote> by redirecting the diff output to a file:"
msgstr ""

#: ./build/en/book.xml:2972(screen) 
#, no-wrap
msgid "\n$ svn diff &gt; patchfile\n"
msgstr ""

#: ./build/en/book.xml:2976(para) 
msgid "You could, for example, email the patch file to another developer for review or testing prior to commit."
msgstr ""

#: ./build/en/book.xml:2979(para) 
msgid "Subversion uses its internal diff engine, which produces unified diff format, by default. If you want diff output in a different format, specify an external diff program using <option>--diff-cmd</option> and pass any flags you'd like to it using the <option>--extensions (-x)</option> switch. For example, to see local differences in file <filename moreinfo=\"none\">foo.c</filename> in context output format while ignoring case differences, you might run <command moreinfo=\"none\">svn diff --diff-cmd /usr/bin/diff --extensions '-i' foo.c</command>."
msgstr ""

#: ./build/en/book.xml:2997(title) 
msgid "Undoing Working Changes"
msgstr ""

#: ./build/en/book.xml:3000(para) 
msgid "Suppose while viewing the output of <command moreinfo=\"none\">svn diff</command> you determine that all the changes you made to a particular file are mistakes. Maybe you shouldn't have changed the file at all, or perhaps it would be easier to make different changes starting from scratch."
msgstr ""

#: ./build/en/book.xml:3006(para) 
msgid "This is a perfect opportunity to use <command moreinfo=\"none\">svn revert</command>:"
msgstr ""

#: ./build/en/book.xml:3009(screen) 
#, no-wrap
msgid "\n$ svn revert README\nReverted 'README'\n"
msgstr ""

#: ./build/en/book.xml:3014(para) 
msgid "Subversion reverts the file to its pre-modified state by overwriting it with the cached <quote>pristine</quote> copy from the <filename moreinfo=\"none\">.svn</filename> area. But also note that <command moreinfo=\"none\">svn revert</command> can undo <emphasis>any</emphasis> scheduled operations—for example, you might decide that you don't want to add a new file after all:"
msgstr ""

#: ./build/en/book.xml:3022(screen) 
#, no-wrap
msgid "\n$ svn status foo\n?      foo\n\n$ svn add foo\nA         foo\n\n$ svn revert foo\nReverted 'foo'\n\n$ svn status foo\n?      foo\n"
msgstr ""

#: ./build/en/book.xml:3037(para) 
msgid "<command moreinfo=\"none\">svn revert</command><replaceable>ITEM</replaceable> has exactly the same effect as deleting <replaceable>ITEM</replaceable> from your working copy and then running <command moreinfo=\"none\">svn update -r BASE</command><replaceable>ITEM</replaceable>. However, if you're reverting a file, <command moreinfo=\"none\">svn revert</command> has one very noticeable difference—it doesn't have to communicate with the repository to restore your file."
msgstr ""

#: ./build/en/book.xml:3048(para) 
msgid "Or perhaps you mistakenly removed a file from version control:"
msgstr ""

#: ./build/en/book.xml:3051(screen) 
#, no-wrap
msgid "\n$ svn status README\n       README\n\n$ svn delete README\nD         README\n\n$ svn revert README\nReverted 'README'\n\n$ svn status README\n       README\n"
msgstr ""

#: ./build/en/book.xml:3069(title) 
msgid "Resolve Conflicts (Merging Others' Changes)"
msgstr ""

#: ./build/en/book.xml:3071(para) 
msgid "We've already seen how <command moreinfo=\"none\">svn status -u</command> can predict conflicts. Suppose you run <command moreinfo=\"none\">svn update</command> and some interesting things occur:"
msgstr ""

#: ./build/en/book.xml:3075(screen) 
#, no-wrap
msgid "\n$ svn update\nU  INSTALL\nG  README\nC  bar.c\nUpdated to revision 46.\n"
msgstr ""

#: ./build/en/book.xml:3083(para) 
msgid "The <computeroutput moreinfo=\"none\">U</computeroutput> and <computeroutput moreinfo=\"none\">G</computeroutput> codes are no cause for concern; those files cleanly absorbed changes from the repository. The files marked with <computeroutput moreinfo=\"none\">U</computeroutput> contained no local changes but were <computeroutput moreinfo=\"none\">U</computeroutput>pdated with changes from the repository. The <computeroutput moreinfo=\"none\">G</computeroutput> stands for mer<computeroutput moreinfo=\"none\">G</computeroutput>ed, which means that the file had local changes to begin with, but the changes coming from the repository didn't overlap with the local changes."
msgstr ""

#: ./build/en/book.xml:3095(para) 
msgid "But the <computeroutput moreinfo=\"none\">C</computeroutput> stands for conflict. This means that the changes from the server overlapped with your own, and now you have to manually choose between them."
msgstr ""

#: ./build/en/book.xml:3100(para) 
msgid "Whenever a conflict occurs, three things typically occur to assist you in noticing and resolving that conflict:"
msgstr ""

#: ./build/en/book.xml:3106(para) 
msgid "Subversion prints a <computeroutput moreinfo=\"none\">C</computeroutput> during the update, and remembers that the file is in a state of conflict."
msgstr ""

#: ./build/en/book.xml:3112(para) 
msgid "If Subversion considers the file to be mergeable, it places <firstterm>conflict markers</firstterm>—special strings of text which delimit the <quote>sides</quote> of the conflict—into the file to visibly demonstrate the overlapping areas. (Subversion uses the <literal moreinfo=\"none\">svn:mime-type</literal> property to decide if a file is capable of contextual, line-based merging. See <xref linkend=\"svn.advanced.props.special.mime-type\"/> to learn more.)"
msgstr ""

#: ./build/en/book.xml:3124(para) 
msgid "For every conflicted file, Subversion places three extra unversioned files in your working copy:"
msgstr ""

#: ./build/en/book.xml:3130(filename) 
msgid "filename.mine"
msgstr ""

#: ./build/en/book.xml:3132(para) 
msgid "This is your file as it existed in your working copy before you updated your working copy—that is, without conflict markers. This file has only your latest changes in it. (If Subversion considers the file to be unmergeable, then the <filename moreinfo=\"none\">.mine</filename> file isn't created, since it would be identical to the working file.)"
msgstr ""

#: ./build/en/book.xml:3143(filename) 
msgid "filename.rOLDREV"
msgstr ""

#: ./build/en/book.xml:3145(para) 
msgid "This is the file that was the <literal moreinfo=\"none\">BASE</literal> revision before you updated your working copy. That is, the file that you checked out before you made your latest edits."
msgstr ""

#: ./build/en/book.xml:3154(filename) 
msgid "filename.rNEWREV"
msgstr ""

#: ./build/en/book.xml:3156(para) 
msgid "This is the file that your Subversion client just received from the server when you updated your working copy. This file corresponds to the <literal moreinfo=\"none\">HEAD</literal> revision of the repository."
msgstr ""

#: ./build/en/book.xml:3166(para) 
msgid "Here <literal moreinfo=\"none\">OLDREV</literal> is the revision number of the file in your <filename moreinfo=\"none\">.svn</filename> directory and <literal moreinfo=\"none\">NEWREV</literal> is the revision number of the repository <literal moreinfo=\"none\">HEAD</literal>."
msgstr ""

#: ./build/en/book.xml:3174(para) 
msgid "For example, Sally makes changes to the file <filename moreinfo=\"none\">sandwich.txt</filename> in the repository. Harry has just changed the file in his working copy and checked it in. Sally updates her working copy before checking in and she gets a conflict:"
msgstr ""

#: ./build/en/book.xml:3180(screen) 
#, no-wrap
msgid "\n$ svn update\nC  sandwich.txt\nUpdated to revision 2.\n$ ls -1\nsandwich.txt\nsandwich.txt.mine\nsandwich.txt.r1\nsandwich.txt.r2\n"
msgstr ""

#: ./build/en/book.xml:3191(para) 
msgid "At this point, Subversion will <emphasis>not</emphasis> allow you to commit the file <filename moreinfo=\"none\">sandwich.txt</filename> until the three temporary files are removed."
msgstr ""

#: ./build/en/book.xml:3195(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"Add a few more things\"\nsvn: Commit failed (details follow):\nsvn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict\n"
msgstr ""

#: ./build/en/book.xml:3201(para) 
msgid "If you get a conflict, you need to do one of three things:"
msgstr ""

#: ./build/en/book.xml:3207(para) 
msgid "Merge the conflicted text <quote>by hand</quote> (by examining and editing the conflict markers within the file)."
msgstr ""

#: ./build/en/book.xml:3213(para) 
msgid "Copy one of the temporary files on top of your working file."
msgstr ""

#: ./build/en/book.xml:3218(para) 
msgid "Run <command moreinfo=\"none\">svn revert &lt;filename&gt;</command> to throw away all of your local changes."
msgstr ""

#: ./build/en/book.xml:3228(para) 
msgid "You can always remove the temporary files yourself, but would you really want to do that when Subversion can do it for you? We didn't think so."
msgstr ""

#: ./build/en/book.xml:3224(para) 
msgid "Once you've resolved the conflict, you need to let Subversion know by running <command moreinfo=\"none\">svn resolved</command>. This removes the three temporary files and Subversion no longer considers the file to be in a state of conflict.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:3233(screen) 
#, no-wrap
msgid "\n$ svn resolved sandwich.txt\nResolved conflicted state of 'sandwich.txt'\n"
msgstr ""

#: ./build/en/book.xml:3240(title) 
msgid "Merging Conflicts by Hand"
msgstr ""

#: ./build/en/book.xml:3242(para) 
msgid "Merging conflicts by hand can be quite intimidating the first time you attempt it, but with a little practice, it can become as easy as falling off a bike."
msgstr ""

#: ./build/en/book.xml:3246(para) 
msgid "Here's an example. Due to a miscommunication, you and Sally, your collaborator, both edit the file <filename moreinfo=\"none\">sandwich.txt</filename> at the same time. Sally commits her changes, and when you go to update your working copy, you get a conflict and you're going to have to edit <filename moreinfo=\"none\">sandwich.txt</filename> to resolve the conflicts. First, let's take a look at the file:"
msgstr ""

#: ./build/en/book.xml:3254(screen) 
#, no-wrap
msgid "\n$ cat sandwich.txt\nTop piece of bread\nMayonnaise\nLettuce\nTomato\nProvolone\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\nSalami\nMortadella\nProsciutto\n=======\nSauerkraut\nGrilled Chicken\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2\nCreole Mustard\nBottom piece of bread\n"
msgstr ""

#: ./build/en/book.xml:3273(para) 
msgid "The strings of less-than signs, equal signs, and greater-than signs are conflict markers, and