msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2007-05-07 09:26+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ./build/en/book.xml:4(title) 
msgid "Version Control with Subversion"
msgstr ""

#: ./build/en/book.xml:8(subtitle) 
msgid "For Subversion 1.4"
msgstr ""

#. don't seem to render it.
#: ./build/en/book.xml:12(subtitle) 
msgid "(Compiled from r2789)"
msgstr ""

#: ./build/en/book.xml:14(edition) 
msgid "Second"
msgstr ""

#: ./build/en/book.xml:15(isbn) 
msgid "?-?????-???-?"
msgstr ""

#: ./build/en/book.xml:19(firstname) 
msgid "Ben"
msgstr ""

#: ./build/en/book.xml:20(surname) 
msgid "Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:24(firstname) 
msgid "Brian W."
msgstr ""

#: ./build/en/book.xml:25(surname) 
msgid "Fitzpatrick"
msgstr ""

#: ./build/en/book.xml:29(firstname) 
msgid "C. Michael"
msgstr ""

#: ./build/en/book.xml:30(surname) 
msgid "Pilato"
msgstr ""

#: ./build/en/book.xml:36(firstname) 
msgid "Tatiana"
msgstr ""

#: ./build/en/book.xml:37(surname) 
msgid "Apandi"
msgstr ""

#: ./build/en/book.xml:40(pagenums) 
msgid "350 pages (est.)"
msgstr ""

#: ./build/en/book.xml:41(pubdate) 
msgid "(TBA)"
msgstr ""

#: ./build/en/book.xml:44(year) 
msgid "2002"
msgstr ""

#: ./build/en/book.xml:45(year) 
msgid "2003"
msgstr ""

#: ./build/en/book.xml:46(year) 
msgid "2004"
msgstr ""

#: ./build/en/book.xml:47(year) 
msgid "2005"
msgstr ""

#: ./build/en/book.xml:48(year) 
msgid "2006"
msgstr ""

#: ./build/en/book.xml:49(year) 
msgid "2007"
msgstr ""

#: ./build/en/book.xml:50(holder) 
msgid "Ben Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:51(holder) 
msgid "Brian W. Fitzpatrick"
msgstr ""

#: ./build/en/book.xml:52(holder) 
msgid "C. Michael Pilato"
msgstr ""

#: ./build/en/book.xml:55(para) 
msgid "This work is licensed under the Creative Commons Attribution License. To view a copy of this license, visit <ulink url=\"http://creativecommons.org/licenses/by/2.0/\"/> or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA."
msgstr ""

#: ./build/en/book.xml:74(firstname) 
msgid "Karl"
msgstr ""

#: ./build/en/book.xml:75(surname) 
msgid "Fogel"
msgstr ""

#: ./build/en/book.xml:77(pubdate) 
msgid "Chicago, March 14, 2004"
msgstr ""

#: ./build/en/book.xml:80(title) 
msgid "Foreword"
msgstr ""

#: ./build/en/book.xml:82(para) 
msgid "A bad Frequently Asked Questions (FAQ) sheet is one that is composed not of the questions people actually asked, but of the questions the FAQ's author <emphasis>wished</emphasis> people had asked. Perhaps you've seen the type before:"
msgstr ""

#: ./build/en/book.xml:88(para) 
msgid "Q: How can I use Glorbosoft XYZ to maximize team productivity?"
msgstr ""

#: ./build/en/book.xml:93(para) 
msgid "A: Many of our customers want to know how they can maximize productivity through our patented office groupware innovations. The answer is simple: first, click on the <quote><literal moreinfo=\"none\">File</literal></quote> menu, scroll down to <quote><literal moreinfo=\"none\">Increase Productivity</literal></quote>, then…"
msgstr ""

#: ./build/en/book.xml:101(para) 
msgid "The problem with such FAQs is that they are not, in a literal sense, FAQs at all. No one ever called the tech support line and asked, <quote>How can we maximize productivity?</quote>. Rather, people asked highly specific questions, like, <quote>How can we change the calendaring system to send reminders two days in advance instead of one?</quote> and so on. But it's a lot easier to make up imaginary Frequently Asked Questions than it is to discover the real ones. Compiling a true FAQ sheet requires a sustained, organized effort: over the lifetime of the software, incoming questions must be tracked, responses monitored, and all gathered into a coherent, searchable whole that reflects the collective experience of users in the wild. It calls for the patient, observant attitude of a field naturalist. No grand hypothesizing, no visionary pronouncements here—open eyes and accurate note-taking are what's needed most."
msgstr ""

#: ./build/en/book.xml:118(para) 
msgid "What I love about this book is that it grew out of just such a process, and shows it on every page. It is the direct result of the authors' encounters with users. It began with Ben Collins-Sussman's observation that people were asking the same basic questions over and over on the Subversion mailing lists: What are the standard workflows to use with Subversion? Do branches and tags work the same way as in other version control systems? How can I find out who made a particular change?"
msgstr ""

#: ./build/en/book.xml:127(para) 
msgid "Frustrated at seeing the same questions day after day, Ben worked intensely over a month in the summer of 2002 to write <citetitle>The Subversion Handbook</citetitle>, a sixty page manual that covered all the basics of using Subversion. The manual made no pretense of being complete, but it was distributed with Subversion and got users over that initial hump in the learning curve. When O'Reilly and Associates decided to publish a full-length Subversion book, the path of least resistance was obvious: just expand the Subversion handbook."
msgstr ""

#: ./build/en/book.xml:138(para) 
msgid "The three co-authors of the new book were thus presented with an unusual opportunity. Officially, their task was to write a book top-down, starting from a table of contents and an initial draft. But they also had access to a steady stream—indeed, an uncontrollable geyser—of bottom-up source material. Subversion was already in the hands of thousands of early adopters, and those users were giving tons of feedback, not only about Subversion, but about its existing documentation."
msgstr ""

#: ./build/en/book.xml:148(para) 
msgid "During the entire time they wrote this book, Ben, Mike, and Brian haunted the Subversion mailing lists and chat rooms incessantly, carefully noting the problems users were having in real-life situations. Monitoring such feedback was part of their job descriptions at CollabNet anyway, and it gave them a huge advantage when they set out to document Subversion. The book they produced is grounded firmly in the bedrock of experience, not in the shifting sands of wishful thinking; it combines the best aspects of user manual and FAQ sheet. This duality might not be noticeable on a first reading. Taken in order, front to back, the book is simply a straightforward description of a piece of software. There's the overview, the obligatory guided tour, the chapter on administrative configuration, some advanced topics, and of course a command reference and troubleshooting guide. Only when you come back to it later, seeking the solution to some specific problem, does its authenticity shine out: the telling details that can only result from encounters with the unexpected, the examples honed from genuine use cases, and most of all the sensitivity to the user's needs and the user's point of view."
msgstr ""

#: ./build/en/book.xml:169(para) 
msgid "Of course, no one can promise that this book will answer every question you have about Subversion. Sometimes, the precision with which it anticipates your questions will seem eerily telepathic; yet occasionally, you will stumble into a hole in the community's knowledge, and come away empty-handed. When this happens, the best thing you can do is email <email>users@subversion.tigris.org</email> and present your problem. The authors are still there, still watching, and they include not just the three listed on the cover, but many others who contributed corrections and original material. From the community's point of view, solving your problem is merely a pleasant side effect of a much larger project—namely, slowly adjusting this book, and ultimately Subversion itself, to more closely match the way people actually use it. They are eager to hear from you not merely because they can help you, but because you can help them. With Subversion as with all active free software projects, <emphasis>you are not alone</emphasis>."
msgstr ""

#: ./build/en/book.xml:188(para) 
msgid "Let this book be your first companion."
msgstr ""

#: ./build/en/book.xml:199(title) 
msgid "Preface"
msgstr ""

#: ./build/en/book.xml:202(attribution) 
msgid "Greg Hudson"
msgstr ""

#: ./build/en/book.xml:203(quote) 
msgid "It is important not to let the perfect become the enemy of the good, even when you can agree on what perfect is. Doubly so when you can't. As unpleasant as it is to be trapped by past mistakes, you can't make any progress by being afraid of your own shadow during design."
msgstr ""

#: ./build/en/book.xml:210(para) 
msgid "<indexterm significance=\"normal\"><primary>Concurrent Versions System (CVS)</primary></indexterm> In the world of open-source software, the Concurrent Versions System (CVS) was the tool of choice for version control for many years. And rightly so. CVS was open-source software itself, and its non-restrictive modus operandi and support for networked operation allowed dozens of geographically dispersed programmers to share their work. It fit the collaborative nature of the open-source world very well. CVS and its semi-chaotic development model have since become cornerstones of open-source culture."
msgstr ""

#: ./build/en/book.xml:225(para) 
msgid "But CVS was not without its flaws, and simply fixing those flaws promised to be an enormous effort. Enter Subversion. Designed to be a successor to CVS, Subversion's originators set out to win the hearts of CVS users in two ways—by creating an open-source system with a design (and <quote>look and feel</quote>) similar to CVS, and by attempting to avoid most of CVS's noticeable flaws. While the result isn't necessarily the next great evolution in version control design, Subversion <emphasis>is</emphasis> very powerful, very usable, and very flexible. And for the most part, almost all newly-started open-source projects now choose Subversion instead of CVS."
msgstr ""

#: ./build/en/book.xml:237(para) 
msgid "This book is written to document the 1.4 series of the Subversion version control system. We have made every attempt to be thorough in our coverage. However, Subversion has a thriving and energetic development community, so there are already a number of features and improvements planned for future versions of Subversion that may change some of the commands and specific notes in this book."
msgstr ""

#: ./build/en/book.xml:251(title) 
msgid "Audience"
msgstr ""

#: ./build/en/book.xml:253(para) 
msgid "This book is written for computer-literate folk who want to use Subversion to manage their data. While Subversion runs on a number of different operating systems, its primary user interface is command-line based. That command-line tool (<command moreinfo=\"none\">svn</command>) and auxiliary program are the focus of this book."
msgstr ""

#: ./build/en/book.xml:260(para) 
msgid "For consistency, the examples in this book assume the reader is using a Unix-like operating system and relatively comfortable with Unix and command-line interfaces. That said, the <command moreinfo=\"none\">svn</command> program also runs on non-Unix platforms like Microsoft Windows. With a few minor exceptions, such as the use of backward slashes (<literal moreinfo=\"none\">\\</literal>) instead of forward slashes (<literal moreinfo=\"none\">/</literal>) for path separators, the input to and output from this tool when run on Windows are identical to its Unix counterpart."
msgstr ""

#: ./build/en/book.xml:270(para) 
msgid "Most readers are probably programmers or system administrators who need to track changes to source code. This is the most common use for Subversion, and therefore it is the scenario underlying all of the book's examples. But Subversion can be used to manage changes to any sort of information—images, music, databases, documentation, and so on. To Subversion, all data is just data."
msgstr ""

#: ./build/en/book.xml:278(para) 
msgid "While this book is written with the assumption that the reader has never used a version control system, we've also tried to make it easy for users of CVS (and other systems) to make a painless leap into Subversion. Special sidebars may mention other version control systems from time to time, and a special appendix summarizes many of the differences between CVS and Subversion."
msgstr ""

#: ./build/en/book.xml:286(para) 
msgid "Note also that the source code examples used throughout the book are only examples. While they will compile with the proper compiler incantations, they are intended to illustrate a particular scenario, not necessarily serve as examples of good programming style or practices."
msgstr ""

#: ./build/en/book.xml:298(title) 
msgid "How to Read this Book"
msgstr ""

#: ./build/en/book.xml:300(para) 
msgid "This book aims to be useful to people of widely different backgrounds—from people with no previous experience in version control to experienced system administrators. Depending on your own background, certain chapters may be more or less important to you. The following can be considered a <quote>recommended reading list</quote> for various types of readers:"
msgstr ""

#: ./build/en/book.xml:310(term) 
msgid "Experienced System Administrators"
msgstr ""

#: ./build/en/book.xml:312(para) 
msgid "The assumption here is that you've probably used version control before before, and are dying to get a Subversion server up and running ASAP. <xref linkend=\"svn.reposadmin\"/> and <xref linkend=\"svn.serverconfig\"/> will show you how to create your first repository and make it available over the network. After that's done, <xref linkend=\"svn.tour\"/> and <xref linkend=\"svn.forcvs\"/> are the fastest routes to learning the Subversion client."
msgstr ""

#: ./build/en/book.xml:326(term) 
msgid "New users"
msgstr ""

#: ./build/en/book.xml:328(para) 
msgid "Your administrator has probably set up Subversion already, and you need to learn how to use the client. If you've never used a version control system, then <xref linkend=\"svn.basic\"/> is a vital introduction to the ideas behind version control. <xref linkend=\"svn.tour\"/> is a guided tour of the Subversion client."
msgstr ""

#: ./build/en/book.xml:338(term) 
msgid "Advanced users"
msgstr ""

#: ./build/en/book.xml:340(para) 
msgid "Whether you're a user or administrator, eventually your project will grow larger. You're going to want to learn how to do more advanced things with Subversion, such as how to use branches and perform merges (<xref linkend=\"svn.branchmerge\"/>), how to use Subversion's property support (<xref linkend=\"svn.advanced\"/>), how to configure runtime options (<xref linkend=\"svn.customization\"/>), and other things. These chapters aren't critical at first, but be sure to read them once you're comfortable with the basics."
msgstr ""

#: ./build/en/book.xml:352(term) 
msgid "Developers"
msgstr ""

#: ./build/en/book.xml:354(para) 
msgid "Presumably, you're already familiar with Subversion, and now want to either extend it or build new software on top of its many APIs. <xref linkend=\"svn.developer\"/> is just for you."
msgstr ""

#: ./build/en/book.xml:362(para) 
msgid "The book ends with reference material—<xref linkend=\"svn.ref\"/> is a reference guide for all Subversion commands, and the appendices cover a number of useful topics. These are the chapters you're mostly likely to come back to after you've finished the book."
msgstr ""

#: ./build/en/book.xml:373(title) 
msgid "Conventions Used in This Book"
msgstr ""

#: ./build/en/book.xml:375(para) 
msgid "This section covers the various conventions used in this book."
msgstr ""

#: ./build/en/book.xml:380(title) 
msgid "Typographic Conventions"
msgstr ""

#: ./build/en/book.xml:385(command) 
msgid "Constant width"
msgstr ""

#: ./build/en/book.xml:387(para) 
msgid "Used for commands, command output, and switches"
msgstr ""

#: ./build/en/book.xml:392(replaceable) 
msgid "Constant width italic"
msgstr ""

#: ./build/en/book.xml:394(para) 
msgid "Used for replaceable items in code and text"
msgstr ""

#: ./build/en/book.xml:399(filename) 
msgid "Italic"
msgstr ""

#: ./build/en/book.xml:401(para) 
msgid "Used for file and directory names"
msgstr ""

#: ./build/en/book.xml:411(title) 
msgid "Icons"
msgstr ""

#: ./build/en/book.xml:414(para) 
msgid "This icon designates a note relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:419(para) 
msgid "This icon designates a helpful tip relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:424(para) 
msgid "This icon designates a warning relating to the surrounding text."
msgstr ""

#: ./build/en/book.xml:435(title) 
msgid "Organization of This Book"
msgstr ""

#: ./build/en/book.xml:437(para) 
msgid "The chapters that follow and their contents are listed here:"
msgstr ""

#: ./build/en/book.xml:445(para) 
msgid "Covers the history of Subversion as well as its features, architecture, and components."
msgstr ""

#: ./build/en/book.xml:453(para) 
msgid "Explains the basics of version control and different versioning models, along with Subversion's repository, working copies, and revisions."
msgstr ""

#: ./build/en/book.xml:462(para) 
msgid "Walks you through a day in the life of a Subversion user. It demonstrates how to use a Subversion client to obtain, modify, and commit data."
msgstr ""

#: ./build/en/book.xml:471(para) 
msgid "Covers more complex features that regular users will eventually come into contact with, such as versioned metadata, file locking, and peg revisions."
msgstr ""

#: ./build/en/book.xml:480(para) 
msgid "Discusses branches, merges, and tagging, including best practices for branching and merging, common use cases, how to undo changes, and how to easily swing from one branch to the next."
msgstr ""

#: ./build/en/book.xml:490(para) 
msgid "Describes the basics of the Subversion repository, how to create, configure, and maintain a repository, and the tools you can use to do all of this."
msgstr ""

#: ./build/en/book.xml:499(para) 
msgid "Explains how to configure your Subversion server and the three ways to access your repository: <literal moreinfo=\"none\">HTTP</literal>, the <literal moreinfo=\"none\">svn</literal> protocol, and local disk access. It also covers the details of authentication, authorization and anonymous access."
msgstr ""

#: ./build/en/book.xml:511(para) 
msgid "Explores the Subversion client configuration files, the handling of internationalized text, and how to make external tools cooperate with Subversion."
msgstr ""

#: ./build/en/book.xml:520(para) 
msgid "Describes the internals of Subversion, the Subversion filesystem, and the working copy administrative areas from a programmer's point of view. Demonstrates how to use the public APIs to write a program that uses Subversion, and most importantly, how to contribute to the development of Subversion."
msgstr ""

#: ./build/en/book.xml:532(para) 
msgid "Explains in great detail every subcommand of <command moreinfo=\"none\">svn</command>, <command moreinfo=\"none\">svnadmin</command>, and <command moreinfo=\"none\">svnlook</command> with plenty of examples for the whole family!"
msgstr ""

#: ./build/en/book.xml:542(para) 
msgid "For the impatient, a whirlwind explanation of how to install Subversion and start using it immediately. You have been warned."
msgstr ""

#: ./build/en/book.xml:551(para) 
msgid "Covers the similarities and differences between Subversion and CVS, with numerous suggestions on how to break all the bad habits you picked up from years of using CVS. Included are descriptions of Subversion revision numbers, versioned directories, offline operations, <command moreinfo=\"none\">update</command> vs. <command moreinfo=\"none\">status</command>, branches, tags, metadata, conflict resolution, and authentication."
msgstr ""

#: ./build/en/book.xml:565(para) 
msgid "Describes the details of WebDAV and DeltaV, and how you can configure your Subversion repository to be mounted read/write as a DAV share."
msgstr ""

#: ./build/en/book.xml:574(para) 
msgid "Discusses tools that support or use Subversion, including alternative client programs, repository browser tools, and so on."
msgstr ""

#: ./build/en/book.xml:589(title) 
msgid "This Book is Free"
msgstr ""

#: ./build/en/book.xml:591(para) 
msgid "This book started out as bits of documentation written by Subversion project developers, which were then coalesced into a single work and rewritten. As such, it has always been under a free license. (See <xref linkend=\"svn.copyright\"/>.) In fact, the book was written in the public eye, originally as a part of Subversion project itself. This means two things:"
msgstr ""

#: ./build/en/book.xml:600(para) 
msgid "You will always find the latest version of this book in the book's own Subversion repository."
msgstr ""

#: ./build/en/book.xml:605(para) 
msgid "You can make changes to this book and redistribute it however you wish—it's under a free license. Your only obligation is to maintain proper attribution to the original authors. Of course, rather than distribute your own private version of this book, we'd much rather you send feedback and patches to the Subversion developer community."
msgstr ""

#. O'REILLY SHOULD TWEAK THIS PARAGRAPH
#: ./build/en/book.xml:615(para) 
msgid "The online home of this book's development and most of the volunteer-driven translation efforts around it is <ulink url=\"http://svnbook.red-bean.com\"/>. There, you can find links to the latest snapshots and tagged versions of the book in various formats, as well as instructions for accessing the book's Subversion repository (where lives its DocBook XML source code). Feedback is welcome—encouraged, even. Please submit all comments, complaints, and patches against the book sources to <email>svnbook-dev@red-bean.com</email>."
msgstr ""

#: ./build/en/book.xml:630(title) 
msgid "Acknowledgments"
msgstr ""

#: ./build/en/book.xml:638(para) 
msgid "Oh, and thanks, Karl, for being too overworked to write this book yourself."
msgstr ""

#: ./build/en/book.xml:632(para) 
msgid "This book would not be possible (nor very useful) if Subversion did not exist. For that, the authors would like to thank Brian Behlendorf and CollabNet for the vision to fund such a risky and ambitious new Open Source project; Jim Blandy for the original Subversion name and design—we love you, Jim; Karl Fogel for being such a good friend and a great community leader, in that order.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:642(para) 
msgid "Thanks to O'Reilly and our editors, Linda Mui and Tatiana Diaz for their patience and support."
msgstr ""

#: ./build/en/book.xml:645(para) 
msgid "Finally, we thank the countless people who contributed to this book with informal reviews, suggestions, and fixes: While this is undoubtedly not a complete list, this book would be incomplete and incorrect without the help of: David Anderson, Jani Averbach, Ryan Barrett, Francois Beausoleil, Jennifer Bevan, Matt Blais, Zack Brown, Martin Buchholz, Brane Cibej, John R. Daily, Peter Davis, Olivier Davy, Robert P. J. Day, Mo DeJong, Brian Denny, Joe Drew, Nick Duffek, Ben Elliston, Justin Erenkrantz, Shlomi Fish, Julian Foad, Chris Foote, Martin Furter, Dave Gilbert, Eric Gillespie, David Glasser, Matthew Gregan, Art Haas, Eric Hanchrow, Greg Hudson, Alexis Huxley, Jens B. Jorgensen, Tez Kamihira, David Kimdon, Mark Benedetto King, Andreas J. Koenig, Nuutti Kotivuori, Matt Kraai, Scott Lamb, Vincent Lefevre, Morten Ludvigsen, Paul Lussier, Bruce A. Mah, Philip Martin, Feliciano Matias, Patrick Mayweg, Gareth McCaughan, Jon Middleton, Tim Moloney, Christopher Ness, Mats Nilsson, Joe Orton, Amy Lyn Pilato, Kevin Pilch-Bisson, Dmitriy Popkov, Michael Price, Mark Proctor, Steffen Prohaska, Daniel Rall, Jack Repenning, Tobias Ringstrom, Garrett Rooney, Joel Rosdahl, Christian Sauer, Larry Shatzer, Russell Steicke, Sander Striker, Erik Sjoelund, Johan Sundstroem, John Szakmeister, Mason Thomas, Eric Wadsworth, Colin Watson, Alex Waugh, Chad Whitacre, Josef Wolf, Blair Zajac, and the entire Subversion community."
msgstr ""

#: ./build/en/book.xml:672(title) 
msgid "From Ben Collins-Sussman"
msgstr ""

#: ./build/en/book.xml:674(para) 
msgid "Thanks to my wife Frances, who, for many months, got to hear, <quote>But honey, I'm still working on the book</quote>, rather than the usual, <quote>But honey, I'm still doing email.</quote> I don't know where she gets all that patience! She's my perfect counterbalance."
msgstr ""

#: ./build/en/book.xml:680(para) 
msgid "Thanks to my extended family and friends for their sincere encouragement, despite having no actual interest in the subject. (You know, the ones who say, <quote>Ooh, you wrote a book?</quote>, and then when you tell them it's a computer book, sort of glaze over.)"
msgstr ""

#: ./build/en/book.xml:686(para) 
msgid "Thanks to all my close friends, who make me a rich, rich man. Don't look at me that way—you know who you are."
msgstr ""

#: ./build/en/book.xml:689(para) 
msgid "Thanks to my parents for the perfect low-level formatting, and being unbelievable role models. Thanks to my son for the opportunity to pass that on."
msgstr ""

#: ./build/en/book.xml:697(title) 
msgid "From Brian W. Fitzpatrick"
msgstr ""

#. ### TODO(fitz):  update this?
#: ./build/en/book.xml:701(para) 
msgid "Huge thanks to my wife Marie for being incredibly understanding, supportive, and most of all, patient. Thank you to my brother Eric who first introduced me to UNIX programming way back when. Thanks to my Mom and Grandmother for all their support, not to mention enduring a Christmas holiday where I came home and promptly buried my head in my laptop to work on the book."
msgstr ""

#: ./build/en/book.xml:709(para) 
msgid "To Mike and Ben: It was a pleasure working with you on the book. Heck, it's a pleasure working with you at work!"
msgstr ""

#: ./build/en/book.xml:712(para) 
msgid "To everyone in the Subversion community and the Apache Software Foundation, thanks for having me. Not a day goes by where I don't learn something from at least one of you."
msgstr ""

#: ./build/en/book.xml:717(para) 
msgid "Lastly, thanks to my Grandfather who always told me that <quote>freedom equals responsibility.</quote> I couldn't agree more."
msgstr ""

#: ./build/en/book.xml:725(title) 
msgid "From C. Michael Pilato"
msgstr ""

#: ./build/en/book.xml:727(para) 
msgid "Special thanks to Amy, my best friend and wife of nine incredible years, for her love and patient support, for putting up with the late nights, and for graciously enduring the version control processes I've imposed on her. Don't worry, Sweetheart—you'll be a TortoiseSVN wizard in no time!"
msgstr ""

#: ./build/en/book.xml:734(para) 
msgid "Gavin, there probably aren't many words in this book that you can successfully <quote>sound out</quote> at this stage, but when you've finally got a handle on the written form of this crazy language we speak, I hope you're as proud of your Daddy as he is of you."
msgstr ""

#: ./build/en/book.xml:743(para) 
msgid "Translation: Daddy loves you and hopes you like computers as much as you like basketball, baseball, and football. (Wasn't that obvious?)"
msgstr ""

#: ./build/en/book.xml:740(para) 
msgid "Aidan, Daddy luffoo et ope Aiduh yike contootoo as much as Aiduh yike batetball, base-ball, et bootball. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:749(para) 
msgid "Mom and Dad, thanks for your constant support and enthusiasm. Mom- and Dad-in-law, thanks for all of the same <emphasis>plus</emphasis> your fabulous daughter."
msgstr ""

#: ./build/en/book.xml:753(para) 
msgid "Hats off to Shep Kendall, through whom the world of computers was first opened to me; Ben Collins-Sussman, my tour-guide through the open-source world; Karl Fogel—you <emphasis>are</emphasis> my <filename moreinfo=\"none\">.emacs</filename>; Greg Stein, for oozing practical programming know-how; Brian Fitzpatrick—for sharing this writing experience with me. To the many folks from whom I am constantly picking up new knowledge—keep dropping it!"
msgstr ""

#: ./build/en/book.xml:762(para) 
msgid "Finally, to the One who perfectly demonstrates creative excellence—thank You."
msgstr ""

#: ./build/en/book.xml:774(title) 
msgid "What is Subversion?"
msgstr ""

#: ./build/en/book.xml:776(para) 
msgid "Subversion is a free/open-source version control system. That is, Subversion manages files and directories, and the changes made to them, over time. This allows you to recover older versions of your data, or examine the history of how your data changed. In this regard, many people think of a version control system as a sort of <quote>time machine</quote>."
msgstr ""

#: ./build/en/book.xml:783(para) 
msgid "Subversion can operate across networks, which allows it to be used by people on different computers. At some level, the ability for various people to modify and manage the same set of data from their respective locations fosters collaboration. Progress can occur more quickly without a single conduit through which all modifications must occur. And because the work is versioned, you need not fear that quality is the trade-off for losing that conduit—if some incorrect change is made to the data, just undo that change."
msgstr ""

#: ./build/en/book.xml:793(para) 
msgid "Some version control systems are also software configuration management (SCM) systems. These systems are specifically tailored to manage trees of source code, and have many features that are specific to software development—such as natively understanding programming languages, or supplying tools for building software. Subversion, however, is not one of these systems. It is a general system that can be used to manage <emphasis>any</emphasis> collection of files. For you, those files might be source code—for others, anything from grocery shopping lists to digital video mixdowns and beyond."
msgstr ""

#: ./build/en/book.xml:808(title) 
msgid "Subversion's History"
msgstr ""

#: ./build/en/book.xml:810(para) 
msgid "<indexterm significance=\"normal\"><primary>Subversion</primary><secondary>history of</secondary></indexterm> In early 2000, CollabNet, Inc. (<ulink url=\"http://www.collab.net\"/>) began seeking developers to write a replacement for CVS. CollabNet offers a collaboration software suite called CollabNet Enterprise Edition (CEE) of which one component is version control. Although CEE used CVS as its initial version control system, CVS's limitations were obvious from the beginning, and CollabNet knew it would eventually have to find something better. Unfortunately, CVS had become the de facto standard in the open source world largely because there <emphasis>wasn't</emphasis> anything better, at least not under a free license. So CollabNet determined to write a new version control system from scratch, retaining the basic ideas of CVS, but without the bugs and misfeatures."
msgstr ""

#: ./build/en/book.xml:830(para) 
msgid "In February 2000, they contacted Karl Fogel, the author of <citetitle>Open Source Development with CVS</citetitle> (Coriolis, 1999), and asked if he'd like to work on this new project. Coincidentally, at the time Karl was already discussing a design for a new version control system with his friend Jim Blandy. In 1995, the two had started Cyclic Software, a company providing CVS support contracts, and although they later sold the business, they still used CVS every day at their jobs. Their frustration with CVS had led Jim to think carefully about better ways to manage versioned data, and he'd already come up with not only the name <quote>Subversion</quote>, but also with the basic design of the Subversion data store. When CollabNet called, Karl immediately agreed to work on the project, and Jim got his employer, Red Hat Software, to essentially donate him to the project for an indefinite period of time. CollabNet hired Karl and Ben Collins-Sussman, and detailed design work began in May. With the help of some well-placed prods from Brian Behlendorf and Jason Robbins of CollabNet, and Greg Stein (at the time an independent developer active in the WebDAV/DeltaV specification process), Subversion quickly attracted a community of active developers. It turned out that many people had had the same frustrating experiences with CVS, and welcomed the chance to finally do something about it."
msgstr ""

#: ./build/en/book.xml:855(para) 
msgid "The original design team settled on some simple goals. They didn't want to break new ground in version control methodology, they just wanted to fix CVS. They decided that Subversion would match CVS's features, and preserve the same development model, but not duplicate CVS's most obvious flaws. And although it did not need to be a drop-in replacement for CVS, it should be similar enough that any CVS user could make the switch with little effort."
msgstr ""

#: ./build/en/book.xml:864(para) 
msgid "After fourteen months of coding, Subversion became <quote>self-hosting</quote> on August 31, 2001. That is, Subversion developers stopped using CVS to manage Subversion's own source code, and started using Subversion instead."
msgstr ""

#: ./build/en/book.xml:869(para) 
msgid "While CollabNet started the project, and still funds a large chunk of the work (it pays the salaries of a few full-time Subversion developers), Subversion is run like most open-source projects, governed by a loose, transparent set of rules that encourage meritocracy. CollabNet's copyright license is fully compliant with the Debian Free Software Guidelines. In other words, anyone is free to download, modify, and redistribute Subversion as he pleases; no permission from CollabNet or anyone else is required."
msgstr ""

#: ./build/en/book.xml:884(title) 
msgid "Subversion's Features"
msgstr ""

#: ./build/en/book.xml:886(para) 
msgid "When discussing the features that Subversion brings to the version control table, it is often helpful to speak of them in terms of how they improve upon CVS's design. If you're not familiar with CVS, you may not understand all of these features. And if you're not familiar with version control at all, your eyes may glaze over unless you first read <xref linkend=\"svn.basic\"/>, in which we provide a gentle introduction to version control."
msgstr ""

#: ./build/en/book.xml:894(para) 
msgid "Subversion provides:"
msgstr ""

#: ./build/en/book.xml:898(term) 
msgid "Directory versioning"
msgstr ""

#: ./build/en/book.xml:900(para) 
msgid "CVS only tracks the history of individual files, but Subversion implements a <quote>virtual</quote> versioned filesystem that tracks changes to whole directory trees over time. Files <emphasis>and</emphasis> directories are versioned."
msgstr ""

#: ./build/en/book.xml:909(term) 
msgid "True version history"
msgstr ""

#: ./build/en/book.xml:911(para) 
msgid "Since CVS is limited to file versioning, operations such as copies and renames—which might happen to files, but which are really changes to the contents of some containing directory—aren't supported in CVS. Additionally, in CVS you cannot replace a versioned file with some new thing of the same name without the new item inheriting the history of the old—perhaps completely unrelated—file. With Subversion, you can add, delete, copy, and rename both files and directories. And every newly added file begins with a fresh, clean history all its own."
msgstr ""

#: ./build/en/book.xml:926(term) 
msgid "Atomic commits"
msgstr ""

#: ./build/en/book.xml:928(para) 
msgid "A collection of modifications either goes into the repository completely, or not at all. This allows developers to construct and commit changes as logical chunks, and prevents problems that can occur when only a portion of a set of changes is successfully sent to the repository."
msgstr ""

#: ./build/en/book.xml:938(term) 
msgid "Versioned metadata"
msgstr ""

#: ./build/en/book.xml:940(para) 
msgid "Each file and directory has a set of properties—keys and their values—associated with it. You can create and store any arbitrary key/value pairs you wish. Properties are versioned over time, just like file contents."
msgstr ""

#: ./build/en/book.xml:949(term) 
msgid "Choice of network layers"
msgstr ""

#: ./build/en/book.xml:951(para) 
msgid "Subversion has an abstracted notion of repository access, making it easy for people to implement new network mechanisms. Subversion can plug into the Apache HTTP Server as an extension module. This gives Subversion a big advantage in stability and interoperability, and instant access to existing features provided by that server—authentication, authorization, wire compression, and so on. A more lightweight, standalone Subversion server process is also available. This server speaks a custom protocol which can be easily tunneled over SSH."
msgstr ""

#: ./build/en/book.xml:966(term) 
msgid "Consistent data handling"
msgstr ""

#: ./build/en/book.xml:968(para) 
msgid "Subversion expresses file differences using a binary differencing algorithm, which works identically on both text (human-readable) and binary (human-unreadable) files. Both types of files are stored equally compressed in the repository, and differences are transmitted in both directions across the network."
msgstr ""

#: ./build/en/book.xml:978(term) 
msgid "Efficient branching and tagging"
msgstr ""

#: ./build/en/book.xml:980(para) 
msgid "The cost of branching and tagging need not be proportional to the project size. Subversion creates branches and tags by simply copying the project, using a mechanism similar to a hard-link. Thus these operations take only a very small, constant amount of time."
msgstr ""

#: ./build/en/book.xml:990(term) 
msgid "Hackability"
msgstr ""

#: ./build/en/book.xml:992(para) 
msgid "Subversion has no historical baggage; it is implemented as a collection of shared C libraries with well-defined APIs. This makes Subversion extremely maintainable and usable by other applications and languages."
msgstr ""

#: ./build/en/book.xml:1007(title) ./build/en/book.xml:1014(title) 
msgid "Subversion's Architecture"
msgstr ""

#: ./build/en/book.xml:1009(para) 
msgid "<xref linkend=\"svn.intro.architecture.dia-1\"/> illustrates a <quote>mile-high</quote> view of Subversion's design."
msgstr ""

#: ./build/en/book.xml:1018(para) 
msgid "On one end is a Subversion repository that holds all of your versioned data. On the other end is your Subversion client program, which manages local reflections of portions of that versioned data (called <quote>working copies</quote>). Between these extremes are multiple routes through various Repository Access (RA) layers. Some of these routes go across computer networks and through network servers which then access the repository. Others bypass the network altogether and access the repository directly."
msgstr ""

#: ./build/en/book.xml:1033(title) 
msgid "Subversion's Components"
msgstr ""

#: ./build/en/book.xml:1035(para) 
msgid "Subversion, once installed, has a number of different pieces. The following is a quick overview of what you get. Don't be alarmed if the brief descriptions leave you scratching your head—there are <emphasis>plenty</emphasis> more pages in this book devoted to alleviating that confusion."
msgstr ""

#: ./build/en/book.xml:1043(term) ./build/en/book.xml:18147(primary) ./build/en/book.xml:18253(primary) ./build/en/book.xml:18323(primary) ./build/en/book.xml:18408(primary) ./build/en/book.xml:18545(primary) ./build/en/book.xml:18623(primary) ./build/en/book.xml:18761(primary) ./build/en/book.xml:18936(primary) ./build/en/book.xml:19049(primary) ./build/en/book.xml:19301(primary) ./build/en/book.xml:19415(primary) ./build/en/book.xml:19467(primary) ./build/en/book.xml:19569(primary) ./build/en/book.xml:19730(primary) ./build/en/book.xml:19842(primary) ./build/en/book.xml:19942(primary) ./build/en/book.xml:20186(primary) ./build/en/book.xml:20307(primary) ./build/en/book.xml:20393(primary) ./build/en/book.xml:20507(primary) ./build/en/book.xml:20585(primary) ./build/en/book.xml:20661(primary) ./build/en/book.xml:20743(primary) ./build/en/book.xml:20830(primary) ./build/en/book.xml:20965(primary) ./build/en/book.xml:21054(primary) ./build/en/book.xml:21158(primary) ./build/en/book.xml:21563(primary) ./build/en/book.xml:21723(primary) ./build/en/book.xml:21816(primary) 
msgid "svn"
msgstr ""

#: ./build/en/book.xml:1045(para) 
msgid "The command-line client program."
msgstr ""

#: ./build/en/book.xml:1050(term) ./build/en/book.xml:24024(command) ./build/en/book.xml:24029(primary) ./build/en/book.xml:24033(refname) 
msgid "svnversion"
msgstr ""

#: ./build/en/book.xml:1052(para) 
msgid "A program for reporting the state (in terms of revisions of the items present) of a working copy."
msgstr ""

#: ./build/en/book.xml:1058(term) ./build/en/book.xml:10734(title) ./build/en/book.xml:22908(command) ./build/en/book.xml:22998(primary) ./build/en/book.xml:23044(primary) ./build/en/book.xml:23102(primary) ./build/en/book.xml:23201(primary) ./build/en/book.xml:23247(primary) ./build/en/book.xml:23318(primary) ./build/en/book.xml:23365(primary) ./build/en/book.xml:23396(primary) ./build/en/book.xml:23461(primary) ./build/en/book.xml:23512(primary) ./build/en/book.xml:23564(primary) ./build/en/book.xml:23609(primary) ./build/en/book.xml:23664(primary) ./build/en/book.xml:23730(primary) ./build/en/book.xml:23784(primary) ./build/en/book.xml:23823(primary) 
msgid "svnlook"
msgstr ""

#: ./build/en/book.xml:1060(para) 
msgid "A tool for directly inspecting a Subversion repository."
msgstr ""

#: ./build/en/book.xml:1065(term) ./build/en/book.xml:10701(title) ./build/en/book.xml:21967(command) ./build/en/book.xml:22102(primary) ./build/en/book.xml:22165(primary) ./build/en/book.xml:22205(primary) ./build/en/book.xml:22315(primary) ./build/en/book.xml:22347(primary) ./build/en/book.xml:22389(primary) ./build/en/book.xml:22421(primary) ./build/en/book.xml:22469(primary) ./build/en/book.xml:22535(primary) ./build/en/book.xml:22583(primary) ./build/en/book.xml:22623(primary) ./build/en/book.xml:22705(primary) ./build/en/book.xml:22751(primary) ./build/en/book.xml:22805(primary) ./build/en/book.xml:22865(primary) 
msgid "svnadmin"
msgstr ""

#: ./build/en/book.xml:1067(para) 
msgid "A tool for creating, tweaking or repairing a Subversion repository."
msgstr ""

#: ./build/en/book.xml:1073(term) ./build/en/book.xml:10859(title) 
msgid "svndumpfilter"
msgstr ""

#: ./build/en/book.xml:1075(para) 
msgid "A program for filtering Subversion repository dump streams."
msgstr ""

#: ./build/en/book.xml:1081(term) ./build/en/book.xml:16483(term) ./build/en/book.xml:24178(command) ./build/en/book.xml:24183(literal) 
msgid "mod_dav_svn"
msgstr ""

#: ./build/en/book.xml:1083(para) 
msgid "A plug-in module for the Apache HTTP Server, used to make your repository available to others over a network."
msgstr ""

#: ./build/en/book.xml:1090(term) ./build/en/book.xml:1624(literal) ./build/en/book.xml:12672(entry) ./build/en/book.xml:23864(command) 
msgid "svnserve"
msgstr ""

#: ./build/en/book.xml:1092(para) 
msgid "A custom standalone server program, runnable as a daemon process or invokable by SSH; another way to make your repository available to others over a network."
msgstr ""

#: ./build/en/book.xml:1099(term) ./build/en/book.xml:10912(title) 
msgid "svnsync"
msgstr ""

#: ./build/en/book.xml:1101(para) 
msgid "A program for incrementally mirroring one repository to another over a network."
msgstr ""

#: ./build/en/book.xml:1108(para) 
msgid "Assuming you have Subversion installed correctly, you should be ready to start. The next two chapters will walk you through the use of <command moreinfo=\"none\">svn</command>, Subversion's command-line client program."
msgstr ""

#: ./build/en/book.xml:1126(title) 
msgid "Fundamental Concepts"
msgstr ""

#: ./build/en/book.xml:1128(para) 
msgid "This chapter is a short, casual introduction to Subversion. If you're new to version control, this chapter is definitely for you. We begin with a discussion of general version control concepts, work our way into the specific ideas behind Subversion, and show some simple examples of Subversion in use."
msgstr ""

#: ./build/en/book.xml:1135(para) 
msgid "Even though the examples in this chapter show people sharing collections of program source code, keep in mind that Subversion can manage any sort of file collection—it's not limited to helping computer programmers."
msgstr ""

#: ./build/en/book.xml:1145(title) 
msgid "The Repository"
msgstr ""

#: ./build/en/book.xml:1147(para) 
msgid "Subversion is a centralized system for sharing information. At its core is a repository, which is a central store of data. The repository stores information in the form of a <firstterm>filesystem tree</firstterm>—a typical hierarchy of files and directories. Any number of <firstterm>clients</firstterm> connect to the repository, and then read or write to these files. By writing data, a client makes the information available to others; by reading data, the client receives information from others. <xref linkend=\"svn.basic.repository.dia-1\"/> illustrates this."
msgstr ""

#: ./build/en/book.xml:1158(title) 
msgid "A typical client/server system"
msgstr ""

#: ./build/en/book.xml:1162(para) 
msgid "So why is this interesting? So far, this sounds like the definition of a typical file server. And indeed, the repository <emphasis>is</emphasis> a kind of file server, but it's not your usual breed. What makes the Subversion repository special is that <emphasis>it remembers every change</emphasis> ever written to it: every change to every file, and even changes to the directory tree itself, such as the addition, deletion, and rearrangement of files and directories."
msgstr ""

#: ./build/en/book.xml:1171(para) 
msgid "When a client reads data from the repository, it normally sees only the latest version of the filesystem tree. But the client also has the ability to view <emphasis>previous</emphasis> states of the filesystem. For example, a client can ask historical questions like, <quote>What did this directory contain last Wednesday?</quote> or <quote>Who was the last person to change this file, and what changes did he make?</quote> These are the sorts of questions that are at the heart of any <firstterm>version control system</firstterm>: systems that are designed to record and track changes to data over time."
msgstr ""

#: ./build/en/book.xml:1189(title) 
msgid "Versioning Models"
msgstr ""

#: ./build/en/book.xml:1191(para) 
msgid "The core mission of a version control system is to enable collaborative editing and sharing of data. But different systems use different strategies to achieve this. It's important to understand these different strategies for a couple of reasons. First, it will help you compare and contrast existing version control systems, in case you encounter other systems similar to Subversion. Beyond that, it will also help you make more effective use of Subversion, since Subversion itself supports a couple of different ways of working."
msgstr ""

#: ./build/en/book.xml:1203(title) 
msgid "The Problem of File-Sharing"
msgstr ""

#: ./build/en/book.xml:1205(para) 
msgid "All version control systems have to solve the same fundamental problem: how will the system allow users to share information, but prevent them from accidentally stepping on each other's feet? It's all too easy for users to accidentally overwrite each other's changes in the repository."
msgstr ""

#: ./build/en/book.xml:1212(para) 
msgid "Consider the scenario shown in <xref linkend=\"svn.basic.vsn-models.problem-sharing.dia-1\"/>. Suppose we have two co-workers, Harry and Sally. They each decide to edit the same repository file at the same time. If Harry saves his changes to the repository first, then it's possible that (a few moments later) Sally could accidentally overwrite them with her own new version of the file. While Harry's version of the file won't be lost forever (because the system remembers every change), any changes Harry made <emphasis>won't</emphasis> be present in Sally's newer version of the file, because she never saw Harry's changes to begin with. Harry's work is still effectively lost—or at least missing from the latest version of the file—and probably by accident. This is definitely a situation we want to avoid!"
msgstr ""

#: ./build/en/book.xml:1228(title) 
msgid "The problem to avoid"
msgstr ""

#: ./build/en/book.xml:1236(title) 
msgid "The Lock-Modify-Unlock Solution"
msgstr ""

#: ./build/en/book.xml:1238(para) 
msgid "Many version control systems use a <firstterm>lock-modify-unlock</firstterm> model to address the problem of many authors clobbering each other's work. In this model, the repository allows only one person to change a file at a time. This exclusivity policy is managed using locks. Harry must <quote>lock</quote> a file before he can begin making changes to it. If Harry has locked a file, then Sally cannot also lock it, and therefore cannot make any changes to that file. All she can do is read the file, and wait for Harry to finish his changes and release his lock. After Harry unlocks the file, Sally can take her turn by locking and editing the file. <xref linkend=\"svn.basic.vsn-models.lock-unlock.dia-1\"/> demonstrates this simple solution."
msgstr ""

#: ./build/en/book.xml:1253(title) 
msgid "The lock-modify-unlock solution"
msgstr ""

#: ./build/en/book.xml:1257(para) 
msgid "The problem with the lock-modify-unlock model is that it's a bit restrictive, and often becomes a roadblock for users:"
msgstr ""

#: ./build/en/book.xml:1263(para) 
msgid "<emphasis>Locking may cause administrative problems.</emphasis> Sometimes Harry will lock a file and then forget about it. Meanwhile, because Sally is still waiting to edit the file, her hands are tied. And then Harry goes on vacation. Now Sally has to get an administrator to release Harry's lock. The situation ends up causing a lot of unnecessary delay and wasted time."
msgstr ""

#: ./build/en/book.xml:1275(para) 
msgid "<emphasis>Locking may cause unnecessary serialization.</emphasis> What if Harry is editing the beginning of a text file, and Sally simply wants to edit the end of the same file? These changes don't overlap at all. They could easily edit the file simultaneously, and no great harm would come, assuming the changes were properly merged together. There's no need for them to take turns in this situation."
msgstr ""

#: ./build/en/book.xml:1288(para) 
msgid "<emphasis>Locking may create a false sense of security.</emphasis> Suppose Harry locks and edits file A, while Sally simultaneously locks and edits file B. But what if A and B depend on one another, and the changes made to each are semantically incompatible? Suddenly A and B don't work together anymore. The locking system was powerless to prevent the problem—yet it somehow provided a false sense of security. It's easy for Harry and Sally to imagine that by locking files, each is beginning a safe, insulated task, and thus not bother discussing their incompatible changes early on. Locking often becomes a substitute for real communication."
msgstr ""

#: ./build/en/book.xml:1309(title) 
msgid "The Copy-Modify-Merge Solution"
msgstr ""

#: ./build/en/book.xml:1311(para) 
msgid "Subversion, CVS, and a number of other version control systems use a <firstterm>copy-modify-merge</firstterm> model as an alternative to locking. In this model, each user's client contacts the project repository and creates a personal <firstterm>working copy</firstterm>—a local reflection of the repository's files and directories. Users then work simultaneously and independently, modifying their private copies. Finally, the private copies are merged together into a new, final version. The version control system often assists with the merging, but ultimately a human being is responsible for making it happen correctly."
msgstr ""

#: ./build/en/book.xml:1323(para) 
msgid "Here's an example. Say that Harry and Sally each create working copies of the same project, copied from the repository. They work concurrently, and make changes to the same file A within their copies. Sally saves her changes to the repository first. When Harry attempts to save his changes later, the repository informs him that his file A is <firstterm>out-of-date</firstterm>. In other words, that file A in the repository has somehow changed since he last copied it. So Harry asks his client to <firstterm>merge</firstterm> any new changes from the repository into his working copy of file A. Chances are that Sally's changes don't overlap with his own; so once he has both sets of changes integrated, he saves his working copy back to the repository. <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-1\"/> and <xref linkend=\"svn.basic.vsn-models.copy-merge.dia-2\"/> show this process."
msgstr ""

#: ./build/en/book.xml:1339(title) 
msgid "The copy-modify-merge solution"
msgstr ""

#: ./build/en/book.xml:1344(title) 
msgid "The copy-modify-merge solution (continued)"
msgstr ""

#: ./build/en/book.xml:1348(para) 
msgid "But what if Sally's changes <emphasis>do</emphasis> overlap with Harry's changes? What then? This situation is called a <firstterm>conflict</firstterm>, and it's usually not much of a problem. When Harry asks his client to merge the latest repository changes into his working copy, his copy of file A is somehow flagged as being in a state of conflict: he'll be able to see both sets of conflicting changes, and manually choose between them. Note that software can't automatically resolve conflicts; only humans are capable of understanding and making the necessary intelligent choices. Once Harry has manually resolved the overlapping changes—perhaps after a discussion with Sally—he can safely save the merged file back to the repository."
msgstr ""

#: ./build/en/book.xml:1362(para) 
msgid "The copy-modify-merge model may sound a bit chaotic, but in practice, it runs extremely smoothly. Users can work in parallel, never waiting for one another. When they work on the same files, it turns out that most of their concurrent changes don't overlap at all; conflicts are infrequent. And the amount of time it takes to resolve conflicts is usually far less than the time lost by a locking system."
msgstr ""

#: ./build/en/book.xml:1370(para) 
msgid "In the end, it all comes down to one critical factor: user communication. When users communicate poorly, both syntactic and semantic conflicts increase. No system can force users to communicate perfectly, and no system can detect semantic conflicts. So there's no point in being lulled into a false promise that a locking system will somehow prevent conflicts; in practice, locking seems to inhibit productivity more than anything else."
msgstr ""

#: ./build/en/book.xml:1380(title) 
msgid "When Locking is Necessary"
msgstr ""

#: ./build/en/book.xml:1382(para) 
msgid "While the lock-modify-unlock model is considered generally harmful to collaboration, there are still times when locking is appropriate."
msgstr ""

#: ./build/en/book.xml:1386(para) 
msgid "The copy-modify-merge model is based on the assumption that files are contextually mergeable: that is, that the majority of the files in the repository are line-based text files (such as program source code). But for files with binary formats, such as artwork or sound, it's often impossible to merge conflicting changes. In these situations, it really is necessary to users to take strict turns when changing the file. Without serialized access, somebody ends up wasting time on changes that are ultimately discarded."
msgstr ""

#: ./build/en/book.xml:1397(para) 
msgid "While Subversion is still primarily a copy-modify-merge system, it still recognizes the need to lock an occasional file ands provide mechanisms for this. This feature is discussed later in this book, in <xref linkend=\"svn.advanced.locking\"/>."
msgstr ""

#: ./build/en/book.xml:1415(title) 
msgid "Subversion in Action"
msgstr ""

#: ./build/en/book.xml:1417(para) 
msgid "It's time to move from the abstract to the concrete. In this section, we'll show real examples of Subversion being used."
msgstr ""

#: ./build/en/book.xml:1423(title) 
msgid "Subversion Repository URLs"
msgstr ""

#: ./build/en/book.xml:1425(para) 
msgid "Throughout this book, Subversion uses URLs to identify versioned files and directories in Subversion repositories. For the most part, these URLs use the standard syntax, allowing for server names and port numbers to be specified as part of the URL:"
msgstr ""

#: ./build/en/book.xml:1431(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com:9834/repos\n…\n"
msgstr ""

#: ./build/en/book.xml:1436(para) 
msgid "But there are some nuances in Subversion's handling of URLs that are notable. For example, URLs containing the <literal moreinfo=\"none\">file://</literal> access method (used for local repositories) must, in accordance with convention, have either a server name of <literal moreinfo=\"none\">localhost</literal> or no server name at all:"
msgstr ""

#: ./build/en/book.xml:1443(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///path/to/repos\n…\n$ svn checkout file://localhost/path/to/repos\n…\n"
msgstr ""

#: ./build/en/book.xml:1450(para) 
msgid "Also, users of the <literal moreinfo=\"none\">file://</literal> scheme on Windows platforms will need to use an unofficially <quote>standard</quote> syntax for accessing repositories that are on the same machine, but on a different drive than the client's current working drive. Either of the two following URL path syntaxes will work where <literal moreinfo=\"none\">X</literal> is the drive on which the repository resides:"
msgstr ""

#: ./build/en/book.xml:1459(screen) 
#, no-wrap
msgid "\nC:\\&gt; svn checkout file:///X:/path/to/repos\n…\nC:\\&gt; svn checkout \"file:///X|/path/to/repos\"\n…\n"
msgstr ""

#: ./build/en/book.xml:1466(para) 
msgid "In the second syntax, you need to quote the URL so that the vertical bar character is not interpreted as a pipe. Also, note that a URL uses forward slashes even though the native (non-URL) form of a path on Windows uses backslashes."
msgstr ""

#: ./build/en/book.xml:1472(para) 
msgid "Subversion's <literal moreinfo=\"none\">file://</literal> URLs cannot be used in a regular web browser the way typical <literal moreinfo=\"none\">file://</literal> URLs can. When you attempt to view a <literal moreinfo=\"none\">file://</literal> URL in a regular web browser, it reads and displays the contents of the file at that location by examining the filesystem directly. However, Subversion's resources exist in a virtual filesystem (see <xref linkend=\"svn.developer.layerlib.repos\"/>), and your browser will not understand how to interact with that filesystem."
msgstr ""

#: ./build/en/book.xml:1483(para) 
msgid "Finally, it should be noted that the Subversion client will automatically encode URLs as necessary, just like a web browser does. For example, if a URL contains a space or upper-ASCII character:"
msgstr ""

#: ./build/en/book.xml:1488(screen) 
#, no-wrap
msgid "\n$ svn checkout \"http://host/path with space/project/españa\"\n"
msgstr ""

#: ./build/en/book.xml:1492(para) 
msgid "…then Subversion will escape the unsafe characters and behave as if you had typed:"
msgstr ""

#: ./build/en/book.xml:1495(screen) 
#, no-wrap
msgid "\n$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a\n"
msgstr ""

#: ./build/en/book.xml:1499(para) 
msgid "If the URL contains spaces, be sure to place it within quote marks, so that your shell treats the whole thing as a single argument to the <command moreinfo=\"none\">svn</command> program."
msgstr ""

#: ./build/en/book.xml:1507(title) 
msgid "Working Copies"
msgstr ""

#: ./build/en/book.xml:1509(para) 
msgid "You've already read about working copies; now we'll demonstrate how the Subversion client creates and uses them."
msgstr ""

#: ./build/en/book.xml:1513(para) 
msgid "A Subversion working copy is an ordinary directory tree on your local system, containing a collection of files. You can edit these files however you wish, and if they're source code files, you can compile your program from them in the usual way. Your working copy is your own private work area: Subversion will never incorporate other people's changes, nor make your own changes available to others, until you explicitly tell it to do so. You can even have multiple working copies of the same project."
msgstr ""

#: ./build/en/book.xml:1523(para) 
msgid "After you've made some changes to the files in your working copy and verified that they work properly, Subversion provides you with commands to <quote>publish</quote> your changes to the other people working with you on your project (by writing to the repository). If other people publish their own changes, Subversion provides you with commands to merge those changes into your working directory (by reading from the repository)."
msgstr ""

#: ./build/en/book.xml:1532(para) 
msgid "A working copy also contains some extra files, created and maintained by Subversion, to help it carry out these commands. In particular, each directory in your working copy contains a subdirectory named <filename moreinfo=\"none\">.svn</filename>, also known as the working copy <firstterm>administrative directory</firstterm>. The files in each administrative directory help Subversion recognize which files contain unpublished changes, and which files are out-of-date with respect to others' work."
msgstr ""

#: ./build/en/book.xml:1542(para) 
msgid "A typical Subversion repository often holds the files (or source code) for several projects; usually, each project is a subdirectory in the repository's filesystem tree. In this arrangement, a user's working copy will usually correspond to a particular subtree of the repository."
msgstr ""

#: ./build/en/book.xml:1548(para) 
msgid "For example, suppose you have a repository that contains two software projects, <literal moreinfo=\"none\">paint</literal> and <literal moreinfo=\"none\">calc</literal>. Each project lives in its own top-level subdirectory, as shown in <xref linkend=\"svn.basic.in-action.wc.dia-1\"/>."
msgstr ""

#: ./build/en/book.xml:1554(title) 
msgid "The repository's filesystem"
msgstr ""

#: ./build/en/book.xml:1558(para) 
msgid "To get a working copy, you must <firstterm>check out</firstterm> some subtree of the repository. (The term <quote>check out</quote> may sound like it has something to do with locking or reserving resources, but it doesn't; it simply creates a private copy of the project for you.) For example, if you check out <filename moreinfo=\"none\">/calc</filename>, you will get a working copy like this:"
msgstr ""

#: ./build/en/book.xml:1566(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/repos/calc\nA    calc/Makefile\nA    calc/integer.c\nA    calc/button.c\nChecked out revision 56.\n\n$ ls -A calc\nMakefile  integer.c  button.c  .svn/\n"
msgstr ""

#: ./build/en/book.xml:1577(para) 
msgid "The list of letter A's indicates that Subversion is adding a number of items to your working copy. You now have a personal copy of the repository's <filename moreinfo=\"none\">/calc</filename> directory, with one additional entry—<filename moreinfo=\"none\">.svn</filename>—which holds the extra information needed by Subversion, as mentioned earlier."
msgstr ""

#: ./build/en/book.xml:1586(title) 
msgid "Repository URLs"
msgstr ""

#: ./build/en/book.xml:1588(para) 
msgid "Subversion repositories can be accessed through many different methods—on local disk, or through various network protocols, depending on how your administrator has set things up for you. A repository location, however, is always a URL. <xref linkend=\"svn.basic.in-action.wc.tbl-1\"/> describes how different URL schemas map to the available access methods."
msgstr ""

#: ./build/en/book.xml:1598(title) 
msgid "Repository Access URLs"
msgstr ""

#: ./build/en/book.xml:1602(entry) 
msgid "Schema"
msgstr ""

#: ./build/en/book.xml:1603(entry) 
msgid "Access Method"
msgstr ""

#: ./build/en/book.xml:1608(literal) 
msgid "file:///"
msgstr ""

#: ./build/en/book.xml:1609(entry) 
msgid "direct repository access (on local disk)"
msgstr ""

#: ./build/en/book.xml:1612(literal) ./build/en/book.xml:1618(literal) 
msgid "http://"
msgstr ""

#: ./build/en/book.xml:1613(entry) 
msgid "access via WebDAV protocol to Subversion-aware Apache server"
msgstr ""

#: ./build/en/book.xml:1617(literal) 
msgid "https://"
msgstr ""

#: ./build/en/book.xml:1618(entry) 
msgid "same as <placeholder-1/>, but with SSL encryption."
msgstr ""

#: ./build/en/book.xml:1622(literal) ./build/en/book.xml:1628(literal) 
msgid "svn://"
msgstr ""

#: ./build/en/book.xml:1623(entry) 
msgid "access via custom protocol to an <placeholder-1/> server"
msgstr ""

#: ./build/en/book.xml:1627(literal) 
msgid "svn+ssh://"
msgstr ""

#: ./build/en/book.xml:1628(entry) 
msgid "same as <placeholder-1/>, but through an SSH tunnel."
msgstr ""

#: ./build/en/book.xml:1635(para) 
msgid "For more information on how Subversion parses URLs, see <xref linkend=\"svn.advanced.reposurls\"/>. For more information on the different types of network servers available for Subversion, see <xref linkend=\"svn.serverconfig\"/>."
msgstr ""

#: ./build/en/book.xml:1643(para) 
msgid "Suppose you make changes to <filename moreinfo=\"none\">button.c</filename>. Since the <filename moreinfo=\"none\">.svn</filename> directory remembers the file's modification date and original contents, Subversion can tell that you've changed the file. However, Subversion does not make your changes public until you explicitly tell it to. The act of publishing your changes is more commonly known as <firstterm>committing</firstterm> (or <firstterm>checking in</firstterm>) changes to the repository."
msgstr ""

#: ./build/en/book.xml:1652(para) 
msgid "To publish your changes to others, you can use Subversion's <command moreinfo=\"none\">commit</command> command."
msgstr ""

#: ./build/en/book.xml:1655(screen) 
#, no-wrap
msgid "\n$ svn commit button.c -m \"Fixed a typo in button.c.\"\nSending        button.c\nTransmitting file data .\nCommitted revision 57.\n"
msgstr ""

#: ./build/en/book.xml:1662(para) 
msgid "Now your changes to <filename moreinfo=\"none\">button.c</filename> have been committed to the repository, with a note describing your change (namely, that you fixed a typo). If another user checks out a working copy of <filename moreinfo=\"none\">/calc</filename>, they will see your changes in the latest version of the file."
msgstr ""

#: ./build/en/book.xml:1669(para) 
msgid "Suppose you have a collaborator, Sally, who checked out a working copy of <filename moreinfo=\"none\">/calc</filename> at the same time you did. When you commit your change to <filename moreinfo=\"none\">button.c</filename>, Sally's working copy is left unchanged; Subversion only modifies working copies at the user's request."
msgstr ""

#: ./build/en/book.xml:1676(para) 
msgid "To bring her project up to date, Sally can ask Subversion to <firstterm>update</firstterm> her working copy, by using the Subversion <command moreinfo=\"none\">update</command> command. This will incorporate your changes into her working copy, as well as any others that have been committed since she checked it out."
msgstr ""

#: ./build/en/book.xml:1683(screen) 
#, no-wrap
msgid "\n$ pwd\n/home/sally/calc\n\n$ ls -A \n.svn/ Makefile integer.c button.c\n\n$ svn update\nU    button.c\nUpdated to revision 57.\n"
msgstr ""

#: ./build/en/book.xml:1695(para) 
msgid "The output from the <command moreinfo=\"none\">svn update</command> command indicates that Subversion updated the contents of <filename moreinfo=\"none\">button.c</filename>. Note that Sally didn't need to specify which files to update; Subversion uses the information in the <filename moreinfo=\"none\">.svn</filename> directory, and further information in the repository, to decide which files need to be brought up to date."
msgstr ""

#: ./build/en/book.xml:1708(title) 
msgid "Revisions"
msgstr ""

#: ./build/en/book.xml:1710(para) 
msgid "An <command moreinfo=\"none\">svn commit</command> operation publishes changes to any number of files and directories as a single atomic transaction. In your working copy, you can change files' contents, create, delete, rename and copy files and directories, and then commit a complete set of changes as an atomic transaction."
msgstr ""

#: ./build/en/book.xml:1717(para) 
msgid "By <quote>atomic transaction</quote>, we mean simply this: either all of the changes happen in the repository, or none of them happen. Subversion tries to retain this atomicity in the face of program crashes, system crashes, network problems, and other users' actions."
msgstr ""

#: ./build/en/book.xml:1723(para) 
msgid "Each time the repository accepts a commit, this creates a new state of the filesystem tree, called a <firstterm>revision</firstterm>. Each revision is assigned a unique natural number, one greater than the number of the previous revision. The initial revision of a freshly created repository is numbered zero, and consists of nothing but an empty root directory."
msgstr ""

#: ./build/en/book.xml:1731(para) 
msgid "<xref linkend=\"svn.basic.in-action.revs.dia-1\"/> illustrates a nice way to visualize the repository. Imagine an array of revision numbers, starting at 0, stretching from left to right. Each revision number has a filesystem tree hanging below it, and each tree is a <quote>snapshot</quote> of the way the repository looked after a commit."
msgstr ""

#: ./build/en/book.xml:1739(title) 
msgid "The repository"
msgstr ""

#: ./build/en/book.xml:1744(title) 
msgid "Global Revision Numbers"
msgstr ""

#: ./build/en/book.xml:1746(para) 
msgid "Unlike most version control systems, Subversion's revision numbers apply to <emphasis>entire trees</emphasis>, not individual files. Each revision number selects an entire tree, a particular state of the repository after some committed change. Another way to think about it is that revision N represents the state of the repository filesystem after the Nth commit. When Subversion users talk about <quote>revision 5 of <filename moreinfo=\"none\">foo.c</filename></quote>, they really mean <quote><filename moreinfo=\"none\">foo.c</filename> as it appears in revision 5.</quote> Notice that in general, revisions N and M of a file do <emphasis>not</emphasis> necessarily differ! Many other version control systems use per-file revision numbers, so this concept may seem unusual at first. (Former CVS users might want to see <xref linkend=\"svn.forcvs\"/> for more details.)"
msgstr ""

#: ./build/en/book.xml:1764(para) 
msgid "It's important to note that working copies do not always correspond to any single revision in the repository; they may contain files from several different revisions. For example, suppose you check out a working copy from a repository whose most recent revision is 4:"
msgstr ""

#: ./build/en/book.xml:1770(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:4\n"
msgstr ""

#: ./build/en/book.xml:1776(para) 
msgid "At the moment, this working directory corresponds exactly to revision 4 in the repository. However, suppose you make a change to <filename moreinfo=\"none\">button.c</filename>, and commit that change. Assuming no other commits have taken place, your commit will create revision 5 of the repository, and your working copy will now look like this:"
msgstr ""

#: ./build/en/book.xml:1783(screen) 
#, no-wrap
msgid "\ncalc/Makefile:4\n     integer.c:4\n     button.c:5\n"
msgstr ""

#: ./build/en/book.xml:1789(para) 
msgid "Suppose that, at this point, Sally commits a change to <filename moreinfo=\"none\">integer.c</filename>, creating revision 6. If you use <command moreinfo=\"none\">svn update</command> to bring your working copy up to date, then it will look like this:"
msgstr ""

#: ./build/en/book.xml:1794(screen) 
#, no-wrap
msgid "\ncalc/Makefile:6\n     integer.c:6\n     button.c:6\n"
msgstr ""

#: ./build/en/book.xml:1800(para) 
msgid "Sally's change to <filename moreinfo=\"none\">integer.c</filename> will appear in your working copy, and your change will still be present in <filename moreinfo=\"none\">button.c</filename>. In this example, the text of <filename moreinfo=\"none\">Makefile</filename> is identical in revisions 4, 5, and 6, but Subversion will mark your working copy of <filename moreinfo=\"none\">Makefile</filename> with revision 6 to indicate that it is still current. So, after you do a clean update at the top of your working copy, it will generally correspond to exactly one revision in the repository."
msgstr ""

#: ./build/en/book.xml:1815(title) 
msgid "How Working Copies Track the Repository"
msgstr ""

#: ./build/en/book.xml:1817(para) 
msgid "For each file in a working directory, Subversion records two essential pieces of information in the <filename moreinfo=\"none\">.svn/</filename> administrative area:"
msgstr ""

#: ./build/en/book.xml:1824(para) 
msgid "what revision your working file is based on (this is called the file's <firstterm>working revision</firstterm>), and"
msgstr ""

#: ./build/en/book.xml:1830(para) 
msgid "a timestamp recording when the local copy was last updated by the repository."
msgstr ""

#: ./build/en/book.xml:1835(para) 
msgid "Given this information, by talking to the repository, Subversion can tell which of the following four states a working file is in:"
msgstr ""

#: ./build/en/book.xml:1841(term) 
msgid "Unchanged, and current"
msgstr ""

#: ./build/en/book.xml:1844(para) 
msgid "The file is unchanged in the working directory, and no changes to that file have been committed to the repository since its working revision. An <command moreinfo=\"none\">svn commit</command> of the file will do nothing, and an <command moreinfo=\"none\">svn update</command> of the file will do nothing."
msgstr ""

#: ./build/en/book.xml:1854(term) 
msgid "Locally changed, and current"
msgstr ""

#: ./build/en/book.xml:1857(para) 
msgid "The file has been changed in the working directory, and no changes to that file have been committed to the repository since you last updated. There are local changes that have not been committed to the repository, thus an <command moreinfo=\"none\">svn commit</command> of the file will succeed in publishing your changes, and an <command moreinfo=\"none\">svn update</command> of the file will do nothing."
msgstr ""

#: ./build/en/book.xml:1868(term) 
msgid "Unchanged, and out-of-date"
msgstr ""

#: ./build/en/book.xml:1871(para) 
msgid "The file has not been changed in the working directory, but it has been changed in the repository. The file should eventually be updated, to make it current with the latest public revision. An <command moreinfo=\"none\">svn commit</command> of the file will do nothing, and an <command moreinfo=\"none\">svn update</command> of the file will fold the latest changes into your working copy."
msgstr ""

#: ./build/en/book.xml:1882(term) 
msgid "Locally changed, and out-of-date"
msgstr ""

#: ./build/en/book.xml:1885(para) 
msgid "The file has been changed both in the working directory, and in the repository. An <command moreinfo=\"none\">svn commit</command> of the file will fail with an <quote>out-of-date</quote> error. The file should be updated first; an <command moreinfo=\"none\">svn update</command> command will attempt to merge the public changes with the local changes. If Subversion can't complete the merge in a plausible way automatically, it leaves it to the user to resolve the conflict."
msgstr ""

#: ./build/en/book.xml:1899(para) 
msgid "This may sound like a lot to keep track of, but the <command moreinfo=\"none\">svn status</command> command will show you the state of any item in your working copy. For more information on that command, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr ""

#: ./build/en/book.xml:1909(title) 
msgid "Mixed Revision Working Copies"
msgstr ""

#: ./build/en/book.xml:1911(para) 
msgid "As a general principle, Subversion tries to be as flexible as possible. One special kind of flexibility is the ability to have a working copy containing files and directories with a mix of different working revision numbers. Unfortunately, this flexibility tends to confuse a number of new users. If the earlier example showing mixed revisions perplexed you, here's a primer on both why the feature exists and how to make use of it."
msgstr ""

#: ./build/en/book.xml:1922(title) 
msgid "Updates and Commits are Separate"
msgstr ""

#: ./build/en/book.xml:1924(para) 
msgid "One of the fundamental rules of Subversion is that a <quote>push</quote> action does not cause a <quote>pull</quote>, nor the other way around. Just because you're ready to submit new changes to the repository doesn't mean you're ready to receive changes from other people. And if you have new changes still in progress, then <command moreinfo=\"none\">svn update</command> should gracefully merge repository changes into your own, rather than forcing you to publish them."
msgstr ""

#: ./build/en/book.xml:1934(para) 
msgid "The main side-effect of this rule is that it means a working copy has to do extra bookkeeping to track mixed revisions, and be tolerant of the mixture as well. It's made more complicated by the fact that directories themselves are versioned."
msgstr ""

#: ./build/en/book.xml:1940(para) 
msgid "For example, suppose you have a working copy entirely at revision 10. You edit the file <filename moreinfo=\"none\">foo.html</filename> and then perform an <command moreinfo=\"none\">svn commit</command>, which creates revision 15 in the repository. After the commit succeeds, many new users would expect the working copy to be entirely at revision 15, but that's not the case! Any number of changes might have happened in the repository between revisions 10 and 15. The client knows nothing of those changes in the repository, since you haven't yet run <command moreinfo=\"none\">svn update</command>, and <command moreinfo=\"none\">svn commit</command> doesn't pull down new changes. If, on the other hand, <command moreinfo=\"none\">svn commit</command><emphasis>were</emphasis> to automatically download the newest changes, then it would be possible to set the entire working copy to revision 15—but then we'd be breaking the fundamental rule of <quote>push</quote> and <quote>pull</quote> remaining separate actions. Therefore the only safe thing the Subversion client can do is mark the one file—<filename moreinfo=\"none\">foo.html</filename>—as being at revision 15. The rest of the working copy remains at revision 10. Only by running <command moreinfo=\"none\">svn update</command> can the latest changes be downloaded, and the whole working copy be marked as revision 15."
msgstr ""

#: ./build/en/book.xml:1969(title) 
msgid "Mixed revisions are normal"
msgstr ""

#: ./build/en/book.xml:1971(para) 
msgid "The fact is, <emphasis>every time</emphasis> you run <command moreinfo=\"none\">svn commit</command>, your working copy ends up with some mixture of revisions. The things you just committed are marked as having larger working revisions than everything else. After several commits (with no updates in-between) your working copy will contain a whole mixture of revisions. Even if you're the only person using the repository, you will still see this phenomenon. To examine your mixture of working revisions, use the <command moreinfo=\"none\">svn status --verbose</command> command (see <xref linkend=\"svn.tour.cycle.examine.status\"/> for more information.)"
msgstr ""

#: ./build/en/book.xml:1983(para) 
msgid "Often, new users are completely unaware that their working copy contains mixed revisions. This can be confusing, because many client commands are sensitive to the working revision of the item they're examining. For example, the <command moreinfo=\"none\">svn log</command> command is used to display the history of changes to a file or directory (see <xref linkend=\"svn.tour.history.log\"/>). When the user invokes this command on a working copy object, they expect to see the entire history of the object. But if the object's working revision is quite old (often because <command moreinfo=\"none\">svn update</command> hasn't been run in a long time), then the history of the <emphasis>older</emphasis> version of the object is shown."
msgstr ""

#: ./build/en/book.xml:2001(title) 
msgid "Mixed revisions are useful"
msgstr ""

#: ./build/en/book.xml:2003(para) 
msgid "If your project is sufficiently complex, you'll discover that it's sometimes nice to forcibly <quote>backdate</quote> portions of your working copy to an earlier revision; you'll learn how to do that in <xref linkend=\"svn.tour\"/>. Perhaps you'd like to test an earlier version of a sub-module contained in a subdirectory, or perhaps you'd like to figure out when a bug first came into existence in a specific file. This is the <quote>time machine</quote> aspect of a version control system — the feature which allows you to move any portion of your working copy forward and backward in history."
msgstr ""

#: ./build/en/book.xml:2019(title) 
msgid "Mixed revisions have limitations"
msgstr ""

#: ./build/en/book.xml:2021(para) 
msgid "However you make use of mixed revisions in your working copy, there are limitations to this flexibility."
msgstr ""

#: ./build/en/book.xml:2024(para) 
msgid "First, you cannot commit the deletion of a file or directory which isn't fully up-to-date. If a newer version of the item exists in the repository, your attempt to delete will be rejected, to prevent you from accidentally destroying changes you've not yet seen."
msgstr ""

#: ./build/en/book.xml:2030(para) 
msgid "Second, you cannot commit a metadata change to a directory unless it's fully up-to-date. You'll learn about attaching <quote>properties</quote> to items in <xref linkend=\"svn.advanced\"/>. A directory's working revision defines a specific set of entries and properties, and thus committing a property change to an out-of-date directory may destroy properties you've not yet seen."
msgstr ""

#: ./build/en/book.xml:2047(title) ./build/en/book.xml:3978(title) ./build/en/book.xml:9639(title) ./build/en/book.xml:12569(title) 
msgid "Summary"
msgstr ""

#: ./build/en/book.xml:2049(para) 
msgid "We've covered a number of fundamental Subversion concepts in this chapter:"
msgstr ""

#: ./build/en/book.xml:2054(para) 
msgid "We've introduced the notions of the central repository, the client working copy, and the array of repository revision trees."
msgstr ""

#: ./build/en/book.xml:2060(para) 
msgid "We've seen some simple examples of how two collaborators can use Subversion to publish and receive changes from one another, using the <quote>copy-modify-merge</quote> model."
msgstr ""

#: ./build/en/book.xml:2067(para) 
msgid "We've talked a bit about the way Subversion tracks and manages information in a working copy."
msgstr ""

#: ./build/en/book.xml:2073(para) 
msgid "At this point, you should have a good idea of how Subversion works in the most general sense. Armed with this knowledge, you should now be ready to move into the next chapter, which is a detailed tour of Subversion's commands and features."
msgstr ""

#: ./build/en/book.xml:2089(title) 
msgid "Basic Usage"
msgstr ""

#: ./build/en/book.xml:2091(para) 
msgid "Now we will go into the details of using Subversion. By the time you reach the end of this chapter, you will be able to perform all the tasks you need to use Subversion in a normal day's work. You'll start with getting your files into Subversion, followed by an initial checkout of your code. We'll then walk you through making changes and examining those changes. You'll also see how to bring changes made by others into your working copy, examine them, and work through any conflicts that might arise."
msgstr ""

#: ./build/en/book.xml:2101(para) 
msgid "Note that this chapter is not meant to be an exhaustive list of all Subversion's commands—rather, it's a conversational introduction to the most common Subversion tasks you'll encounter. This chapter assumes that you've read and understood <xref linkend=\"svn.basic\"/> and are familiar with the general model of Subversion. For a complete reference of all commands, see <xref linkend=\"svn.ref\"/>."
msgstr ""

#: ./build/en/book.xml:2114(title) ./build/en/book.xml:19422(refpurpose) ./build/en/book.xml:22321(refpurpose) ./build/en/book.xml:23371(refpurpose) 
msgid "Help!"
msgstr ""

#: ./build/en/book.xml:2116(para) 
msgid "Before reading on, here is the most important command you'll ever need when using Subversion: <command moreinfo=\"none\">svn help</command>. The Subversion command-line client is self-documenting—at any time, a quick <command moreinfo=\"none\">svn help <replaceable>SUBCOMMAND</replaceable></command> will describe the syntax, switches, and behavior of the subcommand."
msgstr ""

#: ./build/en/book.xml:2123(screen) 
#, no-wrap
msgid "\n$ svn help import\nimport: Commit an unversioned file or tree into the repository.\nusage: import [PATH] URL\n\n  Recursively commit a copy of PATH to URL.\n  If PATH is omitted '.' is assumed.\n  Parent directories are created as necessary in the repository.\n  If PATH is a directory, the contents of the directory are added\n  directly under URL.\n\nValid options:\n  -q [--quiet]             : print as little as possible\n  -N [--non-recursive]     : operate on single directory only\n…\n"
msgstr ""

#: ./build/en/book.xml:2145(title) 
msgid "Getting Data into your Repository"
msgstr ""

#: ./build/en/book.xml:2147(para) 
msgid "There are two ways to get new files into your Subversion repository: <command moreinfo=\"none\">svn import</command> and <command moreinfo=\"none\">svn add</command>. We'll discuss <command moreinfo=\"none\">svn import</command> here and <command moreinfo=\"none\">svn add</command> later in this chapter when we review a typical day with Subversion."
msgstr ""

#: ./build/en/book.xml:2155(title) ./build/en/book.xml:19473(refname) 
msgid "svn import"
msgstr ""

#: ./build/en/book.xml:2157(para) 
msgid "The <command moreinfo=\"none\">svn import</command> command is a quick way to copy an unversioned tree of files into a repository, creating intermediate directories as necessary. <command moreinfo=\"none\">svn import</command> doesn't require a working copy, and your files are immediately committed to the repository. This is typically used when you have an existing tree of files that you want to begin tracking in your Subversion repository. For example:"
msgstr ""

#: ./build/en/book.xml:2165(screen) 
#, no-wrap
msgid "\n$ svnadmin create /usr/local/svn/newrepos\n$ svn import mytree file:///usr/local/svn/newrepos/some/project \\\n             -m \"Initial import\"\nAdding         mytree/foo.c\nAdding         mytree/bar.c\nAdding         mytree/subdir\nAdding         mytree/subdir/quux.h\n\nCommitted revision 1.\n"
msgstr ""

#: ./build/en/book.xml:2177(para) 
msgid "The previous example copied the contents of directory <filename moreinfo=\"none\">mytree</filename> under the directory <filename moreinfo=\"none\">some/project</filename> in the repository:"
msgstr ""

#: ./build/en/book.xml:2181(screen) 
#, no-wrap
msgid "\n$ svn list file:///usr/local/svn/newrepos/some/project\nbar.c\nfoo.c\nsubdir/\n"
msgstr ""

#: ./build/en/book.xml:2188(para) 
msgid "Note that after the import is finished, the original tree is <emphasis>not</emphasis> converted into a working copy. To start working, you still need to <command moreinfo=\"none\">svn checkout</command> a fresh working copy of the tree."
msgstr ""

#: ./build/en/book.xml:2197(title) 
msgid "Recommended repository layout"
msgstr ""

#: ./build/en/book.xml:2199(para) 
msgid "While Subversion's flexibility allows you to layout your repository in any way that you choose, we recommend that you create a <filename moreinfo=\"none\">trunk</filename> directory to hold the <quote>main line</quote> of development, a <filename moreinfo=\"none\">branches</filename> directory to contain branch copies, and a <filename moreinfo=\"none\">tags</filename> directory to contain tag copies, for example:"
msgstr ""

#: ./build/en/book.xml:2207(screen) 
#, no-wrap
msgid "\n$ svn list file:///usr/local/svn/repos\n/trunk\n/branches\n/tags\n"
msgstr ""

#: ./build/en/book.xml:2214(para) 
msgid "You'll learn more about tags and branches in <xref linkend=\"svn.branchmerge\"/>. For details and how to setup multiple projects, see <xref linkend=\"svn.branchmerge.maint.layout\"/> and <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> to read more about <quote>project roots</quote>."
msgstr ""

#: ./build/en/book.xml:2226(title) 
msgid "Initial Checkout"
msgstr ""

#: ./build/en/book.xml:2228(para) 
msgid "Most of the time, you will start using a Subversion repository by doing a <firstterm>checkout</firstterm> of your project. Checking out a repository creates a <quote>working copy</quote> of it on your local machine. This copy contains the <literal moreinfo=\"none\">HEAD</literal> (latest revision) of the Subversion repository that you specify on the command line:"
msgstr ""

#: ./build/en/book.xml:2236(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.collab.net/repos/svn/trunk\nA    trunk/Makefile.in\nA    trunk/ac-helpers\nA    trunk/ac-helpers/install.sh\nA    trunk/ac-helpers/install-sh\nA    trunk/build.conf\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2248(title) 
msgid "What's in a Name?"
msgstr ""

#: ./build/en/book.xml:2250(para) 
msgid "Subversion tries hard not to limit the type of data you can place under version control. The contents of files and property values are stored and transmitted as binary data, and <xref linkend=\"svn.advanced.props.special.mime-type\"/> tells you how to give Subversion a hint that <quote>textual</quote> operations don't make sense for a particular file. There are a few places, however, where Subversion places restrictions on information it stores."
msgstr ""

#: ./build/en/book.xml:2260(para) 
msgid "Subversion internally handles certain bits of data—for example, property names, path names, and log messages—as UTF-8 encoded Unicode. This is not to say that all your interactions with Subversion must involve UTF-8, though. As a general rule, Subversion clients will gracefully and transparently handle conversions between UTF-8 and the encoding system in use on your computer, if such a conversion can meaningfully be done (which is the case for most common encodings in use today)."
msgstr ""

#: ./build/en/book.xml:2270(para) 
msgid "In addition, path names are used as XML attribute values in WebDAV exchanges, as well in as some of Subversion's housekeeping files. This means that path names can only contain legal XML (1.0) characters. Subversion also prohibits TAB, CR, and LF characters in path names to prevent paths from being broken up in diffs, or in the output of commands like <xref linkend=\"svn.ref.svn.c.log\"/> or <xref linkend=\"svn.ref.svn.c.status\"/>."
msgstr ""

#: ./build/en/book.xml:2278(para) 
msgid "While it may seem like a lot to remember, in practice these limitations are rarely a problem. As long as your locale settings are compatible with UTF-8, and you don't use control characters in path names, you should have no trouble communicating with Subversion. The command-line client adds an extra bit of help—it will automatically escape illegal path characters as needed in URLs you type to create <quote>legally correct</quote> versions for internal use."
msgstr ""

#: ./build/en/book.xml:2290(para) 
msgid "Although the above example checks out the trunk directory, you can just as easily check out any deep subdirectory of a repository by specifying the subdirectory in the checkout URL:"
msgstr ""

#: ./build/en/book.xml:2295(screen) 
#, no-wrap
msgid "\n$ svn checkout -r 8810 \\\n      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/\nA    cmdline/revert_tests.py\nA    cmdline/diff_tests.py\nA    cmdline/autoprop_tests.py\nA    cmdline/xmltests\nA    cmdline/xmltests/svn-test.sh\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2307(para) 
msgid "Since Subversion uses a <quote>copy-modify-merge</quote> model instead of <quote>lock-modify-unlock</quote> (see <xref linkend=\"svn.basic.vsn-models\"/>), you're already able to start making changes to the files and directories in your working copy. Your working copy is just like any other collection of files and directories on your system. You can edit and change them, move them around, you can even delete the entire working copy and forget about it."
msgstr ""

#: ./build/en/book.xml:2317(para) 
msgid "While your working copy is <quote>just like any other collection of files and directories on your system</quote>, you can edit files at will, but you must tell Subversion about <emphasis>everything else</emphasis> that you do. For example, if you want to copy or move an item in a working copy, you should use <command moreinfo=\"none\">svn copy</command> or <command moreinfo=\"none\">svn move</command> instead of the copy and move commands provided by your operating system. We'll talk more about them later in this chapter."
msgstr ""

#: ./build/en/book.xml:2328(para) 
msgid "Unless you're ready to commit a new file or directory, or changes to existing ones, there's no need to further notify the Subversion server that you've done anything."
msgstr ""

#: ./build/en/book.xml:2333(title) 
msgid "What's with the <filename moreinfo=\"none\">.svn</filename> directory?"
msgstr ""

#: ./build/en/book.xml:2335(para) 
msgid "Every directory in a working copy contains an administrative area, a subdirectory named <filename moreinfo=\"none\">.svn</filename>. Usually, directory listing commands won't show this subdirectory, but it is nevertheless an important directory. Whatever you do, don't delete or change anything in the administrative area! Subversion depends on it to manage your working copy."
msgstr ""

#: ./build/en/book.xml:2345(para) 
msgid "While you can certainly check out a working copy with the URL of the repository as the only argument, you can also specify a directory after your repository URL. This places your working copy in the new directory that you name. For example:"
msgstr ""

#: ./build/en/book.xml:2350(screen) 
#, no-wrap
msgid "\n$  svn -r 8810  checkout http://svn.collab.net/repos/svn/trunk subv\nA    subv/Makefile.in\nA    subv/ac-helpers\nA    subv/ac-helpers/install.sh\nA    subv/ac-helpers/install-sh\nA    subv/build.conf\n…\nChecked out revision 8810.\n"
msgstr ""

#: ./build/en/book.xml:2361(para) 
msgid "That will place your working copy in a directory named <literal moreinfo=\"none\">subv</literal> instead of a directory named <literal moreinfo=\"none\">trunk</literal> as we did previously. The directory <literal moreinfo=\"none\">subv</literal> will be created if it doesn't already exist."
msgstr ""

#: ./build/en/book.xml:2369(title) 
msgid "Disabling Password Caching"
msgstr ""

#: ./build/en/book.xml:2374(para) 
msgid "Of course, you're not terribly worried—first because you know that you can't <emphasis>really</emphasis> delete anything from Subversion and, secondly, because your Subversion password isn't the same as any of the other three million passwords you have, right? Right?"
msgstr ""

#: ./build/en/book.xml:2371(para) 
msgid "When you perform a Subversion operation that requires you to authenticate, by default Subversion caches your authentication credentials on disk. If you're concerned about caching your Subversion passwords,<placeholder-1/> you can disable caching either permanently or on a case-by-case basis."
msgstr ""

#: ./build/en/book.xml:2382(para) 
msgid "To disable password caching for a particular one-time command, pass the <option>--no-auth-cache</option> switch on the commandline. To permanently disable caching, you can add the line <literal moreinfo=\"none\">store-passwords = no</literal> to your local machine's Subversion configuration file. See <xref linkend=\"svn.serverconfig.netmodel.credcache\"/> for details."
msgstr ""

#: ./build/en/book.xml:2392(title) 
msgid "Authenticating as a Different User"
msgstr ""

#: ./build/en/book.xml:2394(para) 
msgid "Since Subversion caches auth credentials by default (both username and password), it conveniently remembers who you were acting as the last time you modified you working copy. But sometimes that's not helpful—particularly if you're working in a shared working copy, like a system configuration directory or a webserver document root. In this case, just pass the <option>--username</option> option on the commandline and Subversion will attempt to authenticate as that user, prompting you for a password if necessary."
msgstr ""

#: ./build/en/book.xml:2412(title) 
msgid "Basic Work Cycle"
msgstr ""

#: ./build/en/book.xml:2414(para) 
msgid "Subversion has numerous features, switches, bells and whistles, but on a day-to-day basis, odds are that you will only use a few of them. In this section we'll run through the most common things that you might find yourself doing with Subversion in the course of a day's work."
msgstr ""

#: ./build/en/book.xml:2420(para) 
msgid "The typical work cycle looks like this:"
msgstr ""

#: ./build/en/book.xml:2424(para) 
msgid "Update your working copy"
msgstr ""

#: ./build/en/book.xml:2427(command) ./build/en/book.xml:2477(command) ./build/en/book.xml:21822(refname) 
msgid "svn update"
msgstr ""

#: ./build/en/book.xml:2434(para) 
msgid "Make changes"
msgstr ""

#: ./build/en/book.xml:2437(command) ./build/en/book.xml:18153(refname) 
msgid "svn add"
msgstr ""

#: ./build/en/book.xml:2440(command) ./build/en/book.xml:18942(refname) 
msgid "svn delete"
msgstr ""

#: ./build/en/book.xml:2443(command) ./build/en/book.xml:18767(refname) 
msgid "svn copy"
msgstr ""

#: ./build/en/book.xml:2446(command) ./build/en/book.xml:20399(refname) 
msgid "svn move"
msgstr ""

#: ./build/en/book.xml:2452(para) 
msgid "Examine your changes"
msgstr ""

#: ./build/en/book.xml:2455(command) ./build/en/book.xml:21164(refname) ./build/en/book.xml:25449(command) 
msgid "svn status"
msgstr ""

#: ./build/en/book.xml:2458(command) ./build/en/book.xml:3515(command) ./build/en/book.xml:19055(refname) ./build/en/book.xml:25456(command) 
msgid "svn diff"
msgstr ""

#: ./build/en/book.xml:2464(para) 
msgid "Possibly undo some changes"
msgstr ""

#: ./build/en/book.xml:2467(command) ./build/en/book.xml:21060(refname) ./build/en/book.xml:25463(command) 
msgid "svn revert"
msgstr ""

#: ./build/en/book.xml:2474(para) 
msgid "Resolve Conflicts (Merge Others' Changes)"
msgstr ""

#: ./build/en/book.xml:2480(command) ./build/en/book.xml:20971(refname) 
msgid "svn resolved"
msgstr ""

#: ./build/en/book.xml:2486(para) 
msgid "Commit your changes"
msgstr ""

#: ./build/en/book.xml:2489(command) ./build/en/book.xml:18629(refname) 
msgid "svn commit"
msgstr ""

#: ./build/en/book.xml:2497(title) 
msgid "Update Your Working Copy"
msgstr ""

#: ./build/en/book.xml:2499(para) 
msgid "When working on a project with a team, you'll want to update your working copy to receive any changes made since your last update by other developers on the project. Use <command moreinfo=\"none\">svn update</command> to bring your working copy into sync with the latest revision in the repository."
msgstr ""

#: ./build/en/book.xml:2505(screen) 
#, no-wrap
msgid "\n$ svn update\nU  foo.c\nU  bar.c\nUpdated to revision 2.\n"
msgstr ""

#: ./build/en/book.xml:2512(para) 
msgid "In this case, someone else checked in modifications to both <filename moreinfo=\"none\">foo.c</filename> and <filename moreinfo=\"none\">bar.c</filename> since the last time you updated, and Subversion has updated your working copy to include those changes."
msgstr ""

#: ./build/en/book.xml:2517(para) 
msgid "When the server sends changes to your working copy via <command moreinfo=\"none\">svn update</command>, a letter code is displayed next to each item to let you know what actions Subversion performed to bring your working copy up-to-date. To find out what these letters mean, see <xref linkend=\"svn.ref.svn.c.update\"/>"
msgstr ""

#: ./build/en/book.xml:2527(title) 
msgid "Make Changes to Your Working Copy"
msgstr ""

#: ./build/en/book.xml:2529(para) 
msgid "Now you can get to work and make changes in your working copy. It's usually most convenient to decide on a discrete change (or set of changes) to make, such as writing a new feature, fixing a bug, etc. The Subversion commands that you will use here are <command moreinfo=\"none\">svn add</command>, <command moreinfo=\"none\">svn delete</command>, <command moreinfo=\"none\">svn copy</command>, <command moreinfo=\"none\">svn move</command>, and <command moreinfo=\"none\">svn mkdir</command>. However, if you are merely editing files that are already in Subversion, you may not need to use any of these commands until you commit."
msgstr ""

#: ./build/en/book.xml:2540(para) 
msgid "There are two kinds of changes you can make to your working copy: file changes and tree changes. You don't need to tell Subversion that you intend to change a file; just make your changes using your text editor, word processor, graphics program, or whatever tool you would normally use. Subversion automatically detects which files have been changed, and in addition handles binary files just as easily as it handles text files—and just as efficiently too. For tree changes, you can ask Subversion to <quote>mark</quote> files and directories for scheduled removal, addition, copying, or moving. While these changes may take place immediately in your working copy, no additions or removals will happen in the repository until you commit them."
msgstr ""

#: ./build/en/book.xml:2554(para) 
msgid "Here is an overview of the five Subversion subcommands that you'll use most often to make tree changes."
msgstr ""

#: ./build/en/book.xml:2558(title) 
msgid "Versioning symbolic links"
msgstr ""

#: ./build/en/book.xml:2560(para) 
msgid "On non-Windows platforms, Subversion is able to version files of the special type <firstterm>symbolic link</firstterm> (or, <quote>symlink</quote>). A symlink is a file which acts as a sort of transparent reference to some other object in the filesystem, allowing programs to read and write to those objects indirectly by way of performing operations on the symlink itself."
msgstr ""

#: ./build/en/book.xml:2568(para) 
msgid "When a symlink is committed into a Subversion repository, Subversion remembers that the file was in fact a symlink, as well as to what object the symlink <quote>points</quote>. When that symlink is checked out to another working copy on a supporting system, Subversion reconstructs a real filesystem-level symbolic link from the versioned symlink. But that doesn't in any way limit the usability of working copies on systems such as Windows which do not support symlinks. On such systems, Subversion simply creates a regular text file whose contents are the path to which to the original symlink pointed. While that file can't be used as a symlink on a Windows system, it also won't prevent Windows users from performing their other Subversion-related activities."
msgstr ""

#: ./build/en/book.xml:2586(command) 
msgid "svn add foo"
msgstr ""

#: ./build/en/book.xml:2588(para) 
msgid "Schedule file, directory, or symbolic link <filename moreinfo=\"none\">foo</filename> to be added to the repository. When you next commit, <filename moreinfo=\"none\">foo</filename> will become a child of its parent directory. Note that if <filename moreinfo=\"none\">foo</filename> is a directory, everything underneath <filename moreinfo=\"none\">foo</filename> will be scheduled for addition. If you only want to add <filename moreinfo=\"none\">foo</filename> itself, pass the <option>--non-recursive (-N)</option> option."
msgstr ""

#: ./build/en/book.xml:2602(command) 
msgid "svn delete foo"
msgstr ""

#: ./build/en/book.xml:2612(para) 
msgid "Of course, nothing is ever totally deleted from the repository—just from the <literal moreinfo=\"none\">HEAD</literal> of the repository. You can get back anything you delete by checking out (or updating your working copy) a revision earlier than the one in which you deleted it. Also see <xref linkend=\"svn.branchmerge.commonuses.resurrect\"/>&gt;"
msgstr ""

#: ./build/en/book.xml:2604(para) 
msgid "Schedule file, directory, or symbolic link <filename moreinfo=\"none\">foo</filename> to be deleted from the repository. If <filename moreinfo=\"none\">foo</filename> is a file or link, it is immediately deleted from your working copy. If <filename moreinfo=\"none\">foo</filename> is a directory, it is not deleted, but Subversion schedules it for deletion. When you commit your changes, <filename moreinfo=\"none\">foo</filename> will be removed from your working copy and the repository. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:2622(command) 
msgid "svn copy foo bar"
msgstr ""

#: ./build/en/book.xml:2624(para) 
msgid "Create a new item <filename moreinfo=\"none\">bar</filename> as a duplicate of <filename moreinfo=\"none\">foo</filename> and automatically schedule <filename moreinfo=\"none\">bar</filename> for addition. When <filename moreinfo=\"none\">bar</filename> is added to the repository on the next commit, its copy history is recorded (as having originally come from <filename moreinfo=\"none\">foo</filename>). <command moreinfo=\"none\">svn copy</command> does not create intermediate directories."
msgstr ""

#: ./build/en/book.xml:2636(command) 
msgid "svn move foo bar"
msgstr ""

#: ./build/en/book.xml:2638(para) 
msgid "This command is exactly the same as running <command moreinfo=\"none\">svn copy foo bar; svn delete foo</command>. That is, <filename moreinfo=\"none\">bar</filename> is scheduled for addition as a copy of <filename moreinfo=\"none\">foo</filename>, and <filename moreinfo=\"none\">foo</filename> is scheduled for removal. <command moreinfo=\"none\">svn move</command> does not create intermediate directories."
msgstr ""

#: ./build/en/book.xml:2649(command) 
msgid "svn mkdir blort"
msgstr ""

#: ./build/en/book.xml:2651(para) 
msgid "This command is exactly the same as running <command moreinfo=\"none\">mkdir blort; svn add blort</command>. That is, a new directory named <filename moreinfo=\"none\">blort</filename> is created and scheduled for addition."
msgstr ""

#: ./build/en/book.xml:2661(title) 
msgid "Changing the Repository Without a Working Copy"
msgstr ""

#: ./build/en/book.xml:2663(para) 
msgid "There <emphasis>are</emphasis> some use cases that immediately commit tree changes to the repository. This only happens when a subcommand is operating directly on a URL, rather than on a working-copy path. In particular, specific uses of <command moreinfo=\"none\">svn mkdir</command>, <command moreinfo=\"none\">svn copy</command>, <command moreinfo=\"none\">svn move</command>, and <command moreinfo=\"none\">svn delete</command> can work with URLs (And don't forget that <command moreinfo=\"none\">svn import</command> always makes changes to a URL)."
msgstr ""

#: ./build/en/book.xml:2673(para) 
msgid "URL operations behave in this manner because commands that operate on a working copy can use the working copy as a sort of <quote>staging area</quote> to set up your changes before committing them to the repository. Commands that operate on URLs don't have this luxury, so when you operate directly on a URL, any of the above actions represent an immediate commit."
msgstr ""

#: ./build/en/book.xml:2687(title) 
msgid "Examine Your Changes"
msgstr ""

#: ./build/en/book.xml:2689(para) 
msgid "Once you've finished making changes, you need to commit them to the repository, but before you do so, it's usually a good idea to take a look at exactly what you've changed. By examining your changes before you commit, you can make a more accurate log message. You may also discover that you've inadvertently changed a file, and this gives you a chance to revert those changes before committing. Additionally, this is a good opportunity to review and scrutinize changes before publishing them. You can see an overview of the changes you've made by using <command moreinfo=\"none\">svn status</command>, and dig into the details of those changes by using <command moreinfo=\"none\">svn diff</command>."
msgstr ""

#: ./build/en/book.xml:2703(title) 
msgid "Look Ma! No Network!"
msgstr ""

#: ./build/en/book.xml:2712(para) 
msgid "And also that you don't have a WAN card. Thought you got us, huh?"
msgstr ""

#: ./build/en/book.xml:2705(para) 
msgid "The commands (<command moreinfo=\"none\">svn status</command>, <command moreinfo=\"none\">svn diff</command>, and <command moreinfo=\"none\">svn revert</command>) can be used without any network access (assuming, of course, that your repository is across the network and not local). This makes it easy to manage your changes-in-progress when you are somewhere without a network connection, such as travelling on an airplane, riding a commuter train or hacking on the beach.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:2716(para) 
msgid "Subversion does this by keeping private caches of pristine versions of each versioned file inside of the <filename moreinfo=\"none\">.svn</filename> administrative areas. This allows Subversion to report—and revert—local modifications to those files <emphasis>without network access</emphasis>. This cache (called the <quote>text-base</quote>) also allows Subversion to send the user's local modifications during a commit to the server as a compressed <firstterm>delta</firstterm> (or <quote>difference</quote>) against the pristine version. Having this cache is a tremendous benefit—even if you have a fast net connection, it's much faster to send only a file's changes rather than the whole file to the server."
msgstr ""

#: ./build/en/book.xml:2733(para) 
msgid "Subversion has been optimized to help you with this task, and is able to do many things without communicating with the repository. In particular, your working copy contains a secret cached <quote>pristine</quote> copy of each version controlled file within the <filename moreinfo=\"none\">.svn</filename> area. Because of this, Subversion can quickly show you how your working files have changed, or even allow you to undo your changes without contacting the repository."
msgstr ""

#: ./build/en/book.xml:2744(title) 
msgid "See an overview of your changes"
msgstr ""

#: ./build/en/book.xml:2746(para) 
msgid "To get an overview of your changes, you'll use the <command moreinfo=\"none\">svn status</command> command. You'll probably use <command moreinfo=\"none\">svn status</command> more than any other Subversion command."
msgstr ""

#: ./build/en/book.xml:2752(title) 
msgid "CVS Users: Hold That Update!"
msgstr ""

#: ./build/en/book.xml:2754(para) 
msgid "You're probably used to using <command moreinfo=\"none\">cvs update</command> to see what changes you've made to your working copy. <command moreinfo=\"none\">svn status</command> will give you all the information you need regarding what has changed in your working copy—without accessing the repository or potentially incorporating new changes published by other users."
msgstr ""

#: ./build/en/book.xml:2762(para) 
msgid "In Subversion, <command moreinfo=\"none\">update</command> does just that—it updates your working copy with any changes committed to the repository since the last time you've updated your working copy. You may have to break the habit of using the <command moreinfo=\"none\">update</command> command to see what local modifications you've made."
msgstr ""

#: ./build/en/book.xml:2771(para) 
msgid "If you run <command moreinfo=\"none\">svn status</command> at the top of your working copy with no arguments, it will detect all file and tree changes you've made. Below are a few examples of the most common status codes that <command moreinfo=\"none\">svn status</command> can return. (Note that the text following <literal moreinfo=\"none\">#</literal> is not actually printed by <command moreinfo=\"none\">svn status</command>.)"
msgstr ""

#: ./build/en/book.xml:2779(screen) 
#, no-wrap
msgid "\nA       stuff/loot/bloo.h   # file is scheduled for addition\nC       stuff/loot/lump.c   # file has textual conflicts from an update\nD       stuff/fish.c        # file is scheduled for deletion\nM       bar.c               # the content in bar.c has local modifications\n"
msgstr ""

#: ./build/en/book.xml:2786(para) 
msgid "In this output format <command moreinfo=\"none\">svn status</command> prints six columns of characters, followed by several whitespace characters, followed by a file or directory name. The first column tells the status of a file or directory and/or its contents. The codes we listed are:"
msgstr ""

#: ./build/en/book.xml:2795(computeroutput) 
#, no-wrap
msgid "A      item"
msgstr ""

#: ./build/en/book.xml:2797(para) 
msgid "The file, directory, or symbolic link <filename moreinfo=\"none\">item</filename> has been scheduled for addition into the repository."
msgstr ""

#: ./build/en/book.xml:2804(computeroutput) 
#, no-wrap
msgid "C      item"
msgstr ""

#: ./build/en/book.xml:2806(para) 
msgid "The file <filename moreinfo=\"none\">item</filename> is in a state of conflict. That is, changes received from the server during an update overlap with local changes that you have in your working copy. You must resolve this conflict before committing your changes to the repository."
msgstr ""

#: ./build/en/book.xml:2816(computeroutput) 
#, no-wrap
msgid "D      item"
msgstr ""

#: ./build/en/book.xml:2818(para) 
msgid "The file, directory, or symbolic link <filename moreinfo=\"none\">item</filename> has been scheduled for deletion from the repository."
msgstr ""

#: ./build/en/book.xml:2825(computeroutput) 
#, no-wrap
msgid "M      item"
msgstr ""

#: ./build/en/book.xml:2827(para) 
msgid "The contents of the file <filename moreinfo=\"none\">item</filename> have been modified."
msgstr ""

#: ./build/en/book.xml:2834(para) 
msgid "If you pass a specific path to <command moreinfo=\"none\">svn status</command>, you get information about that item alone:"
msgstr ""

#: ./build/en/book.xml:2838(screen) 
#, no-wrap
msgid "\n$ svn status stuff/fish.c\nD      stuff/fish.c\n"
msgstr ""

#: ./build/en/book.xml:2843(para) 
msgid "<command moreinfo=\"none\">svn status</command> also has a <option>--verbose (-v)</option> switch, which will show you the status of <emphasis>every</emphasis> item in your working copy, even if it has not been changed:"
msgstr ""

#: ./build/en/book.xml:2848(screen) 
#, no-wrap
msgid "\n$ svn status -v\nM               44        23    sally     README\n                44        30    sally     INSTALL\nM               44        20    harry     bar.c\n                44        18    ira       stuff\n                44        35    harry     stuff/trout.c\nD               44        19    ira       stuff/fish.c\n                44        21    sally     stuff/things\nA                0         ?     ?        stuff/things/bloo.h\n                44        36    harry     stuff/things/gloo.c\n"
msgstr ""

#: ./build/en/book.xml:2861(para) 
msgid "This is the <quote>long form</quote> output of <command moreinfo=\"none\">svn status</command>. The first column remains the same, but the second column shows the working-revision of the item. The third and fourth columns show the revision in which the item last changed, and who changed it (these columns are not to be confused with the columns of characters that we just discussed)."
msgstr ""

#: ./build/en/book.xml:2869(para) 
msgid "None of the above invocations to <command moreinfo=\"none\">svn status</command> contact the repository, they work only locally by comparing the metadata in the <filename moreinfo=\"none\">.svn</filename> directory with the working copy. Finally, there is the <option>--show-updates (-u)</option> option, which contacts the repository and adds information about things that are out-of-date:"
msgstr ""

#: ./build/en/book.xml:2877(screen) 
#, no-wrap
msgid "\n$ svn status -u -v\nM      *        44        23    sally     README\nM               44        20    harry     bar.c\n       *        44        35    harry     stuff/trout.c\nD               44        19    ira       stuff/fish.c\nA                0         ?     ?        stuff/things/bloo.h\nStatus against revision:   46\n"
msgstr ""

#: ./build/en/book.xml:2887(para) 
msgid "Notice the two asterisks: if you were to run <command moreinfo=\"none\">svn update</command> at this point, you would receive changes to <filename moreinfo=\"none\">README</filename> and <filename moreinfo=\"none\">trout.c</filename>. This tells you some very useful information—you'll need to update and get the server changes on <filename moreinfo=\"none\">README</filename> before you commit, or the repository will reject your commit for being out-of-date. (More on this subject later.)"
msgstr ""

#: ./build/en/book.xml:2896(para) 
msgid "<command moreinfo=\"none\">svn status</command> displays much more information about the files and directories in your working copy than we've shown here—for an exhaustive description of svn status and its output, see <xref linkend=\"svn.ref.svn.c.status\"/>."
msgstr ""

#: ./build/en/book.xml:2905(title) 
msgid "Examine the details of your local modifications"
msgstr ""

#: ./build/en/book.xml:2907(para) 
msgid "Another way to examine your changes is with the <command moreinfo=\"none\">svn diff</command> command. You can find out <emphasis>exactly</emphasis> how you've modified things by running <command moreinfo=\"none\">svn diff</command> with no arguments, which prints out file changes in unified diff format:"
msgstr ""

#: ./build/en/book.xml:2914(screen) 
#, no-wrap
msgid "\n$ svn diff\nIndex: bar.c\n===================================================================\n--- bar.c\t(revision 3)\n+++ bar.c\t(working copy)\n@@ -1,7 +1,12 @@\n+#include &lt;sys/types.h&gt;\n+#include &lt;sys/stat.h&gt;\n+#include &lt;unistd.h&gt;\n+\n+#include &lt;stdio.h&gt;\n\n int main(void) {\n-  printf(\"Sixty-four slices of American Cheese...\\n\");\n+  printf(\"Sixty-five slices of American Cheese...\\n\");\n return 0;\n }\n\nIndex: README\n===================================================================\n--- README\t(revision 3)\n+++ README\t(working copy)\n@@ -193,3 +193,4 @@\n+Note to self:  pick up laundry.\n\nIndex: stuff/fish.c\n===================================================================\n--- stuff/fish.c\t(revision 1)\n+++ stuff/fish.c\t(working copy)\n-Welcome to the file known as 'fish'.\n-Information on fish will be here soon.\n\nIndex: stuff/things/bloo.h\n===================================================================\n--- stuff/things/bloo.h\t(revision 8)\n+++ stuff/things/bloo.h\t(working copy)\n+Here is a new file to describe\n+things about bloo.\n"
msgstr ""

#: ./build/en/book.xml:2955(para) 
msgid "The <command moreinfo=\"none\">svn diff</command> command produces this output by comparing your working files against the cached <quote>pristine</quote> copies within the <filename moreinfo=\"none\">.svn</filename> area. Files scheduled for addition are displayed as all added-text, and files scheduled for deletion are displayed as all deleted text."
msgstr ""

#: ./build/en/book.xml:2963(para) 
msgid "Output is displayed in <firstterm>unified diff format</firstterm>. That is, removed lines are prefaced with a <literal moreinfo=\"none\">-</literal> and added lines are prefaced with a <literal moreinfo=\"none\">+</literal>. <command moreinfo=\"none\">svn diff</command> also prints filename and offset information useful to the <command moreinfo=\"none\">patch</command> program, so you can generate <quote>patches</quote> by redirecting the diff output to a file:"
msgstr ""

#: ./build/en/book.xml:2972(screen) 
#, no-wrap
msgid "\n$ svn diff &gt; patchfile\n"
msgstr ""

#: ./build/en/book.xml:2976(para) 
msgid "You could, for example, email the patch file to another developer for review or testing prior to commit."
msgstr ""

#: ./build/en/book.xml:2979(para) 
msgid "Subversion uses its internal diff engine, which produces unified diff format, by default. If you want diff output in a different format, specify an external diff program using <option>--diff-cmd</option> and pass any flags you'd like to it using the <option>--extensions (-x)</option> switch. For example, to see local differences in file <filename moreinfo=\"none\">foo.c</filename> in context output format while ignoring case differences, you might run <command moreinfo=\"none\">svn diff --diff-cmd /usr/bin/diff --extensions '-i' foo.c</command>."
msgstr ""

#: ./build/en/book.xml:2997(title) 
msgid "Undoing Working Changes"
msgstr ""

#: ./build/en/book.xml:3000(para) 
msgid "Suppose while viewing the output of <command moreinfo=\"none\">svn diff</command> you determine that all the changes you made to a particular file are mistakes. Maybe you shouldn't have changed the file at all, or perhaps it would be easier to make different changes starting from scratch."
msgstr ""

#: ./build/en/book.xml:3006(para) 
msgid "This is a perfect opportunity to use <command moreinfo=\"none\">svn revert</command>:"
msgstr ""

#: ./build/en/book.xml:3009(screen) 
#, no-wrap
msgid "\n$ svn revert README\nReverted 'README'\n"
msgstr ""

#: ./build/en/book.xml:3014(para) 
msgid "Subversion reverts the file to its pre-modified state by overwriting it with the cached <quote>pristine</quote> copy from the <filename moreinfo=\"none\">.svn</filename> area. But also note that <command moreinfo=\"none\">svn revert</command> can undo <emphasis>any</emphasis> scheduled operations—for example, you might decide that you don't want to add a new file after all:"
msgstr ""

#: ./build/en/book.xml:3022(screen) 
#, no-wrap
msgid "\n$ svn status foo\n?      foo\n\n$ svn add foo\nA         foo\n\n$ svn revert foo\nReverted 'foo'\n\n$ svn status foo\n?      foo\n"
msgstr ""

#: ./build/en/book.xml:3037(para) 
msgid "<command moreinfo=\"none\">svn revert</command><replaceable>ITEM</replaceable> has exactly the same effect as deleting <replaceable>ITEM</replaceable> from your working copy and then running <command moreinfo=\"none\">svn update -r BASE</command><replaceable>ITEM</replaceable>. However, if you're reverting a file, <command moreinfo=\"none\">svn revert</command> has one very noticeable difference—it doesn't have to communicate with the repository to restore your file."
msgstr ""

#: ./build/en/book.xml:3048(para) 
msgid "Or perhaps you mistakenly removed a file from version control:"
msgstr ""

#: ./build/en/book.xml:3051(screen) 
#, no-wrap
msgid "\n$ svn status README\n       README\n\n$ svn delete README\nD         README\n\n$ svn revert README\nReverted 'README'\n\n$ svn status README\n       README\n"
msgstr ""

#: ./build/en/book.xml:3069(title) 
msgid "Resolve Conflicts (Merging Others' Changes)"
msgstr ""

#: ./build/en/book.xml:3071(para) 
msgid "We've already seen how <command moreinfo=\"none\">svn status -u</command> can predict conflicts. Suppose you run <command moreinfo=\"none\">svn update</command> and some interesting things occur:"
msgstr ""

#: ./build/en/book.xml:3075(screen) 
#, no-wrap
msgid "\n$ svn update\nU  INSTALL\nG  README\nC  bar.c\nUpdated to revision 46.\n"
msgstr ""

#: ./build/en/book.xml:3083(para) 
msgid "The <computeroutput moreinfo=\"none\">U</computeroutput> and <computeroutput moreinfo=\"none\">G</computeroutput> codes are no cause for concern; those files cleanly absorbed changes from the repository. The files marked with <computeroutput moreinfo=\"none\">U</computeroutput> contained no local changes but were <computeroutput moreinfo=\"none\">U</computeroutput>pdated with changes from the repository. The <computeroutput moreinfo=\"none\">G</computeroutput> stands for mer<computeroutput moreinfo=\"none\">G</computeroutput>ed, which means that the file had local changes to begin with, but the changes coming from the repository didn't overlap with the local changes."
msgstr ""

#: ./build/en/book.xml:3095(para) 
msgid "But the <computeroutput moreinfo=\"none\">C</computeroutput> stands for conflict. This means that the changes from the server overlapped with your own, and now you have to manually choose between them."
msgstr ""

#: ./build/en/book.xml:3100(para) 
msgid "Whenever a conflict occurs, three things typically occur to assist you in noticing and resolving that conflict:"
msgstr ""

#: ./build/en/book.xml:3106(para) 
msgid "Subversion prints a <computeroutput moreinfo=\"none\">C</computeroutput> during the update, and remembers that the file is in a state of conflict."
msgstr ""

#: ./build/en/book.xml:3112(para) 
msgid "If Subversion considers the file to be mergeable, it places <firstterm>conflict markers</firstterm>—special strings of text which delimit the <quote>sides</quote> of the conflict—into the file to visibly demonstrate the overlapping areas. (Subversion uses the <literal moreinfo=\"none\">svn:mime-type</literal> property to decide if a file is capable of contextual, line-based merging. See <xref linkend=\"svn.advanced.props.special.mime-type\"/> to learn more.)"
msgstr ""

#: ./build/en/book.xml:3124(para) 
msgid "For every conflicted file, Subversion places three extra unversioned files in your working copy:"
msgstr ""

#: ./build/en/book.xml:3130(filename) 
msgid "filename.mine"
msgstr ""

#: ./build/en/book.xml:3132(para) 
msgid "This is your file as it existed in your working copy before you updated your working copy—that is, without conflict markers. This file has only your latest changes in it. (If Subversion considers the file to be unmergeable, then the <filename moreinfo=\"none\">.mine</filename> file isn't created, since it would be identical to the working file.)"
msgstr ""

#: ./build/en/book.xml:3143(filename) 
msgid "filename.rOLDREV"
msgstr ""

#: ./build/en/book.xml:3145(para) 
msgid "This is the file that was the <literal moreinfo=\"none\">BASE</literal> revision before you updated your working copy. That is, the file that you checked out before you made your latest edits."
msgstr ""

#: ./build/en/book.xml:3154(filename) 
msgid "filename.rNEWREV"
msgstr ""

#: ./build/en/book.xml:3156(para) 
msgid "This is the file that your Subversion client just received from the server when you updated your working copy. This file corresponds to the <literal moreinfo=\"none\">HEAD</literal> revision of the repository."
msgstr ""

#: ./build/en/book.xml:3166(para) 
msgid "Here <literal moreinfo=\"none\">OLDREV</literal> is the revision number of the file in your <filename moreinfo=\"none\">.svn</filename> directory and <literal moreinfo=\"none\">NEWREV</literal> is the revision number of the repository <literal moreinfo=\"none\">HEAD</literal>."
msgstr ""

#: ./build/en/book.xml:3174(para) 
msgid "For example, Sally makes changes to the file <filename moreinfo=\"none\">sandwich.txt</filename> in the repository. Harry has just changed the file in his working copy and checked it in. Sally updates her working copy before checking in and she gets a conflict:"
msgstr ""

#: ./build/en/book.xml:3180(screen) 
#, no-wrap
msgid "\n$ svn update\nC  sandwich.txt\nUpdated to revision 2.\n$ ls -1\nsandwich.txt\nsandwich.txt.mine\nsandwich.txt.r1\nsandwich.txt.r2\n"
msgstr ""

#: ./build/en/book.xml:3191(para) 
msgid "At this point, Subversion will <emphasis>not</emphasis> allow you to commit the file <filename moreinfo=\"none\">sandwich.txt</filename> until the three temporary files are removed."
msgstr ""

#: ./build/en/book.xml:3195(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"Add a few more things\"\nsvn: Commit failed (details follow):\nsvn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict\n"
msgstr ""

#: ./build/en/book.xml:3201(para) 
msgid "If you get a conflict, you need to do one of three things:"
msgstr ""

#: ./build/en/book.xml:3207(para) 
msgid "Merge the conflicted text <quote>by hand</quote> (by examining and editing the conflict markers within the file)."
msgstr ""

#: ./build/en/book.xml:3213(para) 
msgid "Copy one of the temporary files on top of your working file."
msgstr ""

#: ./build/en/book.xml:3218(para) 
msgid "Run <command moreinfo=\"none\">svn revert &lt;filename&gt;</command> to throw away all of your local changes."
msgstr ""

#: ./build/en/book.xml:3228(para) 
msgid "You can always remove the temporary files yourself, but would you really want to do that when Subversion can do it for you? We didn't think so."
msgstr ""

#: ./build/en/book.xml:3224(para) 
msgid "Once you've resolved the conflict, you need to let Subversion know by running <command moreinfo=\"none\">svn resolved</command>. This removes the three temporary files and Subversion no longer considers the file to be in a state of conflict.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:3233(screen) 
#, no-wrap
msgid "\n$ svn resolved sandwich.txt\nResolved conflicted state of 'sandwich.txt'\n"
msgstr ""

#: ./build/en/book.xml:3240(title) 
msgid "Merging Conflicts by Hand"
msgstr ""

#: ./build/en/book.xml:3242(para) 
msgid "Merging conflicts by hand can be quite intimidating the first time you attempt it, but with a little practice, it can become as easy as falling off a bike."
msgstr ""

#: ./build/en/book.xml:3246(para) 
msgid "Here's an example. Due to a miscommunication, you and Sally, your collaborator, both edit the file <filename moreinfo=\"none\">sandwich.txt</filename> at the same time. Sally commits her changes, and when you go to update your working copy, you get a conflict and you're going to have to edit <filename moreinfo=\"none\">sandwich.txt</filename> to resolve the conflicts. First, let's take a look at the file:"
msgstr ""

#: ./build/en/book.xml:3254(screen) 
#, no-wrap
msgid "\n$ cat sandwich.txt\nTop piece of bread\nMayonnaise\nLettuce\nTomato\nProvolone\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\nSalami\nMortadella\nProsciutto\n=======\nSauerkraut\nGrilled Chicken\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2\nCreole Mustard\nBottom piece of bread\n"
msgstr ""

#: ./build/en/book.xml:3273(para) 
msgid "The strings of less-than signs, equal signs, and greater-than signs are conflict markers, and are not part of the actual data in conflict. You generally want to ensure that those are removed from the file before your next commit. The text between the first two sets of markers is composed of the changes you made in the conflicting area:"
msgstr ""

#: ./build/en/book.xml:3281(screen) 
#, no-wrap
msgid "\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine\nSalami\nMortadella\nProsciutto\n=======\n"
msgstr ""

#: ./build/en/book.xml:3289(para) 
msgid "The text between the second and third sets of conflict markers is the text from Sally's commit:"
msgstr ""

#: ./build/en/book.xml:3292(screen) 
#, no-wrap
msgid "\n=======\nSauerkraut\nGrilled Chicken\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2\n"
msgstr ""

#: ./build/en/book.xml:3304(para) 
msgid "And if you ask them for it, they may very well ride you out of town on a rail."
msgstr ""

#: ./build/en/book.xml:3299(para) 
msgid "Usually you won't want to just delete the conflict markers and Sally's changes—she's going to be awfully surprised when the sandwich arrives and it's not what she wanted. So this is where you pick up the phone or walk across the office and explain to Sally that you can't get sauerkraut from an Italian deli.<placeholder-1/> Once you've agreed on the changes you will check in, edit your file and remove the conflict markers."
msgstr ""

#: ./build/en/book.xml:3310(screen) 
#, no-wrap
msgid "\nTop piece of bread\nMayonnaise\nLettuce\nTomato\nProvolone\nSalami\nMortadella\nProsciutto\nCreole Mustard\nBottom piece of bread\n"
msgstr ""

#: ./build/en/book.xml:3323(para) 
msgid "Now run <command moreinfo=\"none\">svn resolved</command>, and you're ready to commit your changes:"
msgstr ""

#: ./build/en/book.xml:3326(screen) 
#, no-wrap
msgid "\n$ svn resolved sandwich.txt\n$ svn commit -m \"Go ahead and use my sandwich, discarding Sally's edits.\"\n"
msgstr ""

#: ./build/en/book.xml:3331(para) 
msgid "Note that <command moreinfo=\"none\">svn resolved</command>, unlike most of the other commands we deal with in this chapter, requires an argument. In any case, you want to be careful and only run <command moreinfo=\"none\">svn resolved</command> when you're certain that you've fixed the conflict in your file—once the temporary files are removed, Subversion will let you commit the file even if it still contains conflict markers."
msgstr ""

#: ./build/en/book.xml:3339(para) 
msgid "If you ever get confused while editing the conflicted file, you can always consult the three files that Subversion creates for you in your working copy—including your file as it was before you updated. You can even use a third-party interactive merging tool to examine those three files."
msgstr ""

#: ./build/en/book.xml:3350(title) 
msgid "Copying a File Onto Your Working File"
msgstr ""

#: ./build/en/book.xml:3352(para) 
msgid "If you get a conflict and decide that you want to throw out your changes, you can merely copy one of the temporary files created by Subversion over the file in your working copy:"
msgstr ""

#: ./build/en/book.xml:3357(screen) 
#, no-wrap
msgid "\n$ svn update\nC  sandwich.txt\nUpdated to revision 2.\n$ ls sandwich.*\nsandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1\n$ cp sandwich.txt.r2 sandwich.txt\n$ svn resolved sandwich.txt\n"
msgstr ""

#: ./build/en/book.xml:3371(title) 
msgid "Punting: Using <command moreinfo=\"none\">svn revert</command>"
msgstr ""

#: ./build/en/book.xml:3373(para) 
msgid "If you get a conflict, and upon examination decide that you want to throw out your changes and start your edits again, just revert your changes:"
msgstr ""

#: ./build/en/book.xml:3377(screen) 
#, no-wrap
msgid "\n$ svn revert sandwich.txt\nReverted 'sandwich.txt'\n$ ls sandwich.*\nsandwich.txt\n"
msgstr ""

#: ./build/en/book.xml:3384(para) 
msgid "Note that when you revert a conflicted file, you don't have to run <command moreinfo=\"none\">svn resolved</command>."
msgstr ""

#: ./build/en/book.xml:3393(title) 
msgid "Commit Your Changes"
msgstr ""

#: ./build/en/book.xml:3395(para) 
msgid "Finally! Your edits are finished, you've merged all changes from the server, and you're ready to commit your changes to the repository."
msgstr ""

#: ./build/en/book.xml:3399(para) 
msgid "The <command moreinfo=\"none\">svn commit</command> command sends all of your changes to the repository. When you commit a change, you need to supply a <firstterm>log message</firstterm>, describing your change. Your log message will be attached to the new revision you create. If your log message is brief, you may wish to supply it on the command line using the <option>--message</option> (or <option>-m</option>) switch:"
msgstr ""

#: ./build/en/book.xml:3408(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"Corrected number of cheese slices.\"\nSending        sandwich.txt\nTransmitting file data .\nCommitted revision 3.\n"
msgstr ""

#: ./build/en/book.xml:3415(para) 
msgid "However, if you've been composing your log message as you work, you may want to tell Subversion to get the message from a file by passing the filename with the <option>--file (-F)</option> option:"
msgstr ""

#: ./build/en/book.xml:3420(screen) 
#, no-wrap
msgid "\n$ svn commit -F logmsg\nSending        sandwich.txt\nTransmitting file data .\nCommitted revision 4.\n"
msgstr ""

#: ./build/en/book.xml:3427(para) 
msgid "If you fail to specify either the <option>--message</option> or <option>--file</option> switch, then Subversion will automatically launch your favorite editor (see the <literal moreinfo=\"none\">editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/>) for composing a log message."
msgstr ""

#: ./build/en/book.xml:3436(para) 
msgid "If you're in your editor writing a commit message and decide that you want to cancel your commit, you can just quit your editor without saving changes. If you've already saved your commit message, simply delete the text, save again, then quit."
msgstr ""

#: ./build/en/book.xml:3442(screen) 
#, no-wrap
msgid "\n$ svn commit\nWaiting for Emacs...Done\n\nLog message unchanged or not specified\na)bort, c)ontinue, e)dit\na\n$\n"
msgstr ""

#: ./build/en/book.xml:3453(para) 
msgid "The repository doesn't know or care if your changes make any sense as a whole; it only checks to make sure that nobody else has changed any of the same files that you did when you weren't looking. If somebody <emphasis>has</emphasis> done that, the entire commit will fail with a message informing you that one or more of your files is out-of-date:"
msgstr ""

#: ./build/en/book.xml:3460(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"Add another rule\"\nSending        rules.txt\nsvn: Commit failed (details follow):\nsvn: Your file or directory 'sandwich.txt' is probably out-of-date\n…\n"
msgstr ""

#: ./build/en/book.xml:3468(para) 
msgid "At this point, you need to run <command moreinfo=\"none\">svn update</command>, deal with any merges or conflicts that result, and attempt your commit again."
msgstr ""

#: ./build/en/book.xml:3472(para) 
msgid "That covers the basic work cycle for using Subversion. There are many other features in Subversion that you can use to manage your repository and working copy, but most of your day-to-day use of Subversion will involve only the commands that we've discussed so far in this chapter. We will, however, cover a few more commands that you'll use just fairly often."
msgstr ""

#: ./build/en/book.xml:3488(title) 
msgid "Examining History"
msgstr ""

#: ./build/en/book.xml:3490(para) 
msgid "Your Subversion repository is like a time machine. It keeps a record of every change ever committed, and allows you to explore this history by examining previous versions of files and directories as well as the metadata that accompanies them. With a single Subversion command, you can check out the repository (or restore an existing working copy) exactly as it was at any date or revision number in the past. However, sometimes you just want to <emphasis>peer into</emphasis> the past instead of <emphasis>going into</emphasis> the past."
msgstr ""

#: ./build/en/book.xml:3500(para) 
msgid "There are several commands that can provide you with historical data from the repository:"
msgstr ""

#: ./build/en/book.xml:3506(command) ./build/en/book.xml:19948(refname) 
msgid "svn log"
msgstr ""

#: ./build/en/book.xml:3508(para) 
msgid "Shows you broad information: log messages with date and author information attached to revisions, and which paths changed in each revision."
msgstr ""

#: ./build/en/book.xml:3517(para) 
msgid "Shows line-level details of a particular change."
msgstr ""

#: ./build/en/book.xml:3522(command) ./build/en/book.xml:3811(command) ./build/en/book.xml:18329(refname) 
msgid "svn cat"
msgstr ""

#: ./build/en/book.xml:3524(para) 
msgid "This is used to retrieve any file as it existed in a particular revision number and display it on your screen."
msgstr ""

#: ./build/en/book.xml:3531(command) ./build/en/book.xml:3839(command) ./build/en/book.xml:19736(refname) 
msgid "svn list"
msgstr ""

#: ./build/en/book.xml:3533(para) 
msgid "Displays the files in a directory for any given revision."
msgstr ""

#: ./build/en/book.xml:3543(title) 
msgid "Generating a list of historical changes"
msgstr ""

#: ./build/en/book.xml:3545(para) 
msgid "To find information about the history of a file or directory, use the <command moreinfo=\"none\">svn log</command> command. <command moreinfo=\"none\">svn log</command> will provide you with a record of who made changes to a file or directory, at what revision it changed, the time and date of that revision, and, if it was provided, the log message that accompanied the commit."
msgstr ""

#: ./build/en/book.xml:3553(screen) 
#, no-wrap
msgid "\n$ svn log\n------------------------------------------------------------------------\nr3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line\n\nAdded include lines and corrected # of cheese slices.\n------------------------------------------------------------------------\nr2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line\n\nAdded main() methods.\n------------------------------------------------------------------------\nr1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 line\n\nInitial import\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:3570(para) 
msgid "Note that the log messages are printed in <emphasis>reverse chronological order</emphasis> by default. If you wish to see a different range of revisions in a particular order, or just a single revision, pass the <option>--revision (-r)</option> option:"
msgstr ""

#: ./build/en/book.xml:3576(screen) 
#, no-wrap
msgid "\n$ svn log -r 5:19    # shows logs 5 through 19 in chronological order\n\n$ svn log -r 19:5    # shows logs 5 through 19 in reverse order\n\n$ svn log -r 8       # shows log for revision 8\n"
msgstr ""

#: ./build/en/book.xml:3584(para) 
msgid "You can also examine the log history of a single file or directory. For example:"
msgstr ""

#: ./build/en/book.xml:3587(screen) 
#, no-wrap
msgid "\n$ svn log foo.c\n…\n$ svn log http://foo.com/svn/trunk/code/foo.c\n…\n"
msgstr ""

#: ./build/en/book.xml:3594(para) 
msgid "These will display log messages <emphasis>only</emphasis> for those revisions in which the working file (or URL) changed."
msgstr ""

#: ./build/en/book.xml:3598(para) 
msgid "If you want even more information about a file or directory, <command moreinfo=\"none\">svn log</command> also takes a <option>--verbose (-v)</option> option. Because Subversion allows you to move and copy files and directories, it is important to be able to track path changes in the filesystem, so in verbose mode, <command moreinfo=\"none\">svn log</command> will include a list of changed paths in a revision in its output:"
msgstr ""

#: ./build/en/book.xml:3606(screen) 
#, no-wrap
msgid "\n$ svn log -r 8 -v\n------------------------------------------------------------------------\nr8 | sally | 2002-07-14 08:15:29 -0500 | 1 line\nChanged paths:\nM /trunk/code/foo.c\nM /trunk/code/bar.h\nA /trunk/code/doc/README\n\nFrozzled the sub-space winch.\n\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:3620(para) 
msgid "<command moreinfo=\"none\">svn log</command> also takes a <option>--quiet</option> (<option>-q</option>) switch, which suppresses the body of the log message. When combined with <option>--verbose</option>, it gives just the names of the changed files."
msgstr ""

#: ./build/en/book.xml:3627(title) 
msgid "Why Does <command moreinfo=\"none\">svn log</command> Give Me an Empty Response?"
msgstr ""

#: ./build/en/book.xml:3630(para) 
msgid "After working with Subversion for a bit, most users will come across something like this:"
msgstr ""

#: ./build/en/book.xml:3633(screen) 
#, no-wrap
msgid "\n$ svn log -r 2\n------------------------------------------------------------------------\n$\n"
msgstr ""

#: ./build/en/book.xml:3639(para) 
msgid "At first glance, this seems like an error. But recall that while revisions are repository-wide, <command moreinfo=\"none\">svn log</command> operates on a path in the repository. If you supply no path, Subversion uses the current working directory as the default target. As a result, if you're operating in a subdirectory of your working copy and attempt to see the log of a revision in which neither that directory nor any of its children was changed, Subversion will show you an empty log. If you want to see what changed in that revision, try pointing <command moreinfo=\"none\">svn log</command> directly at the top-most URL of your repository, as in <command moreinfo=\"none\">svn log -r 2 http://svn.collab.net/repos/svn</command>."
msgstr ""

#: ./build/en/book.xml:3658(title) 
msgid "Examining the details of historical changes"
msgstr ""

#: ./build/en/book.xml:3660(para) 
msgid "We've already seen <command moreinfo=\"none\">svn diff</command> before—it displays file differences in unified diff format; it was used to show the local modifications made to our working copy before committing to the repository."
msgstr ""

#: ./build/en/book.xml:3665(para) 
msgid "In fact, it turns out that there are <emphasis>three</emphasis> distinct uses of <command moreinfo=\"none\">svn diff</command>:"
msgstr ""

#: ./build/en/book.xml:3672(para) 
msgid "Examine local changes"
msgstr ""

#: ./build/en/book.xml:3676(para) 
msgid "Compare your working copy to the repository"
msgstr ""

#: ./build/en/book.xml:3680(para) 
msgid "Compare repository to repository"
msgstr ""

#: ./build/en/book.xml:3687(title) 
msgid "Examining Local Changes"
msgstr ""

#: ./build/en/book.xml:3689(para) 
msgid "As we've seen, invoking <command moreinfo=\"none\">svn diff</command> with no switches will compare your working files to the cached <quote>pristine</quote> copies in the <filename moreinfo=\"none\">.svn</filename> area:"
msgstr ""

#: ./build/en/book.xml:3694(screen) 
#, no-wrap
msgid "\n$ svn diff\nIndex: rules.txt\n===================================================================\n--- rules.txt\t(revision 3)\n+++ rules.txt\t(working copy)\n@@ -1,4 +1,5 @@\n Be kind to others\n Freedom = Responsibility\n Everything in moderation\n-Chew with your mouth open\n+Chew with your mouth closed\n+Listen when others are speaking\n$\n"
msgstr ""

#: ./build/en/book.xml:3714(title) 
msgid "Comparing Working Copy to Repository"
msgstr ""

#: ./build/en/book.xml:3716(para) 
msgid "If a single <option>--revision</option> (<option>-r</option>) number is passed, then your working copy is compared to the specified revision in the repository."
msgstr ""

#: ./build/en/book.xml:3721(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3 rules.txt\nIndex: rules.txt\n===================================================================\n--- rules.txt\t(revision 3)\n+++ rules.txt\t(working copy)\n@@ -1,4 +1,5 @@\n Be kind to others\n Freedom = Responsibility\n Everything in moderation\n-Chew with your mouth open\n+Chew with your mouth closed\n+Listen when others are speaking\n$\n"
msgstr ""

#: ./build/en/book.xml:3741(title) 
msgid "Comparing Repository to Repository"
msgstr ""

#: ./build/en/book.xml:3743(para) 
msgid "If two revision numbers, separated by a colon, are passed via <option>--revision (-r)</option>, then the two revisions are directly compared."
msgstr ""

#: ./build/en/book.xml:3747(screen) 
#, no-wrap
msgid "\n$ svn diff -r 2:3 rules.txt\nIndex: rules.txt\n===================================================================\n--- rules.txt\t(revision 2)\n+++ rules.txt\t(revision 3)\n@@ -1,4 +1,4 @@\n Be kind to others\n-Freedom = Chocolate Ice Cream\n+Freedom = Responsibility\n Everything in moderation\n Chew with your mouth open\n$\n"
msgstr ""

#: ./build/en/book.xml:3762(para) 
msgid "A more convenient way of comparing a revision to the previous revision is to use the <option>--change (-c)</option>:"
msgstr ""

#: ./build/en/book.xml:3766(screen) 
#, no-wrap
msgid "\n$ svn diff -c 3 rules.txt\nIndex: rules.txt\n===================================================================\n--- rules.txt\t(revision 2)\n+++ rules.txt\t(revision 3)\n@@ -1,4 +1,4 @@\n Be kind to others\n-Freedom = Chocolate Ice Cream\n+Freedom = Responsibility\n Everything in moderation\n Chew with your mouth open\n$\n"
msgstr ""

#: ./build/en/book.xml:3781(para) 
msgid "Not only can you use <command moreinfo=\"none\">svn diff</command> to compare files in your working copy to the repository, but if you supply a URL argument, you can examine the differences between items in the repository without even having a working copy. This is especially useful if you wish to inspect changes in a file when you don't have a working copy on your local machine:"
msgstr ""

#: ./build/en/book.xml:3789(screen) 
#, no-wrap
msgid "\n$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:3801(title) 
msgid "Browsing the repository"
msgstr ""

#: ./build/en/book.xml:3803(para) 
msgid "Using <command moreinfo=\"none\">svn cat</command> and <command moreinfo=\"none\">svn list</command>, you can view various revisions of files and directories without changing the working revision of your working copy. In fact, you don't even need a working copy to use either one."
msgstr ""

#: ./build/en/book.xml:3814(para) 
msgid "If you want to examine an earlier version of a file and not necessarily the differences between two files, you can use <command moreinfo=\"none\">svn cat</command>:"
msgstr ""

#: ./build/en/book.xml:3818(screen) 
#, no-wrap
msgid "\n$ svn cat -r 2 rules.txt\nBe kind to others\nFreedom = Chocolate Ice Cream\nEverything in moderation\nChew with your mouth open\n$\n"
msgstr ""

#: ./build/en/book.xml:3827(para) 
msgid "You can also redirect the output directly into a file:"
msgstr ""

#: ./build/en/book.xml:3830(screen) 
#, no-wrap
msgid "\n$ svn cat -r 2 rules.txt &gt; rules.txt.v2\n$\n"
msgstr ""

#: ./build/en/book.xml:3841(para) 
msgid "The <command moreinfo=\"none\">svn list</command> command shows you what files are in a repository directory without actually downloading the files to your local machine:"
msgstr ""

#: ./build/en/book.xml:3845(screen) 
#, no-wrap
msgid "\n$ svn list http://svn.collab.net/repos/svn\nREADME\nbranches/\nclients/\ntags/\ntrunk/\n"
msgstr ""

#: ./build/en/book.xml:3854(para) 
msgid "If you want a more detailed listing, pass the <option>--verbose (-v)</option> flag to get output like this:"
msgstr ""

#: ./build/en/book.xml:3858(screen) 
#, no-wrap
msgid "\n$ svn list -v http://svn.collab.net/repos/svn\n  20620 harry            1084 Jul 13  2006 README\n  23339 harry                 Feb 04 01:40 branches/\n  21282 sally                 Aug 27 09:41 developer-resources/\n  23198 harry                 Jan 23 17:17 tags/\n  23351 sally                 Feb 05 13:26 trunk/\n"
msgstr ""

#: ./build/en/book.xml:3867(para) 
msgid "The columns tell you the revision at which the file or directory was last modified, the user who modified it, the size if it is a file, the date it was last modified, and the item's name."
msgstr ""

#: ./build/en/book.xml:3878(title) 
msgid "Fetching older repository snapshots"
msgstr ""

#: ./build/en/book.xml:3884(para) 
msgid "See? We told you that Subversion was a time machine."
msgstr ""

#: ./build/en/book.xml:3880(para) 
msgid "In addition to all of the above commands, you can use <command moreinfo=\"none\">svn update</command> and <command moreinfo=\"none\">svn checkout</command> with the <option>--revision</option> switch to take an entire working copy <quote>back in time</quote><placeholder-1/>:"
msgstr ""

#: ./build/en/book.xml:3887(screen) 
#, no-wrap
msgid "\n$ svn checkout -r 1729 # Checks out a new working copy at r1729\n…\n$ svn update -r 1729 # Updates an existing working copy to r1729\n…\n"
msgstr ""

#: ./build/en/book.xml:3895(para) 
msgid "Many Subversion newcomers attempt to use the above <command moreinfo=\"none\">svn update</command> example to <quote>undo</quote> committed changes, but this won't work as you can't commit changes that you obtain from backdating a working copy if the changed files have newer revisions. See <xref linkend=\"svn.branchmerge.commonuses.resurrect\"/> for a description of how to <quote>undo</quote> a commit."
msgstr ""

#: ./build/en/book.xml:3903(para) 
msgid "Lastly, if you're building a release and wish to bundle up your files from Subversion but don't want those pesky .svn directories in the way, then you can use svn export to create a local copy of all or part of your repository sans .svn directories. As with <command moreinfo=\"none\">svn update</command> and <command moreinfo=\"none\">svn checkout</command>, you can also pass the <option>--revision</option> switch to <command moreinfo=\"none\">svn export</command>:"
msgstr ""

#: ./build/en/book.xml:3912(screen) 
#, no-wrap
msgid "\n$ svn export http://svn.example.com/svn/repos1 # Exports latest revision\n…\n$ svn export http://svn.example.com/svn/repos1 -r 1729\n# Exports revision r1729\n…\n"
msgstr ""

#: ./build/en/book.xml:3929(title) 
msgid "Sometimes You Just Need to Cleanup"
msgstr ""

#: ./build/en/book.xml:3931(para) 
msgid "When Subversion modifies your working copy (or any information within <filename moreinfo=\"none\">.svn</filename>), it tries to do so as safely as possible. Before changing the working copy, Subversion writes its intentions to a log file. Next it executes the commands in the log file to apply the requested change, holding a lock on the relevant part of the working copy while it works — to prevent other Subversion clients from accessing the working copy in mid-change. Finally, Subversion removes the log file. Architecturally, this is similar to a journaled filesystem. If a Subversion operation is interrupted (if the process is killed, or if the machine crashes, for example), the log files remain on disk. By re-executing the log files, Subversion can complete the previously started operation, and your working copy can get itself back into a consistent state."
msgstr ""

#: ./build/en/book.xml:3947(para) 
msgid "And this is exactly what <command moreinfo=\"none\">svn cleanup</command> does: it searches your working copy and runs any leftover logs, removing working copy locks in the process. If Subversion ever tells you that some part of your working copy is <quote>locked</quote>, then this is the command that you should run. Also, <command moreinfo=\"none\">svn status</command> will display an <literal moreinfo=\"none\">L</literal> next to locked items:"
msgstr ""

#: ./build/en/book.xml:3955(screen) 
#, no-wrap
msgid "\n$ svn status\n  L    somedir\nM      somedir/foo.c\n\n$ svn cleanup\n$ svn status\nM      somedir/foo.c\n"
msgstr ""

#: ./build/en/book.xml:3965(para) 
msgid "Don't confuse these working copy locks with the ordinary locks that Subversion users create when using the <quote>lock-modify-unlock</quote> model of concurrent version control; see <xref linkend=\"svn.advanced.locking.meanings\"/> for clarification."
msgstr ""

#: ./build/en/book.xml:3980(para) 
msgid "Now we've covered most of the Subversion client commands. Notable exceptions are those dealing with branching and merging (see <xref linkend=\"svn.branchmerge\"/>) and properties (see <xref linkend=\"svn.advanced.props\"/>). However, you may want to take a moment to skim through <xref linkend=\"svn.ref\"/> to get an idea of all the many different commands that Subversion has—and how you can use them to make your work easier."
msgstr ""

#: ./build/en/book.xml:4000(title) 
msgid "Advanced Topics"
msgstr ""

#: ./build/en/book.xml:4002(para) 
msgid "If you've been reading this book chapter by chapter, from start to finish, you should by now have acquired enough knowledge to use the Subversion client to perform the most common version control operations. You understand how to checkout a working copy from a Subversion repository. You are comfortable with submitting and receiving changes using the <command moreinfo=\"none\">svn commit</command> and <command moreinfo=\"none\">svn update</command> functions. You've probably even developed a reflex which causes you to run the <command moreinfo=\"none\">svn status</command> command almost unconsciously. For all intents and purposes, you are ready to use Subversion in a typical environment."
msgstr ""

#: ./build/en/book.xml:4014(para) 
msgid "But the Subversion feature set doesn't stop at <quote>common version control operations</quote>. It has other bits of functionality that extend beyond just communicating file and directory changes to and from a central repository."
msgstr ""

#: ./build/en/book.xml:4019(para) 
msgid "This chapter highlights some of Subversion's features that, while important, aren't part of the typical user's daily routine. It assumes that you are familiar with Subversion's basic file and directory versioning capabilities. If you aren't, you'll want to first read <xref linkend=\"svn.basic\"/> and <xref linkend=\"svn.tour\"/>. Once you've mastered those basics and consumed this chapter, you'll be a Subversion power-user!"
msgstr ""

#: ./build/en/book.xml:4031(title) 
msgid "Revision Specifiers"
msgstr ""

#: ./build/en/book.xml:4033(para) 
msgid "As you saw in <xref linkend=\"svn.basic.in-action.revs\"/>, revision numbers in Subversion are pretty straightforward—integers that keep getting larger as you commit more changes to your versioned data. Still, it doesn't take long before you can no longer remember exactly what happened in each and every revision. Fortunately, the typical Subversion workflow doesn't often demand that you supply arbitrary revisions to the Subversion operations you perform. For operations that <emphasis>do</emphasis> require a revision specifier, you generally supply a revision number that you saw in a commit email, in the output of some other Subversion operation, or in some other context that would yield meaning to that particular number."
msgstr ""

#: ./build/en/book.xml:4047(para) 
msgid "But occasionally, you need to pinpoint a moment in time for which you don't already have a revision number memorized or handy. So besides the integer revision numbers, <command moreinfo=\"none\">svn</command> allows as input some additional forms of revision specifiers—revision keywords, and revision dates."
msgstr ""

#: ./build/en/book.xml:4055(para) 
msgid "The various forms of Subversion revision specifiers can be mixed and matched when used to specify revision ranges. For example, you can use <option>-r <replaceable>REV1</replaceable>:<replaceable>REV2</replaceable></option> where <replaceable>REV1</replaceable> is a revision keyword and <replaceable>REV2</replaceable> is a revision number, or where <replaceable>REV1</replaceable> is a date and <replaceable>REV2</replaceable> is a revision keyword, and so on. The individual revision specifiers are independently evaluated, so you can put whatever you want on the opposite sides of that colon."
msgstr ""

#: ./build/en/book.xml:4070(title) 
msgid "Revision Keywords"
msgstr ""

#: ./build/en/book.xml:4073(primary) ./build/en/book.xml:4180(primary) 
msgid "revisions"
msgstr ""

#: ./build/en/book.xml:4074(secondary) 
msgid "revision keywords"
msgstr ""

#: ./build/en/book.xml:4077(primary) ./build/en/book.xml:4098(term) 
msgid "HEAD"
msgstr ""

#: ./build/en/book.xml:4080(primary) ./build/en/book.xml:4106(term) 
msgid "BASE"
msgstr ""

#: ./build/en/book.xml:4083(primary) ./build/en/book.xml:4116(term) 
msgid "COMMITTED"
msgstr ""

#: ./build/en/book.xml:4086(primary) ./build/en/book.xml:4124(term) 
msgid "PREV"
msgstr ""

#: ./build/en/book.xml:4089(para) 
msgid "The Subversion client understands a number of <firstterm>revision keywords</firstterm>. These keywords can be used instead of integer arguments to the <option>--revision (-r)</option> switch, and are resolved into specific revision numbers by Subversion:"
msgstr ""

#: ./build/en/book.xml:4100(para) 
msgid "The latest (or <quote>youngest</quote>) revision in the repository."
msgstr ""

#: ./build/en/book.xml:4108(para) 
msgid "The revision number of an item in a working copy. If the item has been locally modified, the <quote>BASE version</quote> refers to the way the item appears without those local modifications."
msgstr ""

#: ./build/en/book.xml:4118(para) 
msgid "The most recent revision prior to, or equal to, <literal moreinfo=\"none\">BASE</literal>, in which an item changed."
msgstr ""

#: ./build/en/book.xml:4126(para) 
msgid "The revision immediately <emphasis>before</emphasis> the last revision in which an item changed. Technically, this boils down to <literal moreinfo=\"none\">COMMITTED</literal>-1."
msgstr ""

#: ./build/en/book.xml:4135(para) 
msgid "As can be derived from their descriptions, the <literal moreinfo=\"none\">PREV</literal>, <literal moreinfo=\"none\">BASE</literal>, and <literal moreinfo=\"none\">COMMITTED</literal> revision keywords are used only when referring to a working copy path—they don't apply to repository URLs. <literal moreinfo=\"none\">HEAD</literal>, on the other hand, can be used in conjuction with both of these path types."
msgstr ""

#: ./build/en/book.xml:4143(para) 
msgid "Here are some examples of revision keywords in action:"
msgstr ""

#: ./build/en/book.xml:4146(screen) 
#, no-wrap
msgid "\n$ svn diff -r PREV:COMMITTED foo.c\n# shows the last change committed to foo.c\n\n$ svn log -r HEAD\n# shows log message for the latest repository commit\n\n$ svn diff -r HEAD\n# compares your working copy (with all of its local changes) to the\n# latest version of that tree in the repository\n\n$ svn diff -r BASE:HEAD foo.c\n# compares the unmodified version of foo.c with the latest version of\n# foo.c in the repository\n\n$ svn log -r BASE:HEAD\n# shows all commit logs for the current versioned directory since you\n# last updated\n\n$ svn update -r PREV foo.c\n# rewinds the last change on foo.c, decreasing foo.c's working revision\n\n$ svn diff -r BASE:14 foo.c\n# compares the unmodified version of foo.c with the way foo.c looked\n# in revision 14\n"
msgstr ""

#: ./build/en/book.xml:4177(title) 
msgid "Revision Dates"
msgstr ""

#: ./build/en/book.xml:4181(secondary) 
msgid "specified as dates"
msgstr ""

#: ./build/en/book.xml:4184(para) 
msgid "Revision numbers reveal nothing about the world outside the version control system, but sometimes you need to correlate a moment in real time with a moment in version history. To facilitate this, the <option>--revision (-r)</option> option can also accept as input date specifiers wrapped in curly braces (<literal moreinfo=\"none\">{</literal> and <literal moreinfo=\"none\">}</literal>). Subversion accepts the standard ISO-8601 date and time formats, plus a few others. Here are some examples. (Remember to use quotes around any date that contains spaces.)"
msgstr ""

#: ./build/en/book.xml:4195(screen) 
#, no-wrap
msgid "\n$ svn checkout -r {2006-02-17}\n$ svn checkout -r {15:30}\n$ svn checkout -r {15:30:00.200000}\n$ svn checkout -r {\"2006-02-17 15:30\"}\n$ svn checkout -r {\"2006-02-17 15:30 +0230\"}\n$ svn checkout -r {2006-02-17T15:30}\n$ svn checkout -r {2006-02-17T15:30Z}\n$ svn checkout -r {2006-02-17T15:30-04:00}\n$ svn checkout -r {20060217T1530}\n$ svn checkout -r {20060217T1530Z}\n$ svn checkout -r {20060217T1530-0500}\n…\n"
msgstr ""

#: ./build/en/book.xml:4210(para) 
msgid "When you specify a date, Subversion resolves that date to the most recent revision of the repository as of that date, and then continues to operate against that resolved revision number:"
msgstr ""

#: ./build/en/book.xml:4215(screen) 
#, no-wrap
msgid "\n$ svn log -r {2006-11-28}\n------------------------------------------------------------------------\nr12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines\n…\n"
msgstr ""

#: ./build/en/book.xml:4223(title) 
msgid "Is Subversion a Day Early?"
msgstr ""

#: ./build/en/book.xml:4225(para) 
msgid "If you specify a single date as a revision without specifying a time of day (for example <literal moreinfo=\"none\">2006-11-27</literal>), you may think that Subversion should give you the last revision that took place on the 27th of November. Instead, you'll get back a revision from the 26th, or even earlier. Remember that Subversion will find the <emphasis>most recent revision of the repository</emphasis> as of the date you give. If you give a date without a timestamp, like <literal moreinfo=\"none\">2006-11-27</literal>, Subversion assumes a time of 00:00:00, so looking for the most recent revision won't return anything on the day of the 27th."
msgstr ""

#: ./build/en/book.xml:4238(para) 
msgid "If you want to include the 27th in your search, you can either specify the 27th with the time (<literal moreinfo=\"none\">{\"2006-11-27 23:59\"}</literal>), or just specify the next day (<literal moreinfo=\"none\">{2006-11-28}</literal>)."
msgstr ""

#: ./build/en/book.xml:4245(para) 
msgid "You can also use a range of dates. Subversion will find all revisions between both dates, inclusive:"
msgstr ""

#: ./build/en/book.xml:4248(screen) 
#, no-wrap
msgid "\n$ svn log -r {2006-11-20}:{2006-11-29}\n…\n"
msgstr ""

#: ./build/en/book.xml:4254(para) 
msgid "Since the timestamp of a revision is stored as an unversioned, modifiable property of the revision (see <xref linkend=\"svn.advanced.props\"/>, revision timestamps can be changed to represent complete falsifications of true chronology, or even removed altogether. This will wreak havoc on the internal date-to-revision conversion that Subversion performs."
msgstr ""

#: ./build/en/book.xml:4270(title) 
msgid "Properties"
msgstr ""

#: ./build/en/book.xml:4272(primary) 
msgid "properties"
msgstr ""

#: ./build/en/book.xml:4275(para) 
msgid "We've already covered in detail how Subversion stores and retrieves various versions of files and directories in its repository. Whole chapters have been devoted to this most fundamental piece of functionality provided by the tool. And if the versioning support stopped there, Subversion would still be complete from a version control perspective."
msgstr ""

#: ./build/en/book.xml:4282(para) 
msgid "But it doesn't stop there."
msgstr ""

#: ./build/en/book.xml:4284(para) 
msgid "In addition to versioning your directories and files, Subversion provides interfaces for adding, modifying, and removing versioned metadata on each of your versioned directories and files. We refer to this metadata as <firstterm>properties</firstterm>, and they can be thought of as two-column tables that map property names to arbitrary values attached to each item in your working copy. Generally speaking, the names and values of the properties can be whatever you want them to be, with the constraint that the names must be human-readable text. And the best part about these properties is that they, too, are versioned, just like the textual contents of your files. You can modify, commit, and revert property changes as easily as you can file content changes. And the sending and receiving of property changes occurs as part of your typical commit and update operations—you don't have to change your basic processes to accomodate them."
msgstr ""

#: ./build/en/book.xml:4301(para) 
msgid "Properties show up elsewhere in Subversion, too. Just as files and directories may have arbitrary property names and values attached to them, each revision as a whole may have arbitrary properties attached to it. The same constraints apply—human-readable names and anything-you-want binary values. The main difference is that revision properties are not versioned. In other words, if you change the value of, or delete, a revision property, there's no way within the scope of Subversion's functionality to recover the previous value."
msgstr ""

#: ./build/en/book.xml:4311(para) 
msgid "Subversion has no particular policy regarding the use of properties. It asks only that you not use property names that begin with the prefix <literal moreinfo=\"none\">svn:</literal>. That's the namespace that it sets aside for its own use. And Subversion does, in fact, use properties, both the versioned and unversioned variety. Certain versioned properties have special meaning or effects when found on files and directories, or house a particular bit of information about the revisions on which they are found. Certain revision properties are automatically attached to revisions by Subversion's commit process, and carry information about the revision. Most of these properties are mentioned elsewhere in this or other chapters as part of the more general topics to which they are related. For an exhaustive list of Subversion's pre-defined properties, see <xref linkend=\"svn.ref.properties\"/>."
msgstr ""

#: ./build/en/book.xml:4327(para) 
msgid "In this section, we will examine the utility—both to users of Subversion, and to Subversion itself—of property support. You'll learn about the property-related <command moreinfo=\"none\">svn</command> subcommands, and how property modifications affect your normal Subversion workflow. Hopefully, you'll be convinced that Subversion properties can enhance your version control experience."
msgstr ""

#: ./build/en/book.xml:4337(title) 
msgid "Why Properties?"
msgstr ""

#: ./build/en/book.xml:4339(para) 
msgid "Just as Subversion uses properties to store extra information about the files, directories, and revisions that it contains, you might also find properties to be of similar use. Some part of the processes around Subversion's usage to which you adhere, or maybe some additional tooling around Subversion that you use, might find utility in having a place close to your versioned data to hang custom metadata about that data."
msgstr ""

#: ./build/en/book.xml:4348(para) 
msgid "Say you wish to design a website that houses many digital photos, and displays them with captions and a datestamp. Now, your set of photos is constantly changing, so you'd like to have as much of this site automated as possible. These photos can be quite large, so as is common with sites of this nature, you want to provide smaller thumbnail images to your site visitors."
msgstr ""

#: ./build/en/book.xml:4356(para) 
msgid "Now, you can get this functionality using traditional files. That is, you can have your <filename moreinfo=\"none\">image123.jpg</filename> and an <filename moreinfo=\"none\">image123-thumbnail.jpg</filename> side-by-side in a directory. Or if you want to keep the filenames the same, you might have your thumbnails in a different directory, like <filename moreinfo=\"none\">thumbnails/image123.jpg</filename>. You can also store your captions and datestamps in a similar fashion, again separated from the original image file. But the problem here is that your collection of files grows in multiples with each new photo added to the site."
msgstr ""

#: ./build/en/book.xml:4368(para) 
msgid "Now consider the same website deployed in a way that makes use of Subversion's file properties. Imagine having a single image file, <filename moreinfo=\"none\">image123.jpg</filename>, and then properties set on that file named <literal moreinfo=\"none\">caption</literal>, <literal moreinfo=\"none\">datestamp</literal>, and even <literal moreinfo=\"none\">thumbnail</literal>. Now your working copy directory looks much more manageable—in fact, it looks to the casual browser like there are nothing but image files in it. But your automation scripts know better. They know that they can use <command moreinfo=\"none\">svn</command> (or better yet, they can use the Subversion language bindings—see <xref linkend=\"svn.developer.usingapi.otherlangs\"/>) to dig out the extra information that your site needs to display without having to read an index file or play path manipulation games."
msgstr ""

#: ./build/en/book.xml:4383(para) 
msgid "Custom revision properties are also frequently used. One common such use is a property whose value contains an issue tracker ID with which the revision is associated, perhaps because the change made in that revision fixes a bug filed in the tracker issue with that ID. Other uses include hanging more friendly names on the revision—it might be hard to remember that revision 1935 was a fully tested revision. But if there's, say, a <literal moreinfo=\"none\">test-results</literal> property on that revision with a value <literal moreinfo=\"none\">all passing</literal>, that's meaningful information to have."
msgstr ""

#: ./build/en/book.xml:4395(title) 
msgid "Searchability (or, Why <emphasis>Not</emphasis> Properties)"
msgstr ""

#: ./build/en/book.xml:4398(para) 
msgid "For all their utility, Subversion properties—or, more accurately, the available interfaces to them—have a major shortcoming which diminishes their practicality. While it is a simple matter to set a custom property, <emphasis>finding</emphasis> that property later is whole different ball of wax."
msgstr ""

#: ./build/en/book.xml:4405(para) 
msgid "Trying to locate a custom revision property generally involves performing a linear walk across all the revisions of the repository, asking of each revision, \"Do you have the property I'm looking for?\" Trying to find a custom versioned property is painful, too, and often involves a recursive <command moreinfo=\"none\">svn propget</command> across an entire working copy. In your situation, that might not be as bad as a linear walk across all revisions. But it certainly leaves much to be desired in terms of both performance and likelihood of success, especially if the scope of your search would require a working copy from the root of your repository."
msgstr ""

#: ./build/en/book.xml:4418(para) 
msgid "For this reason, you might choose—especially in the revision property use-case—to simply add your metadata to the revision's log message, using some policy-driven (and perhaps programmatically-enforced) formatting that is designed to be quickly parsed from the output of <command moreinfo=\"none\">svn log</command>. It is quite common to see in Subversion log messages the likes of:"
msgstr ""

#: ./build/en/book.xml:4426(programlisting) 
#, no-wrap
msgid "\nIssue(s): IZ2376, IZ1919\nReviewed by:  sally\n\nThis fixes a nasty segfault in the wort frabbing process\n…\n"
msgstr ""

#: ./build/en/book.xml:4434(para) 
msgid "But here again lies some misfortune. Subversion doesn't yet provide a log message templating mechanism, which would go a long way toward helping users be consistent with the formatting of their log-embedded revision metadata."
msgstr ""

#: ./build/en/book.xml:4445(title) 
msgid "Manipulating Properties"
msgstr ""

#: ./build/en/book.xml:4447(para) 
msgid "The <command moreinfo=\"none\">svn</command> command affords a few ways to add or modify file and directory properties. For properties with short, human-readable values, perhaps the simplest way to add a new property is to specify the property name and value on the command-line of the <command moreinfo=\"none\">propset</command> subcommand."
msgstr ""

#: ./build/en/book.xml:4454(screen) 
#, no-wrap
msgid "\n$ svn propset copyright '(c) 2006 Red-Bean Software' calc/button.c\nproperty 'copyright' set on 'calc/button.c'\n$\n"
msgstr ""

#: ./build/en/book.xml:4460(para) 
msgid "But we've been touting the flexibility that Subversion offers for your property values. And if you are planning to have a multi-line textual, or even binary, property value, you probably do not want to supply that value on the command-line. So the <command moreinfo=\"none\">propset</command> subcommand takes a <option>--file (-F)</option> option for specifying the name of a file which contains the new property value."
msgstr ""

#: ./build/en/book.xml:4468(screen) 
#, no-wrap
msgid "\n$ svn propset license -F /path/to/LICENSE calc/button.c\nproperty 'license' set on 'calc/button.c'\n$\n"
msgstr ""

#: ./build/en/book.xml:4481(para) 
msgid "If you're familiar with XML, this is pretty much the ASCII subset of the syntax for XML \"Name\"."
msgstr ""

#: ./build/en/book.xml:4474(para) 
msgid "There are some restrictions on the names you can use for properties. A property name must start with a letter, a colon (<literal moreinfo=\"none\">:</literal>), or an underscore (<literal moreinfo=\"none\">_</literal>); after that, you can also use digits, hyphens (<literal moreinfo=\"none\">-</literal>), and periods (<literal moreinfo=\"none\">.</literal>). <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:4486(para) 
msgid "In addition to the <command moreinfo=\"none\">propset</command> command, the <command moreinfo=\"none\">svn</command> program supplies the <command moreinfo=\"none\">propedit</command> command. This command uses the configured editor program (see <xref linkend=\"svn.advanced.confarea.opts.config\"/>) to add or modify properties. When you run the command, <command moreinfo=\"none\">svn</command> invokes your editor program on a temporary file that contains the current value of the property (or which is empty, if you are adding a new property). Then, you just modify that value in your editor program until it represents the new value you wish to store for the property, save the temporary file, and then exit the editor program. If Subversion detects that you've actually changed the existing value of the property, it will accept that as the new property value. If you exit your editor without making any changes, no property modification will occur."
msgstr ""

#: ./build/en/book.xml:4502(screen) 
#, no-wrap
msgid "\n$ svn propedit copyright calc/button.c  ### exit the editor without changes\nNo changes to property 'copyright' on 'calc/button.c'\n$\n"
msgstr ""

#: ./build/en/book.xml:4508(para) 
msgid "We should note that, as with other <command moreinfo=\"none\">svn</command> subcommands, those related to properties can act on multiple paths at once. This enables you to modify properties on whole sets of files with a single command. For example, we could have done:"
msgstr ""

#: ./build/en/book.xml:4514(screen) 
#, no-wrap
msgid "\n$ svn propset copyright '(c) 2006 Red-Bean Software' calc/*\nproperty 'copyright' set on 'calc/Makefile'\nproperty 'copyright' set on 'calc/button.c'\nproperty 'copyright' set on 'calc/integer.c'\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:4523(para) 
msgid "All of this property adding and editing isn't really very useful if you can't easily get the stored property value. So the <command moreinfo=\"none\">svn</command> program supplies two subcommands for displaying the names and values of properties stored on files and directories. The <command moreinfo=\"none\">svn proplist</command> command will list the names of properties that exist on a path. Once you know the names of the properties on the node, you can request their values individually using <command moreinfo=\"none\">svn propget</command>. This command will, given a path (or set of paths) and a property name, print the value of the property to the standard output stream."
msgstr ""

#: ./build/en/book.xml:4535(screen) 
#, no-wrap
msgid "\n$ svn proplist calc/button.c\nProperties on 'calc/button.c':\n  copyright\n  license\n$ svn propget copyright calc/button.c\n(c) 2006 Red-Bean Software\n"
msgstr ""

#: ./build/en/book.xml:4544(para) 
msgid "There's even a variation of the <command moreinfo=\"none\">proplist</command> command that will list both the name and value of all of the properties. Simply supply the <option>--verbose</option> (<option>-v</option>) option."
msgstr ""

#: ./build/en/book.xml:4549(screen) 
#, no-wrap
msgid "\n$ svn proplist -v calc/button.c\nProperties on 'calc/button.c':\n  copyright : (c) 2006 Red-Bean Software\n  license : ================================================================\nCopyright (c) 2006 Red-Bean Software.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions \nare met:\n\n1. Redistributions of source code must retain the above copyright\nnotice, this list of conditions, and the recipe for Fitz's famous\nred-beans-and-rice.\n…\n"
msgstr ""

#: ./build/en/book.xml:4566(para) 
msgid "The last property-related subcommand is <command moreinfo=\"none\">propdel</command>. Since Subversion allows you to store properties with empty values, you can't remove a property altogether using <command moreinfo=\"none\">propedit</command> or <command moreinfo=\"none\">propset</command>. For example, this command will <emphasis>not</emphasis> yield the desired effect:"
msgstr ""

#: ./build/en/book.xml:4573(screen) 
#, no-wrap
msgid "\n$ svn propset license '' calc/button.c\nproperty 'license' set on 'calc/button.c'\n$ svn proplist -v calc/button.c\nProperties on 'calc/button.c':\n  copyright : (c) 2006 Red-Bean Software\n  license : \n$\n"
msgstr ""

#: ./build/en/book.xml:4583(para) 
msgid "You need to use the <command moreinfo=\"none\">propdel</command> subcommand to delete properties altogether. The syntax is similar to the other property commands:"
msgstr ""

#: ./build/en/book.xml:4587(screen) 
#, no-wrap
msgid "\n$ svn propdel license calc/button.c\nproperty 'license' deleted from 'calc/button.c'.\n$ svn proplist -v calc/button.c\nProperties on 'calc/button.c':\n  copyright : (c) 2006 Red-Bean Software\n$\n"
msgstr ""

#: ./build/en/book.xml:4610(para) 
msgid "Fixing spelling errors, grammatical gotchas, and <quote>just-plain-wrongness</quote> in commit log messages is perhaps the most common use case for the <option>--revprop</option> option."
msgstr ""

#: ./build/en/book.xml:4596(para) 
msgid "Remember those unversioned revision properties? You can modify those, too, using the same <command moreinfo=\"none\">svn</command> subcommands that we just described. Simply add the <option>--revprop</option> command-line parameter, and specify the revision whose property you wish to modify. Since revisions are global, you don't need to specify a target path to these property-related commands so long as you are positioned in a working copy of the repository whose revision property you wish to modify. Otherwise, you can simply provide the URL of any path in the repository of interest (including the repository's root URL). For example, you might want to replace the commit log message of an existing revision. <placeholder-1/> If your current working directory is part of a working copy of your repository, you can simply run the <command moreinfo=\"none\">svn propset</command> command with no target path:"
msgstr ""

#: ./build/en/book.xml:4619(screen) 
#, no-wrap
msgid "\n$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop\nproperty 'svn:log' set on repository revision '11'\n$\n"
msgstr ""

#: ./build/en/book.xml:4625(para) 
msgid "But even if you haven't checked out a working copy from that repository, you can still affect the property change by providing the repository's root URL:"
msgstr ""

#: ./build/en/book.xml:4629(screen) 
#, no-wrap
msgid "\n$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop \\\n              http://svn.example.com/repos/project\nproperty 'svn:log' set on repository revision '11'\n$\n"
msgstr ""

#: ./build/en/book.xml:4636(para) 
msgid "Note that the ability to modify these unversioned properties must be explicitly added by the repository administrator (see <xref linkend=\"svn.reposadmin.create.hooks\"/>). Since the properties aren't versioned, you run the risk of losing information if you aren't careful with your edits. The repository administrator can setup methods to protect against this loss, and by default, modification of unversioned properties is disabled."
msgstr ""

#: ./build/en/book.xml:4646(para) 
msgid "Users should, where possible, use <command moreinfo=\"none\">svn propedit</command> instead of <command moreinfo=\"none\">svn propset</command>. While the end result of the commands is identical, the former will allow them to see the current value of the property they are about to change, which helps them to verify that they are, in fact, making the change they think they are making. This is especially true when modifying unversioned revision properties. Also, it is significantly easier to modify multiline property values in a text editor than at the command line."
msgstr ""

#: ./build/en/book.xml:4662(title) 
msgid "Properties and the Subversion Workflow"
msgstr ""

#: ./build/en/book.xml:4664(para) 
msgid "Now that you are familiar with all of the property-related <command moreinfo=\"none\">svn</command> subcommands, let's see how property modifications affect the usual Subversion workflow. As we mentioned earlier, file and directory properties are versioned, just like your file contents. As a result, Subversion provides the same opportunities for merging—in cleanly or conflicting fashions—someone else's modifications into your own."
msgstr ""

#: ./build/en/book.xml:4673(para) 
msgid "And as with file contents, your property changes are local modifications, only made permanent when you commit them to the repository with <command moreinfo=\"none\">svn commit</command>. Your property changes can be easily unmade, too—the <command moreinfo=\"none\">svn revert</command> command will restore your files and directories to their un-edited states, contents, properties, and all. Also, you can receive interesting information about the state of your file and directory properties by using the <command moreinfo=\"none\">svn status</command> and <command moreinfo=\"none\">svn diff</command> commands."
msgstr ""

#: ./build/en/book.xml:4684(screen) 
#, no-wrap
msgid "\n$ svn status calc/button.c\n M     calc/button.c\n$ svn diff calc/button.c\nProperty changes on: calc/button.c\n___________________________________________________________________\nName: copyright\n   + (c) 2006 Red-Bean Software\n\n$\n"
msgstr ""

#: ./build/en/book.xml:4696(para) 
msgid "Notice how the <command moreinfo=\"none\">status</command> subcommand displays <literal moreinfo=\"none\">M</literal> in the second column instead of the first. That is because we have modified the properties on <filename moreinfo=\"none\">calc/button.c</filename>, but not modified its textual contents. Had we changed both, we would have seen <literal moreinfo=\"none\">M</literal> in the first column, too (see <xref linkend=\"svn.tour.cycle.examine.status\"/>)."
msgstr ""

#: ./build/en/book.xml:4704(title) 
msgid "Property Conflicts"
msgstr ""

#: ./build/en/book.xml:4706(para) 
msgid "As with file contents, local property modifications can conflict with changes committed by someone else. If you update your working copy directory and receive property changes on a versioned object that clash with your own, Subversion will report that the object is in a conflicted state."
msgstr ""

#: ./build/en/book.xml:4713(screen) 
#, no-wrap
msgid "\n% svn update calc\nM  calc/Makefile.in\n C calc/button.c\nUpdated to revision 143.\n$ \n"
msgstr ""

#: ./build/en/book.xml:4721(para) 
msgid "Subversion will also create, in the same directory as the conflicted object, a file with a <filename moreinfo=\"none\">.prej</filename> extension which contains the details of the conflict. You should examine the contents of this file so you can decide how to resolve the conflict. Until the conflict is resolved, you will see a <literal moreinfo=\"none\">C</literal> in the second column of <command moreinfo=\"none\">svn status</command> output for that object, and attempts to commit your local modifications will fail."
msgstr ""

#: ./build/en/book.xml:4731(screen) 
#, no-wrap
msgid "\n$ svn status calc\n C     calc/button.c\n?      calc/button.c.prej\n$ cat calc/button.c.prej \nprop 'linecount': user set to '1256', but update set to '1301'.\n$\n"
msgstr ""

#: ./build/en/book.xml:4740(para) 
msgid "To resolve property conflicts, simply ensure that the conflicting properties contain the values that they should, and then use the <command moreinfo=\"none\">svn resolved</command> command to alert Subversion that you have manually resolved the problem."
msgstr ""

#: ./build/en/book.xml:4748(para) 
msgid "You might also have noticed the non-standard way that Subversion currently displays property differences. You can still run <command moreinfo=\"none\">svn diff</command> and redirect the output to create a usable patch file. The <command moreinfo=\"none\">patch</command> program will ignore property patches—as a rule, it ignores any noise it can't understand. This does unfortunately mean that to fully apply a patch generated by <command moreinfo=\"none\">svn diff</command>, any property modifications will need to be applied by hand."
msgstr ""

#: ./build/en/book.xml:4762(title) 
msgid "Automatic Property Setting"
msgstr ""

#: ./build/en/book.xml:4764(para) 
msgid "Properties are a powerful feature of Subversion, acting as key components of many Subversion features discussed elsewhere in this and other chapters—textual diff and merge support, keyword substitution, newline translation, etc. But to get the full benefit of properties, they must be set on the right files and directories. Unfortunately, that can be a step easily forgotten in the routine of things, especially since failing to set a property doesn't usually result in an obvious error condition (at least compared to, say, failing to add a file to version control). To help your properties get applied to the places that need them, Subversion provides a couple of simple but useful features."
msgstr ""

#: ./build/en/book.xml:4777(para) 
msgid "Whenever you introduce a file to version control using the <command moreinfo=\"none\">svn add</command> or <command moreinfo=\"none\">svn import</command> commands, Subversion tries to assist by setting some common file properties automatically. First, on operating systems whose filesystems support an execute permission bit, Subversion will automatically set the <literal moreinfo=\"none\">svn:executable</literal> property on newly added or imported files whose execute bit is enabled. (See <xref linkend=\"svn.advanced.props.special.executable\"/> for more about this property.) Secondly, it runs a very basic heuristic to determine if that file contains human-readable content. If not, Subversion will automatically set the <literal moreinfo=\"none\">svn:mime-type</literal> property on that file to <literal moreinfo=\"none\">application/octet-stream</literal> (the generic <quote>this is a collection of bytes</quote> MIME type). Of course, if Subversion guesses incorrectly, or if you wish to set the <literal moreinfo=\"none\">svn:mime-type</literal> property to something more precise—perhaps <literal moreinfo=\"none\">image/png</literal> or <literal moreinfo=\"none\">application/x-shockwave-flash</literal>—you can always remove or edit that property. (For more on Subversion's use of MIME types, see <xref linkend=\"svn.advanced.props.special.mime-type\"/>.)"
msgstr ""

#: ./build/en/book.xml:4798(para) 
msgid "Subversion also provides, via its runtime configuration system (see <xref linkend=\"svn.advanced.confarea\"/>), a more flexible automatic property setting feature which allows you to create mappings of filename patterns to property names and values. Once again, these mappings affect adds and imports, and not only can override the default MIME type decision made by Subversion during those operations, but can also set additional Subversion or custom properties, too. For example, you might create a mapping that says that any time you add JPEG files—ones that match the pattern <literal moreinfo=\"none\">*.jpg</literal>—Subversion should automatically set the <literal moreinfo=\"none\">svn:mime-type</literal> property on those files to <literal moreinfo=\"none\">image/jpeg</literal>. Or perhaps any files that match <literal moreinfo=\"none\">*.cpp</literal> should have <literal moreinfo=\"none\">svn:eol-style</literal> set to <literal moreinfo=\"none\">native</literal>, and <literal moreinfo=\"none\">svn:keywords</literal> set to <literal moreinfo=\"none\">Id</literal>. Automatic property support is perhaps the handiest property related tool in the Subversion toolbox. See <xref linkend=\"svn.advanced.confarea.opts.config\"/> for more about configuring that support."
msgstr ""

#: ./build/en/book.xml:4826(title) 
msgid "File Portability"
msgstr ""

#: ./build/en/book.xml:4828(para) 
msgid "Fortunately for Subversion users who routinely find themselves on different computers with different operating systems, Subversion's command-line program behaves almost identically on all those systems. If you know how to wield <command moreinfo=\"none\">svn</command> on one platform, you know how to wield it everywhere."
msgstr ""

#: ./build/en/book.xml:4835(para) 
msgid "However, the same is not always true of other general classes of software, or of the actual files you keep in Subversion. For example, on a Windows machine, the definition of a <quote>text file</quote> would be similar to that used on a Linux box, but with a key difference—the character sequences used to mark the ends of the lines of those files. There are other differences, too. Unix platforms have (and Subversion supports) symbolic links; Windows does not. Unix platforms use filesystem permission to determine executability; Windows uses filename extensions."
msgstr ""

#: ./build/en/book.xml:4846(para) 
msgid "Because Subversion is in no position to unite the whole world in common definitions and implementations of all of these things, the best it can do is to try to help make your life simpler when you need to work with your versioned files and directories on multiple computers and operating systems. This section describes some of the ways Subversion does this."
msgstr ""

#: ./build/en/book.xml:4855(title) 
msgid "File Content Type"
msgstr ""

#: ./build/en/book.xml:4857(para) 
msgid "Subversion joins the ranks of the many applications which recognize and make use of Multipurpose Internet Mail Extensions (MIME) content types. Besides being a general-purpose storage location for a file's content type, the value of the <literal moreinfo=\"none\">svn:mime-type</literal> file property determines some behavioral characteristics of Subversion itself."
msgstr ""

#: ./build/en/book.xml:4866(title) 
msgid "Identifying File Types"
msgstr ""

#: ./build/en/book.xml:4868(para) 
msgid "Software programs on most modern operating systems make assumptions about the type and format of the contents of a file by the file's name, specifically its file extension. For example, files whose names end in <filename moreinfo=\"none\">.txt</filename> are generally assumed to be human-readable, able to be understood by simple perusal rather than requiring complex processing to decipher. Files whose names end in <filename moreinfo=\"none\">.png</filename>, on the other hand, are assumed to be of the Portable Network Graphics type—not human-readable at all, and sensible only when interpreted by software which understands the PNG format and can render the information in that format as a raster image."
msgstr ""

#: ./build/en/book.xml:4895(para) 
msgid "You think that was rough? During that same era, WordPerfect also used <filename moreinfo=\"none\">.DOC</filename> for their proprietary file format's preferred extension!"
msgstr ""

#: ./build/en/book.xml:4882(para) 
msgid "Unfortunately, some of those extensions have changed meanings over time. When personal computers first appeared, a file named <filename moreinfo=\"none\">README.DOC</filename> would have almost certainly been a plaintext file, just like today's <filename moreinfo=\"none\">.txt</filename> files. But by the mid-1990's, you could almost bet that a file of that name would not be a plaintext file at all, but instead a Microsoft Word document with a proprietary, non-human-readable format. But this change didn't occur overnight—there was certainly a period of confusion for computer users over what exactly they had in hand when they saw a <filename moreinfo=\"none\">.DOC</filename> file. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:4901(para) 
msgid "The popularity of computer networking cast still more doubt on the mapping between a file's name and its content. With information being served across networks and generated dynamically by server-side scripts, there was often no real file per se to speak of, and therefore no file name. Web servers, for example, needed some other way to tell browsers what they were downloading so the browser could do something intelligent with that information, whether that was to display the data using a program registered to handle that data type, or to prompt the user for where on the client machine to store the downloaded data."
msgstr ""

#: ./build/en/book.xml:4913(para) 
msgid "Eventually, a standard emerged for, among other things, describing the contents of a data stream. In 1996, RFC2045 was published, the first of five RFCs describing MIME. In it, this RFC describes the concept of media types and subtypes, and recommends a syntax for the representation of those types. Today, MIME media types—or, MIME types— are used almost universally across e-mail applications, Web servers, and other software as the de facto mechanism for clearing up the file content confusion."
msgstr ""

#: ./build/en/book.xml:4926(para) 
msgid "For example, one of the benefits that Subversion typically provides is contextual, line-based merging of changes received from the server during an update into your working file. But for files containing non-textual data, there is often no concept of a <quote>line</quote>. So, for versioned files whose <literal moreinfo=\"none\">svn:mime-type</literal> property is set to a non-textual MIME type (generally, something that doesn't begin with <literal moreinfo=\"none\">text/</literal>, though there are exceptions), Subversion does not attempt to perform contextual merges during updates. Instead, any time you have locally modified a binary working copy file that is also being updated, your file is renamed with a <filename moreinfo=\"none\">.orig</filename> extension, and then Subversion stores a new working copy file that contains the changes received during the update, but not your own local modifications, at the original filename. This behavior is really for the protection of the user against failed attempts at performing contextual merges on files that simply cannot be contextually merged."
msgstr ""

#: ./build/en/book.xml:4945(para) 
msgid "Also, if the <literal moreinfo=\"none\">svn:mime-type</literal> property is set, then the Subversion Apache module will use its value to populate the <literal moreinfo=\"none\">Content-type:</literal> HTTP header when responding to GET requests. This gives your web browser a crucial clue about how to display a file when using it to peruse your Subversion repository's contents."
msgstr ""

#: ./build/en/book.xml:4956(title) 
msgid "File Executability"
msgstr ""

#: ./build/en/book.xml:4958(para) 
msgid "On many operating systems, the ability to execute a file as a command is governed by the presence of an execute permission bit. This bit usually defaults to being disabled, and must be explicitly enabled by the user for each file that needs it. But it would be a monumental hassle to have to remember exactly which files in freshly checked-out working copy were supposed to have their executable bits toggled on, and then to have to do that toggling. So, Subversion provides the <literal moreinfo=\"none\">svn:executable</literal> property as a way to specify that the executable bit for the file on which that property is set should be enabled, and Subversion honors that request when populating working copies with such files."
msgstr ""

#: ./build/en/book.xml:4975(para) 
msgid "The Windows filesystems use file extensions (such as <literal moreinfo=\"none\">.EXE</literal>, <literal moreinfo=\"none\">.BAT</literal>, and <literal moreinfo=\"none\">.COM</literal>) to denote executable files."
msgstr ""

#: ./build/en/book.xml:4971(para) 
msgid "This property has no effect on filesystems that have no concept of an executable permission bit, such as FAT32 and NTFS. <placeholder-1/> Also, although it has no defined values, Subversion will force its value to <literal moreinfo=\"none\">*</literal> when setting this property. Finally, this property is valid only on files, not on directories."
msgstr ""

#: ./build/en/book.xml:4989(title) 
msgid "End-of-Line Character Sequences"
msgstr ""

#: ./build/en/book.xml:4991(para) 
msgid "Unless otherwise noted using a versioned file's <literal moreinfo=\"none\">svn:mime-type</literal> property, Subversion assumes the file contains human-readable data. Generally speaking, Subversion only uses this knowledge to determine if contextual difference reports for that file are possible. Otherwise, to Subversion, bytes are bytes."
msgstr ""

#: ./build/en/book.xml:4998(para) 
msgid "This means that by default, Subversion doesn't pay any attention to the type of <firstterm>end-of-line (EOL) markers</firstterm> used in your files. Unfortunately, different operating systems have different conventions about which character sequences represent the end of a line of text in a file. For example, the usual line ending token used by software on the Windows platform is a pair of ASCII control characters—a carriage return (<literal moreinfo=\"none\">CR</literal>) followed by a line feed (<literal moreinfo=\"none\">LF</literal>). Unix software, however, just uses the <literal moreinfo=\"none\">LF</literal> character to denote the end of a line."
msgstr ""

#: ./build/en/book.xml:5010(para) 
msgid "Not all of the various tools on these operating systems are prepared to understand files that contain line endings in a format that differs from the <firstterm>native line ending style</firstterm> of the operating system on which they are running. Common results are that Unix programs treat the <literal moreinfo=\"none\">CR</literal> character present in Windows files as a regular character (usually rendered as <literal moreinfo=\"none\">^M</literal>), and that Windows programs combine all of the lines of a Unix file into one giant line because no carriage return-linefeed (or <literal moreinfo=\"none\">CRLF</literal>) character combination was found to denote the end of line."
msgstr ""

#: ./build/en/book.xml:5023(para) 
msgid "This sensitivity to foreign EOL markers can become frustrating for folks who share a file across different operating systems. For example, consider a source code file, and developers that edit this file on both Windows and Unix systems. If all the developers always use tools which preserve the line ending style of the file, no problems occur."
msgstr ""

#: ./build/en/book.xml:5031(para) 
msgid "But in practice, many common tools either fail to properly read a file with foreign EOL markers, or they convert the file's line endings to the native style when the file is saved. If the former is true for a developer, he has to use an external conversion utility (such as <command moreinfo=\"none\">dos2unix</command> or its companion, <command moreinfo=\"none\">unix2dos</command>) to prepare the file for editing. The latter case requires no extra preparation. But both cases result in a file that differs from the original quite literally on every line! Prior to committing his changes, the user has two choices. Either he can use a conversion utility to restore the modified file to the same line ending style that it was in before his edits were made. Or, he can simply commit the file—new EOL markers and all."
msgstr ""

#: ./build/en/book.xml:5047(para) 
msgid "The result of scenarios like these include wasted time and unnecessary modifications to committed files. Wasted time is painful enough. But when commits change every line in a file, this complicates the job of determining which of those lines were changed in a non-trivial way. Where was that bug really fixed? On what line was a syntax error introduced?"
msgstr ""

#: ./build/en/book.xml:5055(para) 
msgid "The solution to this problem is the <literal moreinfo=\"none\">svn:eol-style</literal> property. When this property is set to a valid value, Subversion uses it to determine what special processing to perform on the file so that the file's line ending style isn't flip-flopping with every commit that comes from a different operating system. The valid values are:"
msgstr ""

#: ./build/en/book.xml:5065(literal) 
msgid "native"
msgstr ""

#: ./build/en/book.xml:5067(para) 
msgid "This causes the file to contain the EOL markers that are native to the operating system on which Subversion was run. In other words, if a user on a Windows machine checks out a working copy that contains a file with an <literal moreinfo=\"none\">svn:eol-style</literal> property set to <literal moreinfo=\"none\">native</literal>, that file will contain <literal moreinfo=\"none\">CRLF</literal> EOL markers. A Unix user checking out a working copy which contains the same file will see <literal moreinfo=\"none\">LF</literal> EOL markers in his copy of the file."
msgstr ""

#: ./build/en/book.xml:5079(para) 
msgid "Note that Subversion will actually store the file in the repository using normalized <literal moreinfo=\"none\">LF</literal> EOL markers regardless of the operating system. This is basically transparent to the user, though."
msgstr ""

#: ./build/en/book.xml:5087(literal) 
msgid "CRLF"
msgstr ""

#: ./build/en/book.xml:5089(para) 
msgid "This causes the file to contain <literal moreinfo=\"none\">CRLF</literal> sequences for EOL markers, regardless of the operating system in use."
msgstr ""

#: ./build/en/book.xml:5095(literal) 
msgid "LF"
msgstr ""

#: ./build/en/book.xml:5097(para) 
msgid "This causes the file to contain <literal moreinfo=\"none\">LF</literal> characters for EOL markers, regardless of the operating system in use."
msgstr ""

#: ./build/en/book.xml:5103(literal) 
msgid "CR"
msgstr ""

#: ./build/en/book.xml:5105(para) 
msgid "This causes the file to contain <literal moreinfo=\"none\">CR</literal> characters for EOL markers, regardless of the operating system in use. This line ending style is not very common. It was used on older Macintosh platforms (on which Subversion doesn't even run)."
msgstr ""

#: ./build/en/book.xml:5122(title) 
msgid "Ignoring Unversioned Items"
msgstr ""

#: ./build/en/book.xml:5124(para) 
msgid "In any given working copy there is a good chance that alongside all those versioned files and directories are other files and directories which are neither versioned nor intended to be. Text editors litter directories with backup files. Code compilation processes generate intermediate—or even final—files which you typically wouldn't bother to version. And users themselves drop various other files and directories wherever they see fit, often in version control working copies."
msgstr ""

#: ./build/en/book.xml:5134(para) 
msgid "It's ludicrous to expect Subversion working copies to be somehow impervious to this kind of clutter and impurity. In fact, Subversion counts it as a <emphasis>feature</emphasis> that its working copies are just typical directories, just like unversioned trees. But these not-to-be-versioned files and directories can cause some annoyance for Subversion users. For example, because the <command moreinfo=\"none\">svn add</command> and <command moreinfo=\"none\">svn import</command> commands act recursively by default, and don't know which files in a given tree you do and don't wish to version, it's easy to accidentally add stuff to version control that you didn't mean to. And because <command moreinfo=\"none\">svn status</command> reports, by default, every item of interest in a working copy—including unversioned files and directories—its output can get quite noisy where many of these things exist."
msgstr ""

#: ./build/en/book.xml:5150(para) 
msgid "So Subversion provides two ways for telling it which files you would prefer that it simply disregard. One of the ways involves the use of Subversion's runtime configuration system (see <xref linkend=\"svn.advanced.confarea\"/>), and therefore applies to all the Subversion operations which make use of that runtime configuration, generally those performed on a particular computer, or by a particular user of a computer. The other way makes use of Subversion's directory property support, is more tightly bound to the versioned tree itself, and therefore affects everyone who has a working copy of that tree. Both of the mechanisms use file patterns."
msgstr ""

#: ./build/en/book.xml:5162(para) 
msgid "The Subversion runtime configuration system provides an option, <literal moreinfo=\"none\">global-ignores</literal>, whose value is a whitespace-delimited collection of file patterns (or globs). These patterns are applied to files which are candidates for addition to version control, as well as to unversioned files which the <command moreinfo=\"none\">svn status</command> command notices. If the filenames match one of the patterns, Subversion will basically act as if the file didn't exist at all. This is really useful for file patterns which are nearly universally of the variety that you don't want to version, such as editor backup files like Emacs' <literal moreinfo=\"none\">*~</literal> and <literal moreinfo=\"none\">.*~</literal> files."
msgstr ""

#: ./build/en/book.xml:5175(para) 
msgid "When found on a versioned directory, the <literal moreinfo=\"none\">svn:ignore</literal> property is expected to contain a list of newline-delimited file patterns which Subversion should use to determine ignorable objects in that same directory. These patterns do not override those found in the <literal moreinfo=\"none\">global-ignores</literal> runtime configuration option, but are instead appended to that list. And it's worth noting again that, unlike the <literal moreinfo=\"none\">global-ignores</literal> option, the patterns found in the <literal moreinfo=\"none\">svn:eol-ignore</literal> property apply only to the directory on which that property is set, and not to any of its subdirectories. The <literal moreinfo=\"none\">svn:ignore</literal> property is a good way to tell Subversion to ignore files that are likely to be present in every user's working copy of that directory, such as compiler output or—to use an example more appropriate to this book—the HTML, PDF, or PostScript files generated as the result of a conversion of some source DocBook XML files to a more legible output format."
msgstr ""

#: ./build/en/book.xml:5195(para) 
msgid "Subversion's support for ignorable file patterns extends only to the one-time process of adding unversioned files and directories to version control. Once an object is under Subversion's control, the ignore pattern mechanisms no longer apply to it. In other words, don't expect Subversion to avoid committing changes you've made to a versioned file simply because that file's name matches an ignore pattern—Subversion <emphasis>always</emphasis> notices all of its versioned objects."
msgstr ""

#: ./build/en/book.xml:5207(title) 
msgid "Ignore Patterns for CVS Users"
msgstr ""

#: ./build/en/book.xml:5209(para) 
msgid "The Subversion <literal moreinfo=\"none\">svn:ignore</literal> property is very similar in syntax and function to the CVS <filename moreinfo=\"none\">.cvsignore</filename> file. In fact, if you are migrating a CVS working copy to Subversion, you can directly migrate the ignore patterns by using the <filename moreinfo=\"none\">.cvsignore</filename> file as input file to the <command moreinfo=\"none\">svn propset</command> command:"
msgstr ""

#: ./build/en/book.xml:5217(screen) 
#, no-wrap
msgid "\n$ svn propset svn:ignore -F .cvsignore .\nproperty 'svn:ignore' set on '.'\n$\n"
msgstr ""

#: ./build/en/book.xml:5223(para) 
msgid "There are, however, some differences in the ways that CVS and Subversion handle ignore patterns. The two systems use the ignore patterns at some different times, and there are slight discrepancies in what the ignore patterns apply to. Also, Subversion does not recognize the use of the <literal moreinfo=\"none\">!</literal> pattern as a reset back to having no ignore patterns at all."
msgstr ""

#: ./build/en/book.xml:5233(para) 
msgid "The global list of ignore patterns tends to be more a matter of personal taste, and tied more closely to a user's particular tool chain than to the details of any particular working copy's needs. So, the rest of this section will focus on the <literal moreinfo=\"none\">svn:ignore</literal> property and its uses."
msgstr ""

#: ./build/en/book.xml:5240(para) 
msgid "Say you have the following output from <command moreinfo=\"none\">svn status</command>:"
msgstr ""

#: ./build/en/book.xml:5243(screen) 
#, no-wrap
msgid "\n$ svn status calc\n M     calc/button.c\n?      calc/calculator\n?      calc/data.c\n?      calc/debug_log\n?      calc/debug_log.1\n?      calc/debug_log.2.gz\n?      calc/debug_log.3.gz\n"
msgstr ""

#: ./build/en/book.xml:5263(para) 
msgid "Isn't that the whole point of a build system?"
msgstr ""

#: ./build/en/book.xml:5254(para) 
msgid "In this example, you have made some property modifications to <filename moreinfo=\"none\">button.c</filename>, but in your working copy you also have some unversioned files: the latest <filename moreinfo=\"none\">calculator</filename> program that you've compiled from your source code, a source file named <filename moreinfo=\"none\">data.c</filename>, and a set of debugging output log files. Now, you know that your build system always results in the <filename moreinfo=\"none\">calculator</filename> program being generated. <placeholder-1/> And you know that your test suite always leaves those debugging log files lying around. These facts are true for all working copies of this project, not just your own. And you know that you aren't interested in seeing those things every time you run <command moreinfo=\"none\">svn status</command>, and pretty sure that nobody else is interested in them either. So you use <command moreinfo=\"none\">svn propedit svn:ignore calc</command> to add some ignore patterns to the <filename moreinfo=\"none\">calc</filename> directory. For example, you might add this as the new value of the <literal moreinfo=\"none\">svn:ignore</literal> property:"
msgstr ""

#: ./build/en/book.xml:5276(programlisting) 
#, no-wrap
msgid "\ncalculator\ndebug_log*\n"
msgstr ""

#: ./build/en/book.xml:5281(para) 
msgid "After you've added this property, you will now have a local property modification on the <filename moreinfo=\"none\">calc</filename> directory. But notice what else is different about your <command moreinfo=\"none\">svn status</command> output:"
msgstr ""

#: ./build/en/book.xml:5286(screen) 
#, no-wrap
msgid "\n$ svn status\n M     calc\n M     calc/button.c\n?      calc/data.c\n"
msgstr ""

#: ./build/en/book.xml:5293(para) 
msgid "Now, all that cruft is missing from the output! Of course, your <filename moreinfo=\"none\">calculator</filename> compiled program and all those logfiles are still in your working copy. Subversion is simply not reminding you that they are present and unversioned. And now with all the uninteresting noise removed from the display, you are left with more interesting items—such as that source code file <filename moreinfo=\"none\">data.c</filename> that you probably forgot to add to version control."
msgstr ""

#: ./build/en/book.xml:5302(para) 
msgid "Of course, this less-verbose report of your working copy status isn't the only one available. If you actually want to see the ignored files as part of the status report, you can pass the <option>--no-ignore</option> option to Subversion:"
msgstr ""

#: ./build/en/book.xml:5307(screen) 
#, no-wrap
msgid "\n$ svn status --no-ignore\n M     calc\n M     calc/button.c\nI      calc/calculator\n?      calc/data.c\nI      calc/debug_log\nI      calc/debug_log.1\nI      calc/debug_log.2.gz\nI      calc/debug_log.3.gz\n"
msgstr ""

#: ./build/en/book.xml:5319(para) 
msgid "As mentioned earlier, the list of file patterns to ignore is also used by <command moreinfo=\"none\">svn add</command> and <command moreinfo=\"none\">svn import</command>. Both of these operations involve asking Subversion to begin managing some set of files and directories. Rather than force the user to pick and choose which files in a tree she wishes to start versioning, Subversion uses the ignore patterns—both the global and the per-directory lists—to determine which files should not be swept into the version control system as part of a larger recursive addition or import operation. And here again, you can use the <option>--no-ignore</option> option to tell Subversion ignore its ignores list and operate on all the files and directories present."
msgstr ""

#: ./build/en/book.xml:5339(title) 
msgid "Keyword Substitution"
msgstr ""

#: ./build/en/book.xml:5341(para) 
msgid "Subversion has the ability to substitute <firstterm>keywords</firstterm>—pieces of useful, dynamic information about a versioned file—into the contents of the file itself. Keywords generally describe information about the last time the file was known to be modified. Because this information changes each time the file changes, and more importantly, just <emphasis>after</emphasis> the file changes, it is a hassle for any process except the version control system to keep the data completely up-to-date. Left to human authors, the information would inevitably grow stale."
msgstr ""

#: ./build/en/book.xml:5353(para) 
msgid "For example, say you have a document in which you would like to display the last date on which it was modified. You could burden every author of that document to, just before committing their changes, also tweak the part of the document that describes when it was last changed. But sooner or later, someone would forget to do that. Instead simply ask Subversion to perform keyword substitution on the <literal moreinfo=\"none\">LastChangedDate</literal> keyword. You control where the keyword is inserted into your document by placing a <firstterm>keyword anchor</firstterm> at the desired location in the file. This anchor is just a string of text formatted as <literal moreinfo=\"none\">$</literal><replaceable>KeywordName</replaceable><literal moreinfo=\"none\">$</literal>."
msgstr ""

#: ./build/en/book.xml:5367(para) 
msgid "All keywords are case-sensitive where they appear as anchors in files: you must use the correct capitalization in order for the keyword to be expanded. You should consider the value of the <literal moreinfo=\"none\">svn:keywords</literal> property to be case-sensitive too—certain keyword names will be recognized regardless of case, but this behavior is deprecated."
msgstr ""

#: ./build/en/book.xml:5374(para) 
msgid "Subversion defines the list of keywords available for substitution. That list contains the following five keywords, some of which have aliases that you can also use:"
msgstr ""

#: ./build/en/book.xml:5380(literal) 
msgid "Date"
msgstr ""

#: ./build/en/book.xml:5382(para) 
msgid "This keyword describes the last time the file was known to have been changed in the repository, and looks something like <literal moreinfo=\"none\">$Date: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $</literal>. It may also be specified as <literal moreinfo=\"none\">LastChangedDate</literal>."
msgstr ""

#: ./build/en/book.xml:5391(literal) ./build/en/book.xml:19596(para) 
msgid "Revision"
msgstr ""

#: ./build/en/book.xml:5393(para) 
msgid "This keyword describes the last known revision in which this file changed in the repository, and looks something like <literal moreinfo=\"none\">$Revision: 144 $</literal>. It may also be specified as <literal moreinfo=\"none\">LastChangedRevision</literal> or <literal moreinfo=\"none\">Rev</literal>."
msgstr ""

#: ./build/en/book.xml:5402(literal) 
msgid "Author"
msgstr ""

#: ./build/en/book.xml:5404(para) 
msgid "This keyword describes the last known user to change this file in the repository, and looks something like <literal moreinfo=\"none\">$Author: harry $</literal>. It may also be specified as <literal moreinfo=\"none\">LastChangedBy</literal>."
msgstr ""

#: ./build/en/book.xml:5412(literal) 
msgid "HeadURL"
msgstr ""

#: ./build/en/book.xml:5414(para) 
msgid "This keyword describes the full URL to the latest version of the file in the repository, and looks something like <literal moreinfo=\"none\">$HeadURL: http://svn.collab.net/repos/trunk/README $</literal>. It may be abbreviated as <literal moreinfo=\"none\">URL</literal>."
msgstr ""

#: ./build/en/book.xml:5423(literal) 
msgid "Id"
msgstr ""

#: ./build/en/book.xml:5425(para) 
msgid "This keyword is a compressed combination of the other keywords. Its substitution looks something like <literal moreinfo=\"none\">$Id: calc.c 148 2006-07-28 21:30:43Z sally $</literal>, and is interpreted to mean that the file <filename moreinfo=\"none\">calc.c</filename> was last changed in revision 148 on the evening of July 28, 2006 by the user <literal moreinfo=\"none\">sally</literal>."
msgstr ""

#: ./build/en/book.xml:5442(para) 
msgid "… or maybe even a section of a book …"
msgstr ""

#: ./build/en/book.xml:5436(para) 
msgid "Simply adding keyword anchor text to your file does nothing special. Subversion will never attempt to perform textual substitutions on your file contents unless explicitly asked to do so. After all, you might be writing a document <placeholder-1/> about how to use keywords, and you don't want Subversion to substitute your beautiful examples of un-substituted keyword anchors!"
msgstr ""

#: ./build/en/book.xml:5448(para) 
msgid "To tell Subversion whether or not to substitute keywords on a particular file, we again turn to the property-related subcommands. The <literal moreinfo=\"none\">svn:keywords</literal> property, when set on a versioned file, controls which keywords will be substituted on that file. The value is a space-delimited list of the keyword names or aliases found in the previous table."
msgstr ""

#: ./build/en/book.xml:5456(para) 
msgid "For example, say you have a versioned file named <filename moreinfo=\"none\">weather.txt</filename> that looks like this:"
msgstr ""

#: ./build/en/book.xml:5460(programlisting) 
#, no-wrap
msgid "\nHere is the latest report from the front lines.\n$LastChangedDate$\n$Rev$\nCumulus clouds are appearing more frequently as summer approaches.\n"
msgstr ""

#: ./build/en/book.xml:5467(para) 
msgid "With no <literal moreinfo=\"none\">svn:keywords</literal> property set on that file, Subversion will do nothing special. Now, let's enable substitution of the <literal moreinfo=\"none\">LastChangedDate</literal> keyword."
msgstr ""

#: ./build/en/book.xml:5472(screen) 
#, no-wrap
msgid "\n$ svn propset svn:keywords \"Date Author\" weather.txt\nproperty 'svn:keywords' set on 'weather.txt'\n$\n"
msgstr ""

#: ./build/en/book.xml:5478(para) 
msgid "Now you have made a local property modification on the <filename moreinfo=\"none\">weather.txt</filename> file. You will see no changes to the file's contents (unless you made some of your own prior to setting the property). Notice that the file contained a keyword anchor for the <literal moreinfo=\"none\">Rev</literal> keyword, yet we did not include that keyword in the property value we set. Subversion will happily ignore requests to substitute keywords that are not present in the file, and will not substitute keywords that are not present in the <literal moreinfo=\"none\">svn:keywords</literal> property value."
msgstr ""

#: ./build/en/book.xml:5489(para) 
msgid "Immediately after you commit this property change, Subversion will update your working file with the new substitute text. Instead of seeing your keyword anchor <literal moreinfo=\"none\">$LastChangedDate$</literal>, you'll see its substituted result. That result also contains the name of the keyword, and continues to be bounded by the dollar sign (<literal moreinfo=\"none\">$</literal>) characters. And as we predicted, the <literal moreinfo=\"none\">Rev</literal> keyword was not substituted because we didn't ask for it to be."
msgstr ""

#: ./build/en/book.xml:5499(para) 
msgid "Note also that we set the <literal moreinfo=\"none\">svn:keywords</literal> property to <quote>Date Author</quote> yet the keyword anchor used the alias <literal moreinfo=\"none\">$LastChangedDate$</literal> and still expanded correctly."
msgstr ""

#: ./build/en/book.xml:5504(screen) 
#, no-wrap
msgid "\nHere is the latest report from the front lines.\n$LastChangedDate: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $\n$Rev$\nCumulus clouds are appearing more frequently as summer approaches.\n"
msgstr ""

#: ./build/en/book.xml:5511(para) 
msgid "If someone else now commits a change to <filename moreinfo=\"none\">weather.txt</filename>, your copy of that file will continue to display the same substituted keyword value as before—until you update your working copy. At that time the keywords in your <filename moreinfo=\"none\">weather.txt</filename> file will be re-substituted with information that reflects the most recent known commit to that file."
msgstr ""

#: ./build/en/book.xml:5520(title) 
msgid "Where's $GlobalRev$?"
msgstr ""

#: ./build/en/book.xml:5522(para) 
msgid "New users are often confused by how the <literal moreinfo=\"none\">$Rev$</literal> keyword works. Since the repository has a single, globally increasing revision number, many people assume that it is this number which is reflected by the <literal moreinfo=\"none\">$Rev$</literal> keyword's value. But <literal moreinfo=\"none\">$Rev$</literal> expands to show the last revision in which the file <emphasis>changed</emphasis>, not the last revision to which it was updated. Understanding this clears the confusion, but frustration often remains—without the support of a Subversion keyword to do so, how can you automatically get the global revision number into your files?"
msgstr ""

#: ./build/en/book.xml:5535(para) 
msgid "To do this, you need external processing. Subversion ships with a tool called <command moreinfo=\"none\">svnversion</command> which was designed for just this purpose. <command moreinfo=\"none\">svnversion</command> crawls your working copy and generates as output the revision(s) it finds. You can use this program, plus some additionally tooling, to embed that revision information into your files. For more information on <command moreinfo=\"none\">svnversion</command>, see <xref linkend=\"svn.ref.svnversion\"/>."
msgstr ""

#: ./build/en/book.xml:5546(para) 
msgid "Subversion 1.2 introduced a new variant of the keyword syntax which brought additional, useful—though perhaps atypical—functionality. You can now tell Subversion to maintain a fixed length (in terms of the number of bytes consumed) for the substituted keyword. By using a double-colon (<literal moreinfo=\"none\">::</literal>) after the keyword name, followed by a number of space characters, you define that fixed width. When Subversion goes to substitute your keyword for the keyword and its value, it will essentially replace only those space characters, leaving the overall width of the keyword field unchanged. If the substituted value is shorter than the defined field width, there will be extra padding characters (spaces) at the end of the substituted field; if it is too long, it is truncated with a special hash (<literal moreinfo=\"none\">#</literal>) character just before the final dollar sign terminator."
msgstr ""

#: ./build/en/book.xml:5563(para) 
msgid "For example, say you have a document in which you have some section of tabular data reflecting the document's Subversion keywords. Using the original Subversion keyword substitution syntax, your file might look something like:"
msgstr ""

#: ./build/en/book.xml:5569(screen) 
#, no-wrap
msgid "\n$Rev$:     Revision of last commit\n$Author$:  Author of last commit\n$Date$:    Date of last commit\n"
msgstr ""

#: ./build/en/book.xml:5575(para) 
msgid "Now, that looks nice and tabular at the start of things. But when you then commit that file (with keyword substitution enabled, of course), you see:"
msgstr ""

#: ./build/en/book.xml:5579(screen) 
#, no-wrap
msgid "\n$Rev: 12 $:     Revision of last commit\n$Author: harry $:  Author of last commit\n$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit\n"
msgstr ""

#: ./build/en/book.xml:5585(para) 
msgid "The result is not so beautiful. And you might be tempted to then adjust the file after the substitution so that it again looks tabular. But that only holds as long as the keyword values are the same width. If the last committed revision rolls into a new place value (say, from 99 to 100), or if another person with a longer username commits the file, stuff gets all crooked again. However, if you are using Subversion 1.2 or better, you can use the new fixed-length keyword syntax, define some field widths that seem sane, and now your file might look like this:"
msgstr ""

#: ./build/en/book.xml:5596(screen) 
#, no-wrap
msgid "\n$Rev::               $:  Revision of last commit\n$Author::            $:  Author of last commit\n$Date::              $:  Date of last commit\n"
msgstr ""

#: ./build/en/book.xml:5602(para) 
msgid "You commit this change to your file. This time, Subversion notices the new fixed-length keyword syntax, and maintains the width of the fields as defined by the padding you placed between the double-colon and the trailing dollar sign. After substitution, the width of the fields is completely unchanged—the short values for <literal moreinfo=\"none\">Rev</literal> and <literal moreinfo=\"none\">Author</literal> are padded with spaces, and the long <literal moreinfo=\"none\">Date</literal> field is truncated by a hash character:"
msgstr ""

#: ./build/en/book.xml:5612(screen) 
#, no-wrap
msgid "\n$Rev:: 13            $:  Revision of last commit\n$Author:: harry      $:  Author of last commit\n$Date:: 2006-03-15 0#$:  Date of last commit\n"
msgstr ""

#: ./build/en/book.xml:5618(para) 
msgid "The use of fixed-length keywords is especially handy when performing substitutions into complex file formats that themselves use fixed-length fields for data, or for which the stored size of a given data field is overbearingly difficult to modify from outside the format's native application (such as for Microsoft Office documents)."
msgstr ""

#: ./build/en/book.xml:5626(para) 
msgid "Be aware that because the width of a keyword field is measured in bytes, the potential for corruption of multi-byte values exists. For example, a username which contains some multi-byte UTF-8 characters might suffer truncation in the middle of the string of bytes which make up one of those characters. The result will be a mere truncation when viewed at the byte level, but will likely appear as a string with an incorrect or garbled final character when viewed as UTF-8 text. It is conceivable that certain applications, when asked to load the file, would notice the broken UTF-8 text and deem the entire file corrupt, refusing to operate on the file altogether."
msgstr ""

#: ./build/en/book.xml:5647(title) 
msgid "Locking"
msgstr ""

#: ./build/en/book.xml:5649(para) 
msgid "Subversion's copy-modify-merge version control model lives and dies on its data merging algorithms, specifically on how well those algorithms perform when trying to resolve conflicts caused by multiple users modifying the same file concurrently. Subversion itself provides only one such algorithm, a three-way differencing algorithm which is smart enough to handle data at a granularity of a single line of text. Subversion also allows you to supplement its content merge processing with external differencing utilities (as described in <xref linkend=\"svn.advanced.externaldifftools.diff3\"/>), some of which may do an even better job, perhaps providing granularity of a word or a single character of text. But common among those algorithms is that they generally work only on text files. The landscape starts to look pretty grim when you start talking about content merges of non-textual file formats. And when you can't find a tool that can handle that type of merging, you begin to run into problems with the copy-modify-merge model."
msgstr ""

#: ./build/en/book.xml:5667(para) 
msgid "Let's look at a real-life example of where this model runs aground. Harry and Sally are both graphic designers working on the same project, a bit of marketing collateral for an automobile mechanic. Central to the design of a particular poster is an image of a car in need of some body work, stored in a file using the PNG image format. The poster's layout is almost finished, and both Harry and Sally are pleased with the particular photo they chose for their damaged car—a baby blue 1967 Ford Mustang with an unfortunate bit of crumpling on the left front fender."
msgstr ""

#: ./build/en/book.xml:5678(para) 
msgid "Now, as is common in graphic design work, there's a change in plans which causes the car's color to be a concern. So Sally updates her working copy to <literal moreinfo=\"none\">HEAD</literal>, fires up her photo editing software, and sets about tweaking the image so that the car is now cherry red. Meanwhile, Harry, feeling particularly inspired that day, decides that the image would have greater impact if the car also appears to have suffered greater impact. He, too, updates to <literal moreinfo=\"none\">HEAD</literal>, and then draws some cracks on the vehicle's windshield. He manages to finish his work before Sally finishes hers, and after admiring the fruits of his undeniable talent, commits the modified image. Shortly thereafter, Sally is finished with the car's new finish, and tries to commit her changes. But, as expected, Subversion fails the commit, informing Sally that now her version of the image is out of date."
msgstr ""

#: ./build/en/book.xml:5694(para) 
msgid "Here's where the difficulty sets in. Were Harry and Sally making changes to a text file, Sally would simply update her working copy, receiving Harry's changes in the process. In the worst possible case, they would have modified the same region of the file, and Sally would have to work out by hand the proper resolution to the conflict. But these aren't text files—they are binary images. And while it's a simple matter to describe what one would expect the results of this content merge to be, there is precious little chance that any software exists which is smart enough to examine the common baseline image that each of these graphic artists worked against, the changes that Harry made, and the changes that Sally made, and spit out an image of a busted-up red Mustang with a cracked windshield!"
msgstr ""

#: ./build/en/book.xml:5717(para) 
msgid "Communication wouldn't have been such bad medicine for Harry and Sally's Hollywood namesakes, either, for that matter."
msgstr ""

#: ./build/en/book.xml:5709(para) 
msgid "Clearly, things would have gone more smoothly if Harry and Sally had serialized their modifications to the image. If, say, Harry had waited to draw his windshield cracks on Sally's now-red car, or if Sally had tweaked the color of a car whose windshield was already cracked. As is discussed in <xref linkend=\"svn.basic.vsn-models.copy-merge\"/>, much of these types problems go away entirely where perfect communication between Harry and Sally exists. <placeholder-1/> But as one's version control system is, in fact, one form of communication, it follows that having that software facilitate the serialization of non-parallelizable energies is no bad thing. And this where Subversion's implementation of the lock-modify-unlock model steps into the spotlight. This is where we talk about Subversion's <firstterm>locking</firstterm> feature, which is similar to the <quote>reserved checkouts</quote> mechanisms of other version control systems."
msgstr ""

#: ./build/en/book.xml:5731(para) 
msgid "Subversion's locking feature serves two main purposes:"
msgstr ""

#: ./build/en/book.xml:5736(para) 
msgid "<emphasis>Serializing access to a versioned object</emphasis>. By allowing a user to programmatically claim the exclusive right to change to a file in the repository, that user can be reasonably confident that energy invested on unmergeable changes won't be wasted—his commit of those changes will succeed."
msgstr ""

#: ./build/en/book.xml:5744(para) 
msgid "<emphasis>Aiding communication</emphasis>. By alerting other users that serialization is in effect for particular versioned object, those other users can reasonably expect that the object is about to be changed by someone else, and they, too, can avoid wasting their time and energy on unmergeable changes that won't be committable due to eventual out-of-dateness."
msgstr ""

#: ./build/en/book.xml:5758(para) 
msgid "Subversion does not currently allow locks on directories."
msgstr ""

#: ./build/en/book.xml:5754(para) 
msgid "When referring to Subversion's locking feature, one is actually talking about a fairly diverse collection of behaviors which include the ability to lock a versioned file <placeholder-1/> (claiming the exclusive right to modify the file), to unlock that file (yielding that exclusive right to modify), to see reports about which files are locked and by whom, to annotate files for which locking before editing is strongly advised, and so on. In this section, we'll cover all of these facets of the larger locking feature."
msgstr ""

#: ./build/en/book.xml:5768(title) 
msgid "The three meanings of <quote>lock</quote>"
msgstr ""

#: ./build/en/book.xml:5770(para) 
msgid "In this section, and almost everywhere in this book, the words <quote>lock</quote> and <quote>locking</quote> describe a mechanism for mutual exclusion between users to avoid clashing commits. Unfortunately, there are two other sorts of <quote>lock</quote> with which Subversion, and therefore this book, sometimes needs to be concerned."
msgstr ""

#: ./build/en/book.xml:5777(para) 
msgid "The first is <firstterm>working copy locks</firstterm>, used internally by Subversion to prevent clashes between multiple Subversion clients operating on the same working copy. This is the sort of lock indicated by an <computeroutput moreinfo=\"none\">L</computeroutput> in the third column of <command moreinfo=\"none\">svn status</command> output, and removed by the <command moreinfo=\"none\">svn cleanup</command> command, as described in <xref linkend=\"svn.tour.cleanup\"/>."
msgstr ""

#: ./build/en/book.xml:5785(para) 
msgid "Secondly, there are <firstterm>database locks</firstterm>, used internally by the Berkeley DB backend to prevent clashes between multiple programs trying to access the database. This is the sort of lock whose unwanted persistence after an error can cause a repository to be <quote>wedged</quote>, as described in <xref linkend=\"svn.reposadmin.maint.recovery\"/>."
msgstr ""

#: ./build/en/book.xml:5792(para) 
msgid "You can generally forget about these other kinds of locks until something goes wrong that requires you to care about them. In this book, <quote>lock</quote> means the first sort unless the contrary is either clear from context or explicitly stated."
msgstr ""

#: ./build/en/book.xml:5802(title) 
msgid "Creating locks"
msgstr ""

#: ./build/en/book.xml:5804(para) 
msgid "In the Subversion repository, a <firstterm>lock</firstterm> is a piece of metadata which grants exclusive access to one user to change a file. This user is said to be the <firstterm>lock owner</firstterm>. Each lock also has a unique identifier, typically a long string of characters, known as the <firstterm>lock token</firstterm>. The repository manages locks, ultimately handling their creation, enforcement, and removal. If any commit transaction attempts to modify or delete a locked file (or delete one of the parent directories of the file), the repository will demand two pieces of information—that the client performing the commit be authenticated as the lock owner, and that the lock token has been provided as part of the commit process as a sort of proof that client knows which lock it is using."
msgstr ""

#: ./build/en/book.xml:5820(para) 
msgid "To demonstrate lock creation, let's refer back to our example of multiple graphic designers working with on the same binary image files. Harry has decided to change a JPEG image. To prevent other people from committing changes to the file while he is modifying it (as well as alerting them that he is about to change it), he locks the file in the repository using the <command moreinfo=\"none\">svn lock</command> command."
msgstr ""

#: ./build/en/book.xml:5828(screen) 
#, no-wrap
msgid "\n$ svn lock banana.jpg -m \"Editing file for tomorrow's release.\"\n'banana.jpg' locked by user 'harry'.\n$\n"
msgstr ""

#: ./build/en/book.xml:5834(para) 
msgid "There are a number of new things demonstrated in the previous example. First, notice that Harry passed the <option>--message (-m)</option> option to <command moreinfo=\"none\">svn lock</command>. Similar to <command moreinfo=\"none\">svn commit</command>, the <command moreinfo=\"none\">svn lock</command> command can take comments (either via <option>--message (-m)</option> or <option>--file (-F)</option>) to describe the reason for locking the file. Unlike <command moreinfo=\"none\">svn commit</command>, however, <command moreinfo=\"none\">svn lock</command> will not demand a message by launching your preferred text editor. Lock comments are optional, but still recommended to aid communication."
msgstr ""

#: ./build/en/book.xml:5846(para) 
msgid "Secondly, the lock attempt succeeded. This means that the file wasn't already locked, and that Harry had the latest version of the file. If Harry's working copy of the file had been out-of-date, the repository would have rejected the request, forcing Harry to <command moreinfo=\"none\">svn update</command> and reattempt the locking command. The locking command would also have failed if the file already been locked by someone else."
msgstr ""

#: ./build/en/book.xml:5855(para) 
msgid "As you can see, the <command moreinfo=\"none\">svn lock</command> command prints confirmation of the successful lock. At this point, the fact that the file is locked becomes apparent in the output of the <command moreinfo=\"none\">svn status</command> and <command moreinfo=\"none\">svn info</command> reporting subcommands."
msgstr ""

#: ./build/en/book.xml:5861(screen) 
#, no-wrap
msgid "\n$ svn status\n     K banana.jpg\n\n$ svn info banana.jpg\nPath: banana.jpg\nName: banana.jpg\nURL: http://svn.example.com/repos/project/banana.jpg\nRepository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\nRevision: 2198\nNode Kind: file\nSchedule: normal\nLast Changed Author: frank\nLast Changed Rev: 1950\nLast Changed Date: 2006-03-15 12:43:04 -0600 (Wed, 15 Mar 2006)\nText Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)\nProperties Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)\nChecksum: 3b110d3b10638f5d1f4fe0f436a5a2a5\nLock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e\nLock Owner: harry\nLock Created: 2006-06-14 17:20:31 -0500 (Wed, 14 Jun 2006)\nLock Comment (1 line):\nEditing file for tomorrow's release.\n\n$\n"
msgstr ""

#: ./build/en/book.xml:5888(para) 
msgid "That the <command moreinfo=\"none\">svn info</command> command, which does not contact the repository when run against working copy paths, can display the lock token reveals an important fact about lock tokens—that they are cached in the working copy. The presence of the lock token is critical. It gives the working copy authorization to make use of the lock later on. Also, the <command moreinfo=\"none\">svn status</command> command shows a <literal moreinfo=\"none\">K</literal> next to the file (short for locKed), indicating that the lock token is present."
msgstr ""

#: ./build/en/book.xml:5899(title) 
msgid "Regarding lock tokens"
msgstr ""

#: ./build/en/book.xml:5901(para) 
msgid "A lock token isn't an authentication token, so much as an <emphasis>authorization</emphasis> token. The token isn't a protected secret. In fact, a lock's unique token is discoverable by anyone who runs <command moreinfo=\"none\">svn info URL</command>. A lock token is special only when it lives inside a working copy. It's proof that the lock was created in that particular working copy, and not somewhere else by some other client. Merely authenticating as the lock owner isn't enough to prevent accidents."
msgstr ""

#: ./build/en/book.xml:5911(para) 
msgid "For example, suppose you lock a file using a computer at your office, but leave work for the day before you finish your changes to that file. It should not be possible to accidentally commit changes to that same file from your home computer later that evening simply because you've authenticated as the lock's owner. In other words, the lock token prevents one piece of Subversion-related software from undermining the work of another. (In our example, if you really need to change the file from an alternate working copy, you would need to break the lock and re-lock the file.)"
msgstr ""

#: ./build/en/book.xml:5925(para) 
msgid "Now that Harry has locked <filename moreinfo=\"none\">banana.jpg</filename>, Sally is unable to change or delete that file:"
msgstr ""

#: ./build/en/book.xml:5928(screen) 
#, no-wrap
msgid "\n$ svn delete banana.jpg\nD         banana.jpg\n$ svn commit -m \"Delete useless file.\"\nDeleting       banana.jpg\nsvn: Commit failed (details follow):\nsvn: DELETE of\n'/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc35d/banana.jpg':\n423 Locked (http://svn.example.com)\n$\n"
msgstr ""

#: ./build/en/book.xml:5940(para) 
msgid "But Harry, after touching up the banana's shade of yellow, is able to commit his changes to the file. That's because he authenticates as the lock owner, and also because his working copy holds the correct lock token:"
msgstr ""

#: ./build/en/book.xml:5945(screen) 
#, no-wrap
msgid "\n$ svn status\nM    K banana.jpg\n$ svn commit -m \"Make banana more yellow\"\nSending        banana.jpg\nTransmitting file data .\nCommitted revision 2201.\n$ svn status\n$\n"
msgstr ""

#: ./build/en/book.xml:5956(para) 
msgid "Notice that after the commit is finished, <command moreinfo=\"none\">svn status</command> shows that the lock token is no longer present in working copy. This is the standard behavior of <command moreinfo=\"none\">svn commit</command>—it searches the working copy (or list of targets, if you provide such a list) for local modifications, and sends all the lock tokens it encounters during this walk to the server as part of the commit transaction. After the commit completes successfully, all of the repository locks that were mentioned are released—<emphasis>even on files that weren't committed</emphasis>. This is meant to discourage users from being sloppy about locking, or from holding locks for too long. If Harry haphazardly locks thirty files in a directory named <filename moreinfo=\"none\">images</filename> because he's unsure of which files he needs to change, yet only only changes four of those file, when he runs <command moreinfo=\"none\">svn commit images</command>, the process will still release all thirty locks."
msgstr ""

#: ./build/en/book.xml:5974(para) 
msgid "This behavior of automatically releasing locks can be overridden with the <option>--no-unlock</option> option to <command moreinfo=\"none\">svn commit</command>. This is best used for those times when you want to commit changes, but still plan to make more changes and thus need to retain existing locks. You can also make this your default behavior by setting the <literal moreinfo=\"none\">no-unlock</literal> runtime configuration option (see <xref linkend=\"svn.advanced.confarea\"/>)."
msgstr ""

#: ./build/en/book.xml:5983(para) 
msgid "Of course, locking a file doesn't oblige one to commit a change to it. The lock can be released at any time with a simple <command moreinfo=\"none\">svn unlock</command> command:"
msgstr ""

#: ./build/en/book.xml:5987(screen) 
#, no-wrap
msgid "\n$ svn unlock banana.c\n'banana.c' unlocked.\n"
msgstr ""

#: ./build/en/book.xml:5996(title) 
msgid "Discovering locks"
msgstr ""

#: ./build/en/book.xml:5998(para) 
msgid "When a commit fails due to someone else's locks, it's fairly easy to learn about them. The easiest of these is <command moreinfo=\"none\">svn status --show-updates</command>:"
msgstr ""

#: ./build/en/book.xml:6002(screen) 
#, no-wrap
msgid "\n$ svn status -u\nM              23   bar.c\nM    O         32   raisin.jpg\n       *       72   foo.h\nStatus against revision:     105\n$\n"
msgstr ""

#: ./build/en/book.xml:6011(para) 
msgid "In this example, Sally can see not only that her copy of <filename moreinfo=\"none\">foo.h</filename> is out-of-date, but that one of the two modified files she plans to commit is locked in the repository. The <literal moreinfo=\"none\">O</literal> symbol stands for <quote>Other</quote>, meaning that a lock exists on the file, and was created by somebody else. If she were to attempt a commit, the lock on <filename moreinfo=\"none\">raisin.jpg</filename> would prevent it. Sally is left wondering who made the lock, when, and why. Once again, <command moreinfo=\"none\">svn info</command> has the answers:"
msgstr ""

#: ./build/en/book.xml:6022(screen) 
#, no-wrap
msgid "\n$ svn info http://svn.example.com/repos/project/raisin.jpg\nPath: raisin.jpg\nName: raisin.jpg\nURL: http://svn.example.com/repos/project/raisin.jpg\nRepository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec\nRevision: 105\nNode Kind: file\nLast Changed Author: sally\nLast Changed Rev: 32\nLast Changed Date: 2006-01-25 12:43:04 -0600 (Sun, 25 Jan 2006)\nLock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\nLock Owner: harry\nLock Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)\nLock Comment (1 line):\nNeed to make a quick tweak to this image.\n$\n"
msgstr ""

#: ./build/en/book.xml:6041(para) 
msgid "Just as <command moreinfo=\"none\">svn info</command> can be used to examine objects in the working copy, it can also be used to examine objects in the repository. If the main argument to <command moreinfo=\"none\">svn info</command> is a working copy path, then all of the working copy's cached information is displayed; any mention of a lock means that the working copy is holding a lock token (if a file is locked by another user or in another working copy, <command moreinfo=\"none\">svn info</command> on a working copy path will show no lock information at all). If the main argument to <command moreinfo=\"none\">svn info</command> is a URL, then the information reflects the latest version of an object in the repository, and any mention of a lock describes the current lock on the object."
msgstr ""

#: ./build/en/book.xml:6055(para) 
msgid "So in this particular example, Sally can see that Harry locked the file on February 16th to <quote>make a quick tweak</quote>. It being June, she suspects that he probably forgot all about the lock. She might phone Harry to complain and ask him to release the lock. If he's unavailable, she might try to forcibly break the lock herself or ask an administrator to do so."
msgstr ""

#: ./build/en/book.xml:6067(title) 
msgid "Breaking and stealing locks"
msgstr ""

#: ./build/en/book.xml:6069(para) 
msgid "A repository lock isn't sacred—in Subversion's default configuration state, locks can be released not only by the person who created them, but by anyone at all. When somebody other than the original lock creator destroys a lock, we refer to this as <firstterm>breaking</firstterm> the lock."
msgstr ""

#: ./build/en/book.xml:6076(para) 
msgid "From the administrator's chair, it's simple to break locks. The <command moreinfo=\"none\">svnlook</command> and <command moreinfo=\"none\">svnadmin</command> programs have the ability to display and remove locks directly from the repository. (For more information about these tools, see <xref linkend=\"svn.reposadmin.maint.tk\"/>.)"
msgstr ""

#: ./build/en/book.xml:6083(screen) 
#, no-wrap
msgid "\n$ svnadmin lslocks /usr/local/svn/repos\nPath: /project2/images/banana.jpg\nUUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923\nOwner: frank\nCreated: 2006-06-15 13:29:18 -0500 (Thu, 15 Jun 2006)\nExpires: \nComment (1 line):\nStill improving the yellow color.\n\nPath: /project/raisin.jpg\nUUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\nOwner: harry\nCreated: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)\nExpires: \nComment (1 line):\nNeed to make a quick tweak to this image.\n\n$ svnadmin rmlocks /usr/local/svn/repos /project/raisin.jpg\nRemoved lock on '/project/raisin.jpg'.\n$\n"
msgstr ""

#: ./build/en/book.xml:6106(para) 
msgid "The more interesting option is allowing users to break each other's locks over the network. To do this, Sally simply needs to pass the <option>--force</option> to the unlock command:"
msgstr ""

#: ./build/en/book.xml:6111(screen) 
#, no-wrap
msgid "\n$ svn status -u\nM              23   bar.c\nM    O         32   raisin.jpg\n       *       72   foo.h\nStatus against revision:     105\n$ svn unlock raisin.jpg\nsvn: 'raisin.jpg' is not locked in this working copy\n$ svn info raisin.jpg | grep URL\nURL: http://svn.example.com/repos/project/raisin.jpg\n$ svn unlock http://svn.example.com/repos/project/raisin.jpg\nsvn: Unlock request failed: 403 Forbidden (http://svn.example.com)\n$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg\n'raisin.jpg' unlocked.\n$\n"
msgstr ""

#: ./build/en/book.xml:6128(para) 
msgid "Now, Sally's initial attempt to unlock failed because she ran <command moreinfo=\"none\">svn unlock</command> directly on her working copy of the file, and no lock token was present. To remove the lock directly from the repository, she needs to pass a URL to <command moreinfo=\"none\">svn unlock</command>. Her first attempt to unlock the URL fails, because she can't authenticate as the lock owner (nor does she have the lock token). But when she passes <option>--force</option>, the authentication and authorization requirements are ignored, and the remote lock is broken."
msgstr ""

#: ./build/en/book.xml:6139(para) 
msgid "Of course, simply breaking a lock may not be enough. In the running example, Sally may not only want to break Harry's long-forgotten lock, but re-lock the file for her own use. She can accomplish this by running <command moreinfo=\"none\">svn unlock --force</command> and then <command moreinfo=\"none\">svn lock</command> back-to-back, but there's a small chance that somebody else might lock the file between the two commands. The simpler thing to is <firstterm>steal</firstterm> the lock, which involves breaking and re-locking the file all in one atomic step. To do this, Sally passes the <option>--force</option> option to <command moreinfo=\"none\">svn lock</command>:"
msgstr ""

#: ./build/en/book.xml:6151(screen) 
#, no-wrap
msgid "\n$ svn lock raisin.jpg\nsvn: Lock request failed: 423 Locked (http://svn.example.com)\n$ svn lock --force raisin.jpg\n'raisin.jpg' locked by user 'sally'.\n$\n"
msgstr ""

#: ./build/en/book.xml:6159(para) 
msgid "In any case, whether the lock is broken or stolen, Harry may be in for a surprise. Harry's working copy still contains the original lock token, but that lock no longer exists. The lock token is said to be <firstterm>defunct</firstterm>. The lock represented by the lock-token has either been broken (no longer in the repository), or stolen (replaced with a different lock). Either way, Harry can see this by asking <command moreinfo=\"none\">svn status</command> to contact the repository:"
msgstr ""

#: ./build/en/book.xml:6169(screen) 
#, no-wrap
msgid "\n$ svn status\n     K raisin.jpg\n$ svn status -u\n     B         32   raisin.jpg\n$ svn update\n  B  raisin.jpg\n$ svn status\n$\n"
msgstr ""

#: ./build/en/book.xml:6180(para) 
msgid "If the repository lock was broken, then <command moreinfo=\"none\">svn status --show-updates</command> displays a <literal moreinfo=\"none\">B</literal> (Broken) symbol next to the file. If a new lock exists in place of the old one, then a <literal moreinfo=\"none\">T</literal> (sTolen) symbol is shown. Finally, <command moreinfo=\"none\">svn update</command> notices any defunct lock tokens and removes them from the working copy."
msgstr ""

#: ./build/en/book.xml:6189(title) 
msgid "Locking Policies"
msgstr ""

#: ./build/en/book.xml:6191(para) 
msgid "Different systems have different notions of how strict a lock should be. Some folks argue that locks must be strictly enforced at all costs, releasable only by the original creator or administrator. They argue that if anyone can break a lock, then chaos runs rampant and the whole point of locking is defeated. The other side argues that locks are first and foremost a communication tool. If users are constantly breaking each others' locks, then it represents a cultural failure within the team and the problem falls outside the scope of software enforcement."
msgstr ""

#: ./build/en/book.xml:6202(para) 
msgid "Subversion defaults to the <quote>softer</quote> approach, but still allows administrators to create stricter enforcement policies through the use of hook scripts. In particular, the <filename moreinfo=\"none\">pre-lock</filename> and <filename moreinfo=\"none\">pre-unlock</filename> hooks allow administrators to decide when lock creation and lock releases are allowed to happen. Depending on whether or not a lock already exists, these two hooks can decide whether or not to allow a certain user to break or steal a lock. The <filename moreinfo=\"none\">post-lock</filename> and <filename moreinfo=\"none\">post-unlock</filename> hooks are also available, and can be used to send email after locking actions. To learn more about repository hooks, see <xref linkend=\"svn.reposadmin.create.hooks\"/>."
msgstr ""

#: ./build/en/book.xml:6222(title) 
msgid "Lock Communication"
msgstr ""

#: ./build/en/book.xml:6224(para) 
msgid "We've seen how <command moreinfo=\"none\">svn lock</command> and <command moreinfo=\"none\">svn unlock</command> can be used to create, release, break, and steal locks. This satisfies the goal of serializing commit access to a file. But what about the larger problem of preventing wasted time?"
msgstr ""

#: ./build/en/book.xml:6230(para) 
msgid "For example, suppose Harry locks an image file and then begins editing it. Meanwhile, miles away, Sally wants to do the same thing. She doesn't think to run <command moreinfo=\"none\">svn status --show-updates</command>, so she has no idea that Harry has already locked the file. She spends hours editing the file, and when she tries to commit her change, she discovers that either the file is locked or that she's out-of-date. Regardless, her changes aren't mergeable with Harry's. One of these two people has to throw away their work, and a lot of time has been wasted."
msgstr ""

#: ./build/en/book.xml:6241(para) 
msgid "Subversion's solution to this problem is to provide a mechanism to remind users that a file ought to be locked <emphasis>before</emphasis> the editing begins. The mechanism is a special property, <literal moreinfo=\"none\">svn:needs-lock</literal>. If that property is attached to a file (regardless of its value, which is irrelevant), then Subversion will try to use filesystem-level permissions to make the file read-only, unless, of course, the user has explicitly locked the file. When a lock-token is present (as a result of running <command moreinfo=\"none\">svn lock</command>), the file becomes read-write. When the lock is released, the file becomes read-only again."
msgstr ""

#: ./build/en/book.xml:6254(para) 
msgid "The theory, then, is that if the image file has this property attached, then Sally would immediately notice something is strange when she opens the file for editing. Many applications alert users immediately when a read-only file is opened for editing. And nearly all applications would at least prevent her from saving changes to the file. This reminds her to lock the file before editing, whereby she discovers the pre-existing lock:"
msgstr ""

#: ./build/en/book.xml:6263(screen) 
#, no-wrap
msgid "\n$ /usr/local/bin/gimp raisin.jpg\ngimp: error: file is read-only!\n$ ls -l raisin.jpg\n-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg\n$ svn lock raisin.jpg\nsvn: Lock request failed: 423 Locked (http://svn.example.com)\n$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock\nLock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b\nLock Owner: harry\nLock Created: 2006-06-08 07:29:18 -0500 (Thu, 08 June 2006)\nLock Comment (1 line):\nMaking some tweaks.  Locking for the next two hours.\n$\n"
msgstr ""

#: ./build/en/book.xml:6280(para) 
msgid "Users and administrators alike are encouraged to attach the <literal moreinfo=\"none\">svn:needs-lock</literal> property to any file which cannot be contextually merged. This is the primary technique for encouraging good locking habits and preventing wasted effort."
msgstr ""

#: ./build/en/book.xml:6287(para) 
msgid "Note that this property is a communication tool which works independently from the locking system. In other words, any file can be locked, whether or not this property is present. And conversely, the presence of this property doesn't make the repository require a lock when committing."
msgstr ""

#: ./build/en/book.xml:6303(para) 
msgid "Except, perhaps, a classic Vulcan mind-meld."
msgstr ""

#: ./build/en/book.xml:6294(para) 
msgid "Unfortunately, the system isn't flawless. It's possible that even when a file has the property, the read-only reminder won't always work. Sometimes applications misbehave and <quote>hijack</quote> the read-only file, silently allowing users to edit and save the file anyway. There's not much that Subversion can do in this situation—at the end of the day, there's simply no substitution for good interpersonal communication. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:6315(title) 
msgid "Externals Definitions"
msgstr ""

#: ./build/en/book.xml:6317(para) 
msgid "Sometimes it is useful to construct a working copy that is made out of a number of different checkouts. For example, you may want different subdirectories to come from different locations in a repository, or perhaps from different repositories altogether. You could certainly setup such a scenario by hand—using <command moreinfo=\"none\">svn checkout</command> to create the sort of nested working copy structure you are trying to achieve. But if this layout is important for everyone who uses your repository, every other user will need to perform the same checkout operations that you did."
msgstr ""

#: ./build/en/book.xml:6328(para) 
msgid "Fortunately, Subversion provides support for <firstterm>externals definitions</firstterm>. An externals definition is a mapping of a local directory to the URL—and possibly a particular revision—of a versioned directory. In Subversion, you declare externals definitions in groups using the <literal moreinfo=\"none\">svn:externals</literal> property. You can create or modify this property using <command moreinfo=\"none\">svn propset</command> or <command moreinfo=\"none\">svn propedit</command> (see <xref linkend=\"svn.advanced.props.manip\"/>). It can be set on any versioned directory, and its value is a multi-line table of subdirectories (relative to the versioned directory on which the property is set), optional revision flags, and a fully qualified, absolute Subversion repository URLs."
msgstr ""

#: ./build/en/book.xml:6342(screen) 
#, no-wrap
msgid "\n$ svn propget svn:externals calc\nthird-party/sounds             http://sounds.red-bean.com/repos\nthird-party/skins              http://skins.red-bean.com/repositories/skinproj\nthird-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker\n"
msgstr ""

#: ./build/en/book.xml:6349(para) 
msgid "The convenience of the <literal moreinfo=\"none\">svn:externals</literal> property is that once it is set on a versioned directory, everyone who checks out a working copy with that directory also gets the benefit of the externals definition. In other words, once one person has made the effort to define those nested working copy checkouts, no one else has to bother—Subversion will, upon checkout of the original working copy, also checkout the external working copies."
msgstr ""

#: ./build/en/book.xml:6359(para) 
msgid "The relative target subdirectories of externals definitions needn't already exist on your or other users' systems—Subversion will create them when it checks out the external working copy. In fact, you should <emphasis>not</emphasis> try to use externals definitions to populate directories that are already under version control."
msgstr ""

#: ./build/en/book.xml:6368(para) 
msgid "Note the previous externals definition example. When someone checks out a working copy of the <filename moreinfo=\"none\">calc</filename> directory, Subversion also continues to checkout the items found in its externals definition."
msgstr ""

#: ./build/en/book.xml:6373(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/repos/calc\nA  calc\nA  calc/Makefile\nA  calc/integer.c\nA  calc/button.c\nChecked out revision 148.\n\nFetching external item into calc/third-party/sounds\nA  calc/third-party/sounds/ding.ogg\nA  calc/third-party/sounds/dong.ogg\nA  calc/third-party/sounds/clang.ogg\n…\nA  calc/third-party/sounds/bang.ogg\nA  calc/third-party/sounds/twang.ogg\nChecked out revision 14.\n\nFetching external item into calc/third-party/skins\n…\n"
msgstr ""

#: ./build/en/book.xml:6394(para) 
msgid "If you need to change the externals definition, you can do so using the regular property modification subcommands. When you commit a change to the <literal moreinfo=\"none\">svn:externals</literal> property, Subversion will synchronize the checked-out items against the changed externals definition when you next run <command moreinfo=\"none\">svn update</command>. The same thing will happen when others update their working copies and receive your changes to the externals definition."
msgstr ""

#: ./build/en/book.xml:6404(para) 
msgid "Because the <literal moreinfo=\"none\">svn:externals</literal> property has a multiline value, we strongly recommend that you use <command moreinfo=\"none\">svn propedit</command> instead of <command moreinfo=\"none\">svn propset</command>."
msgstr ""

#: ./build/en/book.xml:6411(para) 
msgid "You should strongly consider using explicit revision numbers in all of your externals definitions. Doing so means that you get to decide when to pull down a different snapshot of external information, and exactly which snapshot to pull. Besides avoiding the surprise of getting changes to third-party repositories that you might not have any control over, using explicit revision numbers also means that as you backdate your working copy to a previous revision, your externals definitions will also revert to the way they looked in that previous revision, which in turn means that the external working copies will be updated to match they way <emphasis>they</emphasis> looked back when your repository was at that previous revision. For software projects, this could be the difference between a successful and a failed build of an older snapshot of your complex codebase."
msgstr ""

#: ./build/en/book.xml:6428(para) 
msgid "The <command moreinfo=\"none\">svn status</command> command also recognizes externals definitions, displaying a status code of <literal moreinfo=\"none\">X</literal> for the disjoint subdirectories into which externals are checked out, and then recursing into those subdirectories to display the status of the external items themselves."
msgstr ""

#: ./build/en/book.xml:6435(para) 
msgid "The support that exists for externals definitions in Subversion today can be a little misleading, though. First, an externals definition can only point to directories, not files. Second, the externals definition cannot point to relative paths (paths like <filename moreinfo=\"none\">../../skins/myskin</filename>). Third, the working copies created via the externals definition support are still disconnected from the primary working copy (on whose versioned directories the <literal moreinfo=\"none\">svn:externals</literal> property was actually set). And Subversion still only truly operates on non-disjoint working copies. So, for example, if you want to commit changes that you've made in one or more of those external working copies, you must run <command moreinfo=\"none\">svn commit</command> explicitly on those working copies—committing on the primary working copy will not recurse into any external ones."
msgstr ""

#: ./build/en/book.xml:6451(para) 
msgid "Also, since the definitions themselves use absolute URLs, moving or copying a directory to which they are attached will not affect what gets checked out as an external (though the relative local target subdirectory will, of course, move with renamed directory). This can be confusing—even frustrating—in certain situations. For example, say you have a top-level directory named <filename moreinfo=\"none\">my-project</filename>, and you've created an externals definition on one of its subdirectories (<filename moreinfo=\"none\">my-project/some-dir</filename>) which tracks the latest revision of another of its subdirectories (<filename moreinfo=\"none\">my-project/external-dir</filename>)."
msgstr ""

#: ./build/en/book.xml:6464(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/projects .\nA    my-project\nA    my-project/some-dir\nA    my-project/external-dir\n…\nFetching external item into 'my-project/some-dir/subdir'\nChecked out external at revision 11.\n\nChecked out revision 11.\n$ svn propget svn:externals my-project/some-dir\nsubdir http://svn.example.com/projects/my-project/external-dir\n\n$\n"
msgstr ""

#: ./build/en/book.xml:6480(para) 
msgid "Now you use <command moreinfo=\"none\">svn move</command> to rename the <filename moreinfo=\"none\">my-project</filename> directory. At this point, your externals definition will still refer to a path under the <filename moreinfo=\"none\">my-project</filename> directory, even though that directory no longer exists."
msgstr ""

#: ./build/en/book.xml:6486(screen) 
#, no-wrap
msgid "\n$ svn move -q my-project renamed-project\n$ svn commit -m \"Rename my-project to renamed-project.\"\nDeleting       my-project\nAdding         my-renamed-project\n\nCommitted revision 12.\n$ svn update\n\nFetching external item into 'renamed-project/some-dir/subdir'\nsvn: Target path does not exist\n$\n"
msgstr ""

#: ./build/en/book.xml:6500(para) 
msgid "Also, the fact that externals definitions use absolute URLs can cause problems with repositories that are available via multiple URL schemes. For example, if your Subversion server is configured to allow everyone to checkout the repository over <literal moreinfo=\"none\">http://</literal> or <literal moreinfo=\"none\">https://</literal>, but only allow commits to come in via <literal moreinfo=\"none\">https://</literal>, you have an interesting problem on your hands. If your externals definitions use the <literal moreinfo=\"none\">http://</literal> form of the repository URLs, you won't be able to commit anything from the working copies created by those externals. On the other hand, if they use the <literal moreinfo=\"none\">https://</literal> form of the URLs, anyone who might be checking out via <literal moreinfo=\"none\">http://</literal> because their client doesn't support <literal moreinfo=\"none\">https://</literal> will be unable to fetch the external items. Be aware, too, that if you need to re-parent your working copy (using <command moreinfo=\"none\">svn switch --relocate</command>), externals definitions will <emphasis>not</emphasis> also be re-parented."
msgstr ""

#: ./build/en/book.xml:6519(para) 
msgid "Finally, there might be times when you would prefer that <command moreinfo=\"none\">svn</command> subcommands would not recognize or otherwise operate on the external working copies created as the result of externals definition handling. In those instances, you can pass the <option>--ignore-externals</option> option to the subcommand."
msgstr ""

#: ./build/en/book.xml:6531(title) 
msgid "Peg and Operative Revisions"
msgstr ""

#: ./build/en/book.xml:6533(para) 
msgid "We make use of the ability to copy, move, rename, and completely replace files and directories on our computers all the time. And your version control system shouldn't get in the way of your doing these things with your version-controlled files and directories, either. Subversion's file management support is quite liberating, affording almost as much flexibility for versioned files as you'd expect when manipulating your unversioned ones. But that flexibility means that across the lifetime of your repository, a given versioned object might have many paths, and a given path might represent several entirely different versioned objects. And this introduces a certain level of complexity to your interactions with those paths and objects."
msgstr ""

#: ./build/en/book.xml:6547(para) 
msgid "Subversion is pretty smart about noticing when an object's version history includes such <quote>changes of address</quote>. For example, if you ask for the revision history log of a particular file that was renamed last week, Subversion happily provides all those logs—the revision in which the rename itself happened, plus the logs of relevant revisions both before and after that rename. So, most of the time, you don't even have to think about such things. But occasionally, Subversion needs your help to clear up ambiguities."
msgstr ""

#: ./build/en/book.xml:6557(para) 
msgid "The simplest example of this occurs when a directory or file is deleted from version control, and then a new directory or file is created with the same name and added to version control. Clearly the thing you deleted and the thing you later added aren't the same thing. They merely happen to have had the same path, <filename moreinfo=\"none\">/trunk/object</filename> for example. What, then, does it mean to ask Subversion about the history of <filename moreinfo=\"none\">/trunk/object</filename>? Are you asking about the thing currently at that location, or the old thing you deleted from that location? Are you asking about the operations that have happened to <emphasis>all</emphasis> the objects that have ever lived at that path? Clearly, Subversion needs a hint about what you really want."
msgstr ""

#: ./build/en/book.xml:6579(para) 
msgid "<quote>You're not supposed to name it. Once you name it, you start getting attached to it.</quote> — Mike Wazowski"
msgstr ""

#: ./build/en/book.xml:6571(para) 
msgid "And thanks to moves, versioned object history can get far more twisted than that, even. For example, you might have a directory named <filename moreinfo=\"none\">concept</filename>, containing some nascent software project you've been toying with. Eventually, though, that project matures to the point that the idea seems to actually have some wings, so you do the unthinkable and decide to give the project a name. <placeholder-1/> Let's say you called your software Frabnaggilywort. At this point, it makes sense to rename the directory to reflect the project's new name, so <filename moreinfo=\"none\">concept</filename> is renamed to <filename moreinfo=\"none\">frabnaggilywort</filename>. Life goes on, Frabnaggilywort releases a 1.0 version, and is downloaded and used daily by hordes of people aiming to improve their lives."
msgstr ""

#: ./build/en/book.xml:6591(para) 
msgid "It's a nice story, really, but it doesn't end there. Entrepreneur that you are, you've already got another think in the tank. So you make a new directory, <filename moreinfo=\"none\">concept</filename>, and the cycle begins again. In fact, the cycle begins again many times over the years, each time starting with that old <filename moreinfo=\"none\">concept</filename> directory, then sometimes seeing that directory renamed as the idea cures, sometimes seeing it deleted when you scrap the idea. Or, to get really sick, maybe you rename <filename moreinfo=\"none\">concept</filename> to something else for a while, but later rename the thing back to <filename moreinfo=\"none\">concept</filename> for some reason."
msgstr ""

#: ./build/en/book.xml:6604(para) 
msgid "When scenarios like these occur, attempting to instruct Subversion to work with these re-used paths can be a little like instructing a motorist in Chicago's West Suburbs to drive east down Roosevelt Road and turn left onto Main Street. In a mere twenty minutes, you can cross <quote>Main Street</quote> in Wheaton, Glen Ellyn, and Lombard. And no, they aren't the same street. Our motorist—and our Subversion—need a little more detail in order to do the right thing."
msgstr ""

#: ./build/en/book.xml:6613(para) 
msgid "In version 1.1, Subversion introduced a way for you to tell it exactly which Main Street you meant. It's called the <firstterm>peg revision</firstterm>, and it is a revision provided to Subversion for the sole purpose of identifying a unique line of history. Because at most one versioned object may occupy a path at any given time—or, more precisely, in any one revision—the combination of a path and a peg revision is all that is needed to refer to a specific line of history. Peg revisions are specified to the Subversion command-line client using <firstterm>at syntax</firstterm>, so called because the syntax involves appending an <quote>at sign</quote> (<literal moreinfo=\"none\">@</literal>) and the peg revision to the end of the path with which the revision is associated."
msgstr ""

#: ./build/en/book.xml:6637(para) 
msgid "606 N. Main Street, Wheaton, Illinois, is the home of the Wheaton History Center. Get it—<quote>History Center</quote>? It seemed appropriate…."
msgstr ""

#: ./build/en/book.xml:6627(para) 
msgid "But what of the <option>--revision (-r)</option> of which we've spoken so much in this book? That revision (or set of revisions) is called the <firstterm>operative revision</firstterm> (or <firstterm>operative revision range</firstterm>). Once a particular line of history has been identified using a path and peg revision, Subversion performs the requested operation using the operative revision(s). To map this to our Chicagoland streets analogy, if we are told to go to 606 N. Main Street in Wheaton, <placeholder-1/> we can think of <quote>Main Street</quote> as our path and <quote>Wheaton</quote> as our peg revision. These two pieces of information identify a unique path which can travelled (north or south on Main Street), and will keep us from travelling up and down the wrong Main Street in search of our destination. Now we throw in <quote>606 N.</quote> as our operative revision, of sorts, and we know <emphasis>exactly</emphasis> where to go."
msgstr ""

#: ./build/en/book.xml:6651(title) 
msgid "The peg revision algorithm"
msgstr ""

#: ./build/en/book.xml:6653(para) 
msgid "The Subversion command-line performs the peg revision algorithm any time it needs to resolve possible ambiguities in the paths and revisions provided to it. Here's an example of such an invocation for the purposes of illustrating that algorithm."
msgstr ""

#: ./build/en/book.xml:6660(replaceable) 
msgid "command"
msgstr ""

#: ./build/en/book.xml:6660(replaceable) 
msgid "OPERATIVE-REV"
msgstr ""

#: ./build/en/book.xml:6660(replaceable) 
msgid "PEG-REV"
msgstr ""

#: ./build/en/book.xml:6659(screen) 
#, no-wrap
msgid "\n$ svn <placeholder-1/> -r <placeholder-2/> item@<placeholder-3/>\n"
msgstr ""

#: ./build/en/book.xml:6663(para) 
msgid "The algorithm has three simple steps:"
msgstr ""

#: ./build/en/book.xml:6668(para) 
msgid "Locate <replaceable>item</replaceable> in the revision identified by <replaceable>PEG-REV</replaceable>. There can be only one such object."
msgstr ""

#: ./build/en/book.xml:6674(para) 
msgid "Trace the object's history backwards (through any possible renames) to its ancestor in the revision <replaceable>OPERATIVE-REV</replaceable>."
msgstr ""

#: ./build/en/book.xml:6680(para) 
msgid "Perform the requested action on that ancestor, wherever it is located, or whatever its name might be or have been at that time."
msgstr ""

#: ./build/en/book.xml:6687(para) 
msgid "Note that even when you don't explicitly supply a peg revision or operative revision, they are still present. For your convenience, the default peg revision is <literal moreinfo=\"none\">BASE</literal> for working copy items and <literal moreinfo=\"none\">HEAD</literal> for repository URLs. And when no operative revision is provided, it defaults to being the same revision as the peg revision."
msgstr ""

#: ./build/en/book.xml:6697(para) 
msgid "Say that long ago we created our repository, and in revision 1 added our first <filename moreinfo=\"none\">concept</filename> directory, plus an <filename moreinfo=\"none\">IDEA</filename> file in that directory talking about the concept. After several revisions in which real code was added and tweaked, we, in revision 20, renamed this directory to <filename moreinfo=\"none\">frabnaggilywort</filename>. By revision 27, we had a new concept, a new <filename moreinfo=\"none\">concept</filename> directory to hold it, and a new <filename moreinfo=\"none\">IDEA</filename> file to describe it. And then five years and twenty thousand revisions flew by, just like they would in any good romance story."
msgstr ""

#: ./build/en/book.xml:6708(para) 
msgid "Now, years later, we wonder what the <filename moreinfo=\"none\">IDEA</filename> file looked like back in revision 1. But Subversion needs to know if we are asking about how the <emphasis>current</emphasis> file looked back in revision 1, or are we asking for the contents of whatever file lived at <filename moreinfo=\"none\">concepts/IDEA</filename> in revision 1? Certainly those questions have different answers, and because of peg revisions, you can ask either of them. To find out how the current <filename moreinfo=\"none\">IDEA</filename> file looked in that old revision, you run:"
msgstr ""

#: ./build/en/book.xml:6719(screen) 
#, no-wrap
msgid "\n$ svn cat -r 1 concept/IDEA \nsvn: Unable to find repository location for 'concept/IDEA' in revision 1\n"
msgstr ""

#: ./build/en/book.xml:6724(para) 
msgid "Of course, in this example, the current <filename moreinfo=\"none\">IDEA</filename> file didn't exist yet in revision 1, so Subversion gives an error. The command above is shorthand for a longer notation which explicitly lists a peg revision. The expanded notation is:"
msgstr ""

#: ./build/en/book.xml:6730(screen) 
#, no-wrap
msgid "\n$ svn cat -r 1 concept/IDEA@BASE\nsvn: Unable to find repository location for 'concept/IDEA' in revision 1\n"
msgstr ""

#: ./build/en/book.xml:6735(para) 
msgid "And when executed, it has the expected results. Peg revisions generally default to a value of <literal moreinfo=\"none\">BASE</literal> (the revision currently present in the working copy) when applied to working copy paths, and of <literal moreinfo=\"none\">HEAD</literal> when applied to URLs."
msgstr ""

#: ./build/en/book.xml:6741(para) 
msgid "The perceptive reader is probably wondering at this point if the peg revision syntax causes problems for working copy paths or URLs that actually have at signs in them. After all, how does <command moreinfo=\"none\">svn</command> know whether <literal moreinfo=\"none\">news@11</literal> is the name of a directory in my tree, or just a syntax for <quote>revision 11 of <filename moreinfo=\"none\">news</filename></quote>? Thankfully, while <command moreinfo=\"none\">svn</command> will always assume the latter, there is a trivial workaround. You need only append an at sign to the end of the path, such as <literal moreinfo=\"none\">news@11@</literal>. <command moreinfo=\"none\">svn</command> only cares about the last at sign in the argument, and it is not considered illegal to omit a literal peg revision specifier after that at sign. This workaround even applies to paths that end in an at sign—you would use <literal moreinfo=\"none\">filename@@</literal> to talk about a file named <filename moreinfo=\"none\">filename@</filename>."
msgstr ""

#: ./build/en/book.xml:6758(para) 
msgid "Let's ask the other question, then—in revision 1, what were the contents of whatever file occupied the address <filename moreinfo=\"none\">concepts/IDEA</filename> at the time? We'll use an explicit peg revision to help us out."
msgstr ""

#: ./build/en/book.xml:6763(screen) 
#, no-wrap
msgid "\n$ svn cat concept/IDEA@1\nThe idea behind this project is to come up with a piece of software\nthat can frab a naggily wort.  Frabbing naggily worts is tricky\nbusiness, and doing it incorrectly can have serious ramifications, so\nwe need to employ over-the-top input validation and data verification\nmechanisms.\n"
msgstr ""

#: ./build/en/book.xml:6772(para) 
msgid "Notice that we didn't provide an operative revision this time. That's because when no operative revision is specified, Subversion assumes a default operative revision that's the same as the peg revision."
msgstr ""

#: ./build/en/book.xml:6777(para) 
msgid "As you can see, the output from our operation appears to be correct. The text even mentions frabbing naggily worts, so this is almost certainly the file which describes the software now called Frabnaggilywort. In fact, we can verify this using the combination of an explicit peg revision and explicit operative revision. We know that in <literal moreinfo=\"none\">HEAD</literal>, the Frabnaggilywort project is located in the <filename moreinfo=\"none\">frabnaggilywort</filename> directory. So we specify that we want to see how the line of history identified in <literal moreinfo=\"none\">HEAD</literal> as the path <filename moreinfo=\"none\">frabnaggilywort/IDEA</filename> looked in revision 1."
msgstr ""

#: ./build/en/book.xml:6790(screen) 
#, no-wrap
msgid "\n$ svn cat -r 1 frabnaggilywort/IDEA@HEAD\nThe idea behind this project is to come up with a piece of software\nthat can frab a naggily wort.  Frabbing naggily worts is tricky\nbusiness, and doing it incorrectly can have serious ramifications, so\nwe need to employ over-the-top input validation and data verification\nmechanisms.\n"
msgstr ""

#: ./build/en/book.xml:6799(para) 
msgid "And the peg and operative revisions need not be so trivial, either. For example, say <filename moreinfo=\"none\">frabnaggilywort</filename> had been deleted from <literal moreinfo=\"none\">HEAD</literal>, but we know it existed in revision 20, and we want to see the diffs for its <filename moreinfo=\"none\">IDEA</filename> file between revisions 4 and 10. We can use the peg revision 20 in conjunction with the URL that would have held Frabnaggilywort's <filename moreinfo=\"none\">IDEA</filename> file in revision 20, and then use 4 and 10 as our operative revision range."
msgstr ""

#: ./build/en/book.xml:6809(screen) 
#, no-wrap
msgid "\n$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20\nIndex: frabnaggilywort/IDEA\n===================================================================\n--- frabnaggilywort/IDEA\t(revision 4)\n+++ frabnaggilywort/IDEA\t(revision 10)\n@@ -1,5 +1,5 @@\n-The idea behind this project is to come up with a piece of software\n-that can frab a naggily wort.  Frabbing naggily worts is tricky\n-business, and doing it incorrectly can have serious ramifications, so\n-we need to employ over-the-top input validation and data verification\n-mechanisms.\n+The idea behind this project is to come up with a piece of\n+client-server software that can remotely frab a naggily wort.\n+Frabbing naggily worts is tricky business, and doing it incorrectly\n+can have serious ramifications, so we need to employ over-the-top\n+input validation and data verification mechanisms.\n"
msgstr ""

#: ./build/en/book.xml:6828(para) 
msgid "Fortunately, most folks aren't faced with such complex situations. But when you are, remember that peg revisions are that extra hint Subversion needs to clear up ambiguity."
msgstr ""

#: ./build/en/book.xml:6839(title) 
msgid "Network Model"
msgstr ""

#: ./build/en/book.xml:6841(para) 
msgid "At some point, you're going to need to understand how your Subversion client communicates with its server. Subversion's networking layer is abstracted, meaning that Subversion clients exhibit the same general behaviors no matter what sort of server they are operating against. Whether speaking the HTTP protocol (<literal moreinfo=\"none\">http://</literal>) with the Apache HTTP Server or speaking the custom Subversion protocol (<literal moreinfo=\"none\">svn://</literal>) with <command moreinfo=\"none\">svnserve</command>, the basic network model is the same. In this section, we'll explain the basics of that network model, including how Subversion manages authentication and authorization matters."
msgstr ""

#: ./build/en/book.xml:6856(title) 
msgid "Requests and Responses"
msgstr ""

#: ./build/en/book.xml:6858(para) 
msgid "The Subversion client spends most of its time managing working copies. When it needs information from a remote repository, however, it makes a network request, and the server responds with an appropriate answer. The details of the network protocol are hidden from the user—the client attempts to access a URL, and depending on the URL schema, a particular protocol is used to contact the server (see <xref linkend=\"svn.basic.in-action.wc.sb-1\"/>)."
msgstr ""

#: ./build/en/book.xml:6866(para) 
msgid "Users can run <command moreinfo=\"none\">svn --version</command> to see which URL schemas and protocols the client knows how to use."
msgstr ""

#: ./build/en/book.xml:6871(para) 
msgid "When the server process receives a client request, it often demands that the client identify itself. It issues an authentication challenge to the client, and the client responds by providing <firstterm>credentials</firstterm> back to the server. Once authentication is complete, the server responds with the original information the client asked for. Notice that this system is different from systems like CVS, where the client pre-emptively offers credentials (<quote>logs in</quote>) to the server before ever making a request. In Subversion, the server <quote>pulls</quote> credentials by challenging the client at the appropriate moment, rather than the client <quote>pushing</quote> them. This makes certain operations more elegant. For example, if a server is configured to allow anyone in the world to read a repository, then the server will never issue an authentication challenge when a client attempts to <command moreinfo=\"none\">svn checkout</command>."
msgstr ""

#: ./build/en/book.xml:6900(para) 
msgid "This problem is actually a FAQ, resulting from a misconfigured server setup."
msgstr ""

#: ./build/en/book.xml:6888(para) 
msgid "If the particular network requests issued by the client result in a new revision being created in the repository, (e.g. <command moreinfo=\"none\">svn commit</command>), then Subversion uses the authenticated username associated with those requests as the author of the revision. That is, the authenticated user's name is stored as the value of the <literal moreinfo=\"none\">svn:author</literal> property on the new revision (see <xref linkend=\"svn.ref.properties\"/>). If the client was not authenticated (in other words, the server never issued an authentication challenge), then the revision's <literal moreinfo=\"none\">svn:author</literal> property is empty. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:6909(title) 
msgid "Client Credentials Caching"
msgstr ""

#: ./build/en/book.xml:6911(para) 
msgid "Many servers are configured to require authentication on every request. This can become a big annoyance to users, who are forced to type their passwords over and over again. Fortunately, the Subversion client has a remedy for this—a built-in system for caching authentication credentials on disk. By default, whenever the command-line client successfully responds to a server's authentication challenge, it saves the credentials in the user's private runtime configuration area (<filename moreinfo=\"none\">~/.subversion/auth/</filename> on Unix-like systems or <filename moreinfo=\"none\">%APPDATA%/Subversion/auth/</filename> on Windows; see <xref linkend=\"svn.advanced.confarea\"/> for more details about the runtime configuration system). Successful credentials are cached on disk, keyed on a combination of the server's hostname, port, and authentication realm."
msgstr ""

#: ./build/en/book.xml:6927(para) 
msgid "When the client receives an authentication challenge, it first looks for the appropriate credentials in the user's disk cache. If seemingly suitable credentials are not present, or if the cached credentials ultimately fail to authenticate, then the client will, by default, fall back to prompting the user for the necessary information."
msgstr ""

#: ./build/en/book.xml:6934(para) 
msgid "The security-conscious reader will suspect immediately that there is reason for concern here. <quote>Caching passwords on disk? That's terrible! You should never do that!</quote>"
msgstr ""

#: ./build/en/book.xml:6939(para) 
msgid "The Subversion developers recognize the legitimacy of such concerns, and so Subversion works with available mechanisms provided by the operating system and environment to try to minimize the risk of leaking this information. Here's a breakdown of what this means on for users on the most common platforms:"
msgstr ""

#: ./build/en/book.xml:6949(para) 
msgid "On Windows 2000 and later, the Subversion client uses standard Windows cryptography services to encrypt the password on disk. Because the encryption key is managed by Windows and is tied to the user's own login credentials, only the user can decrypt the cached password. (Note that if the user's Windows account password is reset by an administrator, all of the cached passwords become undecipherable. The Subversion client will behave as if they don't exist, prompting for passwords when required.)"
msgstr ""

#: ./build/en/book.xml:6962(para) 
msgid "Similarly, on Mac OS X, the Subversion client stores all repository passwords in the login keyring (managed by the Keychain service), which is protected by the user's account password. User preference settings can impose additional policies, such as requiring the user's account password be entered each time the Subversion password is used."
msgstr ""

#: ./build/en/book.xml:6972(para) 
msgid "For other Unix-like operating systems, no standard <quote>keychain</quote> services exist. However, the <filename moreinfo=\"none\">auth/</filename> caching area is still permission-protected so that only the user (owner) can read data from it, not the world at large. The operating system's own file permissions protect the passwords."
msgstr ""

#: ./build/en/book.xml:6982(para) 
msgid "Of course, for the truly paranoid, none of these mechanisms meets the test of perfection. So for those folks willing to sacrifice convenience for the ultimate security, Subversion provides various ways of disabling its credentials caching system altogether."
msgstr ""

#: ./build/en/book.xml:6988(para) 
msgid "To disable caching for a single command, pass the <option>--no-auth-cache</option> option:"
msgstr ""

#: ./build/en/book.xml:6991(screen) 
#, no-wrap
msgid "\n$ svn commit -F log_msg.txt --no-auth-cache\nAuthentication realm: &lt;svn://host.example.com:3690&gt; example realm\nUsername:  joe\nPassword for 'joe':\n\nAdding         newfile\nTransmitting file data .\nCommitted revision 2324.\n\n# password was not cached, so a second commit still prompts us\n\n$ svn delete newfile\n$ svn commit -F new_msg.txt\nAuthentication realm: &lt;svn://host.example.com:3690&gt; example realm\nUsername:  joe\n…\n"
msgstr ""

#: ./build/en/book.xml:7010(para) 
msgid "Or, if you want to disable credential caching permanently, you can edit the <filename moreinfo=\"none\">config</filename> file in your runtime configuration area, and set the <option>store-auth-creds</option> option to <literal moreinfo=\"none\">no</literal>. This will prevent the storing of credentials used in any Subversion interactions you perform on the affected computer. This can be extended to cover all users on the computer, too, by modifying the system-wide runtime configuration area."
msgstr ""

#: ./build/en/book.xml:7020(screen) 
#, no-wrap
msgid "\n[auth]\nstore-auth-creds = no\n"
msgstr ""

#: ./build/en/book.xml:7025(para) 
msgid "Sometimes users will want to remove specific credentials from the disk cache. To do this, you need to navigate into the <filename moreinfo=\"none\">auth/</filename> area and manually delete the appropriate cache file. Credentials are cached in individual files; if you look inside each file, you will see keys and values. The <literal moreinfo=\"none\">svn:realmstring</literal> key describes the particular server realm that the file is associated with:"
msgstr ""

#: ./build/en/book.xml:7034(screen) 
#, no-wrap
msgid "\n$ ls ~/.subversion/auth/svn.simple/\n5671adf2865e267db74f09ba6f872c28\n3893ed123b39500bca8a0b382839198e\n5c3c22968347b390f349ff340196ed39\n\n$ cat ~/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28\n\nK 8\nusername\nV 3\njoe\nK 8\npassword\nV 4\nblah\nK 15\nsvn:realmstring\nV 45\n&lt;https://svn.domain.com:443&gt; Joe's repository\nEND\n"
msgstr ""

#: ./build/en/book.xml:7057(para) 
msgid "Once you have located the proper cache file, just delete it."
msgstr ""

#: ./build/en/book.xml:7072(para) 
msgid "Again, a common mistake is to misconfigure a server so that it never issues an authentication challenge. When users pass <option>--username</option> and <option>--password</option> options to the client, they're surprised to see that they're never used, i.e. new revisions still appear to have been committed anonymously!"
msgstr ""

#: ./build/en/book.xml:7060(para) 
msgid "One last word about <command moreinfo=\"none\">svn</command>'s authentication behavior, specifically regarding the <option>--username</option> and <option>--password</option> options. Many client subcommands accept these options, but it is important to understand using these options does <emphasis>not</emphasis> automatically send credentials to the server. As discussed earlier, the server <quote>pulls</quote> credentials from the client when it deems necessary; the client cannot <quote>push</quote> them at will. If a username and/or password are passed as options, they will only be presented to the server if the server requests them. <placeholder-1/> These options are typically used to authenticate as a different user than Subversion would have chosen by default (such as your system login name), or when trying to avoid interactive prompting (such as when calling <command moreinfo=\"none\">svn</command> from a script)."
msgstr ""

#: ./build/en/book.xml:7087(para) 
msgid "Here is a final summary that describes how a Subversion client behaves when it receives an authentication challenge."
msgstr ""

#: ./build/en/book.xml:7093(para) 
msgid "First, the client checks whether the user specified any credentials as command-line options (<option>--username</option> and/or <option>--password</option>). If not, or if these options fail to authenticate successfully, then"
msgstr ""

#: ./build/en/book.xml:7101(para) 
msgid "the client looks up the server's hostname, port, and realm in the runtime <filename moreinfo=\"none\">auth/</filename> area, to see if the user already has the appropriate credentials cached. If not, or if the cached credentials fail to authenticate, then"
msgstr ""

#: ./build/en/book.xml:7109(para) 
msgid "finally, the client resorts to prompting the user (unless instructed not to do so via the <option>--non-interactive</option> option or its client-specific equivalents)."
msgstr ""

#: ./build/en/book.xml:7117(para) 
msgid "If the client successfully authenticates by any of the methods listed above, it will attempt to cache the credentials on disk (unless the user has disabled this behavior, as mentioned earlier)."
msgstr ""

#: ./build/en/book.xml:7135(title) 
msgid "Branching and Merging"
msgstr ""

#: ./build/en/book.xml:7137(para) 
msgid "Branching, tagging, and merging are concepts common to almost all version control systems. If you're not familiar with these ideas, we provide a good introduction in this chapter. If you are familiar, then hopefully you'll find it interesting to see how Subversion implements these ideas."
msgstr ""

#: ./build/en/book.xml:7143(para) 
msgid "Branching is a fundamental part of version control. If you're going to allow Subversion to manage your data, then this is a feature you'll eventually come to depend on. This chapter assumes that you're already familiar with Subversion's basic concepts (<xref linkend=\"svn.basic\"/>)."
msgstr ""

#: ./build/en/book.xml:7154(title) 
msgid "What's a Branch?"
msgstr ""

#: ./build/en/book.xml:7156(para) 
msgid "Suppose it's your job to maintain a document for a division in your company, a handbook of some sort. One day a different division asks you for the same handbook, but with a few parts <quote>tweaked</quote> for them, since they do things slightly differently."
msgstr ""

#: ./build/en/book.xml:7162(para) 
msgid "What do you do in this situation? You do the obvious thing: you make a second copy of your document, and begin maintaining the two copies separately. As each department asks you to make small changes, you incorporate them into one copy or the other."
msgstr ""

#: ./build/en/book.xml:7168(para) 
msgid "You often want to make the same change to both copies. For example, if you discover a typo in the first copy, it's very likely that the same typo exists in the second copy. The two documents are almost the same, after all; they only differ in small, specific ways."
msgstr ""

#: ./build/en/book.xml:7174(para) 
msgid "This is the basic concept of a <firstterm>branch</firstterm>—namely, a line of development that exists independently of another line, yet still shares a common history if you look far enough back in time. A branch always begins life as a copy of something, and moves on from there, generating its own history (see <xref linkend=\"svn.branchmerge.whatis.dia-1\"/>)."
msgstr ""

#: ./build/en/book.xml:7182(title) 
msgid "Branches of development"
msgstr ""

#: ./build/en/book.xml:7186(para) 
msgid "Subversion has commands to help you maintain parallel branches of your files and directories. It allows you to create branches by copying your data, and remembers that the copies are related to one another. It also helps you duplicate changes from one branch to another. Finally, it can make portions of your working copy reflect different branches, so that you can <quote>mix and match</quote> different lines of development in your daily work."
msgstr ""

#: ./build/en/book.xml:7201(title) 
msgid "Using Branches"
msgstr ""

#: ./build/en/book.xml:7203(para) 
msgid "At this point, you should understand how each commit creates an entire new filesystem tree (called a <quote>revision</quote>) in the repository. If not, go back and read about revisions in <xref linkend=\"svn.basic.in-action.revs\"/>."
msgstr ""

#: ./build/en/book.xml:7208(para) 
msgid "For this chapter, we'll go back to the same example from <xref linkend=\"svn.basic\"/>. Remember that you and your collaborator, Sally, are sharing a repository that contains two projects, <filename moreinfo=\"none\">paint</filename> and <filename moreinfo=\"none\">calc</filename>. Notice that in <xref linkend=\"svn.branchmerge.using.dia-1\"/>, however, each project directory now contains subdirectories named <filename moreinfo=\"none\">trunk</filename> and <filename moreinfo=\"none\">branches</filename>. The reason for this will soon become clear."
msgstr ""

#: ./build/en/book.xml:7218(title) 
msgid "Starting repository layout"
msgstr ""

#: ./build/en/book.xml:7222(para) 
msgid "As before, assume that Sally and you both have working copies of the <quote>calc</quote> project. Specifically, you each have a working copy of <filename moreinfo=\"none\">/calc/trunk</filename>. All the files for the project are in this subdirectory rather than in <filename moreinfo=\"none\">/calc</filename> itself, because your team has decided that <filename moreinfo=\"none\">/calc/trunk</filename> is where the <quote>main line</quote> of development is going to take place."
msgstr ""

#: ./build/en/book.xml:7231(para) 
msgid "Let's say that you've been given the task of performing a radical reorganization of the project. It will take a long time to write, and will affect all the files in the project. The problem here is that you don't want to interfere with Sally, who is in the process of fixing small bugs here and there. She's depending on the fact that the latest version of the project (in <filename moreinfo=\"none\">/calc/trunk</filename>) is always usable. If you start committing your changes bit-by-bit, you'll surely break things for Sally."
msgstr ""

#: ./build/en/book.xml:7241(para) 
msgid "One strategy is to crawl into a hole: you and Sally can stop sharing information for a week or two. That is, start gutting and reorganizing all the files in your working copy, but don't commit or update until you're completely finished with the task. There are a number of problems with this, though. First, it's not very safe. Most people like to save their work to the repository frequently, should something bad accidentally happen to their working copy. Second, it's not very flexible. If you do your work on different computers (perhaps you have a working copy of <filename moreinfo=\"none\">/calc/trunk</filename> on two different machines), you'll need to manually copy your changes back and forth, or just do all the work on a single computer. By that same token, it's difficult to share your changes-in-progress with anyone else. A common software development <quote>best practice</quote> is to allow your peers to review your work as you go. If nobody sees your intermediate commits, you lose potential feedback. Finally, when you're finished with all your changes, you might find it very difficult to re-merge your final work with the rest of the company's main body of code. Sally (or others) may have made many other changes in the repository that are difficult to incorporate into your working copy—especially if you run <command moreinfo=\"none\">svn update</command> after weeks of isolation."
msgstr ""

#: ./build/en/book.xml:7265(para) 
msgid "The better solution is to create your own branch, or line of development, in the repository. This allows you to save your half-broken work frequently without interfering with others, yet you can still selectively share information with your collaborators. You'll see exactly how this works later on."
msgstr ""

#: ./build/en/book.xml:7274(title) 
msgid "Creating a Branch"
msgstr ""

#: ./build/en/book.xml:7276(para) 
msgid "Creating a branch is very simple—you make a copy of the project in the repository using the <command moreinfo=\"none\">svn copy</command> command. Subversion is not only able to copy single files, but whole directories as well. In this case, you want to make a copy of the <filename moreinfo=\"none\">/calc/trunk</filename> directory. Where should the new copy live? Wherever you wish—it's a matter of project policy. Let's say that your team has a policy of creating branches in the <filename moreinfo=\"none\">/calc/branches</filename> area of the repository, and you want to name your branch <literal moreinfo=\"none\">my-calc-branch</literal>. You'll want to create a new directory, <filename moreinfo=\"none\">/calc/branches/my-calc-branch</filename>, which begins its life as a copy of <filename moreinfo=\"none\">/calc/trunk</filename>."
msgstr ""

#: ./build/en/book.xml:7292(para) 
msgid "There are two different ways to make a copy. We'll demonstrate the messy way first, just to make the concept clear. To begin, check out a working copy of the project's root directory, <filename moreinfo=\"none\">/calc</filename>:"
msgstr ""

#: ./build/en/book.xml:7297(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/repos/calc bigwc\nA  bigwc/trunk/\nA  bigwc/trunk/Makefile\nA  bigwc/trunk/integer.c\nA  bigwc/trunk/button.c\nA  bigwc/branches/\nChecked out revision 340.\n"
msgstr ""

#: ./build/en/book.xml:7307(para) 
msgid "Making a copy is now simply a matter of passing two working-copy paths to the <command moreinfo=\"none\">svn copy</command> command:"
msgstr ""

#: ./build/en/book.xml:7311(screen) 
#, no-wrap
msgid "\n$ cd bigwc\n$ svn copy trunk branches/my-calc-branch\n$ svn status\nA  +   branches/my-calc-branch\n"
msgstr ""

#: ./build/en/book.xml:7318(para) 
msgid "In this case, the <command moreinfo=\"none\">svn copy</command> command recursively copies the <filename moreinfo=\"none\">trunk</filename> working directory to a new working directory, <filename moreinfo=\"none\">branches/my-calc-branch</filename>. As you can see from the <command moreinfo=\"none\">svn status</command> command, the new directory is now scheduled for addition to the repository. But also notice the <quote>+</quote> sign next to the letter A. This indicates that the scheduled addition is a <emphasis>copy</emphasis> of something, not something new. When you commit your changes, Subversion will create <filename moreinfo=\"none\">/calc/branches/my-calc-branch</filename> in the repository by copying <filename moreinfo=\"none\">/calc/trunk</filename>, rather than resending all of the working copy data over the network:"
msgstr ""

#: ./build/en/book.xml:7333(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"Creating a private branch of /calc/trunk.\"\nAdding         branches/my-calc-branch\nCommitted revision 341.\n"
msgstr ""

#: ./build/en/book.xml:7339(para) 
msgid "And now here's the easier method of creating a branch, which we should have told you about in the first place: <command moreinfo=\"none\">svn copy</command> is able to operate directly on two URLs."
msgstr ""

#: ./build/en/book.xml:7344(screen) 
#, no-wrap
msgid "\n$ svn copy http://svn.example.com/repos/calc/trunk \\\n           http://svn.example.com/repos/calc/branches/my-calc-branch \\\n      -m \"Creating a private branch of /calc/trunk.\"\n\nCommitted revision 341.\n"
msgstr ""

#: ./build/en/book.xml:7360(para) 
msgid "Subversion does not support copying between different repositories. When using URLs with <command moreinfo=\"none\">svn copy</command> or <command moreinfo=\"none\">svn move</command>, you can only copy items within the same repository."
msgstr ""

#: ./build/en/book.xml:7352(para) 
msgid "There's really no difference between these two methods. Both procedures create a new directory in revision 341, and the new directory is a copy of <filename moreinfo=\"none\">/calc/trunk</filename>. This is shown in <xref linkend=\"svn.branchmerge.using.create.dia-1\"/>. Notice that the second method, however, performs an <emphasis>immediate</emphasis> commit. <placeholder-1/> It's an easier procedure, because it doesn't require you to check out a large portion of the repository. In fact, this technique doesn't even require you to have a working copy at all. This is the way most users create branches."
msgstr ""

#: ./build/en/book.xml:7371(title) 
msgid "Repository with new copy"
msgstr ""

#: ./build/en/book.xml:7376(title) 
msgid "Cheap Copies"
msgstr ""

#: ./build/en/book.xml:7378(para) 
msgid "Subversion's repository has a special design. When you copy a directory, you don't need to worry about the repository growing huge—Subversion doesn't actually duplicate any data. Instead, it creates a new directory entry that points to an <emphasis>existing</emphasis> tree. If you're a Unix user, this is the same concept as a hard-link. As further changes are made to files and directories beneath the copied directory, Subversion continues to employ this hard-link concept where it can. It only duplicates data when it is necessary to disambiguate different versions of objects."
msgstr ""

#: ./build/en/book.xml:7390(para) 
msgid "This is why you'll often hear Subversion users talk about <quote>cheap copies</quote>. It doesn't matter how large the directory is—it takes a very tiny, constant amount of time to make a copy of it. In fact, this feature is the basis of how commits work in Subversion: each revision is a <quote>cheap copy</quote> of the previous revision, with a few items lazily changed within. (To read more about this, visit Subversion's website and read about the <quote>bubble up</quote> method in Subversion's design documents.)"
msgstr ""

#: ./build/en/book.xml:7401(para) 
msgid "Of course, these internal mechanics of copying and sharing data are hidden from the user, who simply sees copies of trees. The main point here is that copies are cheap, both in time and space. If you create a branch entirely within the repository (by running <command moreinfo=\"none\">svn copy URL1 URL2</command>), it's a quick, constant-time operation. Make branches as often as you want."
msgstr ""

#: ./build/en/book.xml:7414(title) 
msgid "Working with Your Branch"
msgstr ""

#: ./build/en/book.xml:7416(para) 
msgid "Now that you've created a branch of the project, you can check out a new working copy to start using it:"
msgstr ""

#: ./build/en/book.xml:7419(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch\nA  my-calc-branch/Makefile\nA  my-calc-branch/integer.c\nA  my-calc-branch/button.c\nChecked out revision 341.\n"
msgstr ""

#: ./build/en/book.xml:7427(para) 
msgid "There's nothing special about this working copy; it simply mirrors a different directory in the repository. When you commit changes, however, Sally won't ever see them when she updates. Her working copy is of <filename moreinfo=\"none\">/calc/trunk</filename>. (Be sure to read <xref linkend=\"svn.branchmerge.switchwc\"/> later in this chapter: the <command moreinfo=\"none\">svn switch</command> command is an alternate way of creating a working copy of a branch.)"
msgstr ""

#: ./build/en/book.xml:7435(para) 
msgid "Let's pretend that a week goes by, and the following commits happen:"
msgstr ""

#: ./build/en/book.xml:7439(para) 
msgid "You make a change to <filename moreinfo=\"none\">/calc/branches/my-calc-branch/button.c</filename>, which creates revision 342."
msgstr ""

#: ./build/en/book.xml:7445(para) 
msgid "You make a change to <filename moreinfo=\"none\">/calc/branches/my-calc-branch/integer.c</filename>, which creates revision 343."
msgstr ""

#: ./build/en/book.xml:7451(para) 
msgid "Sally makes a change to <filename moreinfo=\"none\">/calc/trunk/integer.c</filename>, which creates revision 344."
msgstr ""

#: ./build/en/book.xml:7458(para) 
msgid "There are now two independent lines of development, shown in <xref linkend=\"svn.branchmerge.using.work.dia-1\"/>, happening on <filename moreinfo=\"none\">integer.c</filename>."
msgstr ""

#: ./build/en/book.xml:7463(title) 
msgid "The branching of one file's history"
msgstr ""

#: ./build/en/book.xml:7467(para) 
msgid "Things get interesting when you look at the history of changes made to your copy of <filename moreinfo=\"none\">integer.c</filename>:"
msgstr ""

#: ./build/en/book.xml:7471(screen) 
#, no-wrap
msgid "\n$ pwd\n/home/user/my-calc-branch\n\n$ svn log -v integer.c\n------------------------------------------------------------------------\nr343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\nChanged paths:\n   M /calc/branches/my-calc-branch/integer.c\n\n* integer.c:  frozzled the wazjub.\n\n------------------------------------------------------------------------\nr341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\nChanged paths:\n   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n\nCreating a private branch of /calc/trunk.\n\n------------------------------------------------------------------------\nr303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\nChanged paths:\n   M /calc/trunk/integer.c\n\n* integer.c:  changed a docstring.\n\n------------------------------------------------------------------------\nr98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\nChanged paths:\n   M /calc/trunk/integer.c\n\n* integer.c:  adding this file to the project.\n\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:7507(para) 
msgid "Notice that Subversion is tracing the history of your branch's <filename moreinfo=\"none\">integer.c</filename> all the way back through time, even traversing the point where it was copied. It shows the creation of the branch as an event in the history, because <filename moreinfo=\"none\">integer.c</filename> was implicitly copied when all of <filename moreinfo=\"none\">/calc/trunk/</filename> was copied. Now look what happens when Sally runs the same command on her copy of the file:"
msgstr ""

#: ./build/en/book.xml:7516(screen) 
#, no-wrap
msgid "\n$ pwd\n/home/sally/calc\n\n$ svn log -v integer.c\n------------------------------------------------------------------------\nr344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\nChanged paths:\n   M /calc/trunk/integer.c\n\n* integer.c:  fix a bunch of spelling errors.\n\n------------------------------------------------------------------------\nr303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines\nChanged paths:\n   M /calc/trunk/integer.c\n\n* integer.c:  changed a docstring.\n\n------------------------------------------------------------------------\nr98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines\nChanged paths:\n   M /calc/trunk/integer.c\n\n* integer.c:  adding this file to the project.\n\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:7545(para) 
msgid "Sally sees her own revision 344 change, but not the change you made in revision 343. As far as Subversion is concerned, these two commits affected different files in different repository locations. However, Subversion <emphasis>does</emphasis> show that the two files share a common history. Before the branch-copy was made in revision 341, they used to be the same file. That's why you and Sally both see the changes made in revisions 303 and 98."
msgstr ""

#: ./build/en/book.xml:7558(title) 
msgid "The Key Concepts Behind Branches"
msgstr ""

#: ./build/en/book.xml:7560(para) 
msgid "There are two important lessons that you should remember from this section. First, Subversion has no internal concept of a branch—it only knows how to make copies. When you copy a directory, the resulting directory is only a <quote>branch</quote> because <emphasis>you</emphasis> attach that meaning to it. You may think of the directory differently, or treat it differently, but to Subversion it's just an ordinary directory that happens to carry some extra historical information. Second, because of this copy mechanism, Subversion's branches exist as <emphasis>normal filesystem directories</emphasis> in the repository. This is different from other version control systems, where branches are typically defined by adding extra-dimensional <quote>labels</quote> to collections of files."
msgstr ""

#: ./build/en/book.xml:7584(title) 
msgid "Copying Changes Between Branches"
msgstr ""

#: ./build/en/book.xml:7586(para) 
msgid "Now you and Sally are working on parallel branches of the project: you're working on a private branch, and Sally is working on the <firstterm>trunk</firstterm>, or main line of development."
msgstr ""

#: ./build/en/book.xml:7591(para) 
msgid "For projects that have a large number of contributors, it's common for most people to have working copies of the trunk. Whenever someone needs to make a long-running change that is likely to disrupt the trunk, a standard procedure is to create a private branch and commit changes there until all the work is complete."
msgstr ""

#: ./build/en/book.xml:7598(para) 
msgid "So, the good news is that you and Sally aren't interfering with each other. The bad news is that it's very easy to drift <emphasis>too</emphasis> far apart. Remember that one of the problems with the <quote>crawl in a hole</quote> strategy is that by the time you're finished with your branch, it may be near-impossible to merge your changes back into the trunk without a huge number of conflicts."
msgstr ""

#: ./build/en/book.xml:7606(para) 
msgid "Instead, you and Sally might continue to share changes as you work. It's up to you to decide which changes are worth sharing; Subversion gives you the ability to selectively <quote>copy</quote> changes between branches. And when you're completely finished with your branch, your entire set of branch changes can be copied back into the trunk."
msgstr ""

#: ./build/en/book.xml:7616(title) 
msgid "Copying Specific Changes"
msgstr ""

#: ./build/en/book.xml:7619(para) 
msgid "In the previous section, we mentioned that both you and Sally made changes to <filename moreinfo=\"none\">integer.c</filename> on different branches. If you look at Sally's log message for revision 344, you can see that she fixed some spelling errors. No doubt, your copy of the same file still has the same spelling errors. It's likely that your future changes to this file will be affecting the same areas that have the spelling errors, so you're in for some potential conflicts when you merge your branch someday. It's better, then, to receive Sally's change now, <emphasis>before</emphasis> you start working too heavily in the same places."
msgstr ""

#: ./build/en/book.xml:7631(para) 
msgid "It's time to use the <command moreinfo=\"none\">svn merge</command> command. This command, it turns out, is a very close cousin to the <command moreinfo=\"none\">svn diff</command> command (which you read about in <xref linkend=\"svn.tour\"/>). Both commands are able to compare any two objects in the repository and describe the differences. For example, you can ask <command moreinfo=\"none\">svn diff</command> to show you the exact change made by Sally in revision 344:"
msgstr ""

#: ./build/en/book.xml:7640(screen) 
#, no-wrap
msgid "\n$ svn diff -c 344 http://svn.example.com/repos/calc/trunk\n\nIndex: integer.c\n===================================================================\n--- integer.c\t(revision 343)\n+++ integer.c\t(revision 344)\n@@ -147,7 +147,7 @@\n     case 6:  sprintf(info-&gt;operating_system, \"HPFS (OS/2 or NT)\"); break;\n     case 7:  sprintf(info-&gt;operating_system, \"Macintosh\"); break;\n     case 8:  sprintf(info-&gt;operating_system, \"Z-System\"); break;\n-    case 9:  sprintf(info-&gt;operating_system, \"CPM\"); break;\n+    case 9:  sprintf(info-&gt;operating_system, \"CP/M\"); break;\n     case 10:  sprintf(info-&gt;operating_system, \"TOPS-20\"); break;\n     case 11:  sprintf(info-&gt;operating_system, \"NTFS (Windows NT)\"); break;\n     case 12:  sprintf(info-&gt;operating_system, \"QDOS\"); break;\n@@ -164,7 +164,7 @@\n     low = (unsigned short) read_byte(gzfile);  /* read LSB */\n     high = (unsigned short) read_byte(gzfile); /* read MSB */\n     high = high &lt;&lt; 8;  /* interpret MSB correctly */\n-    total = low + high; /* add them togethe for correct total */\n+    total = low + high; /* add them together for correct total */\n\n     info-&gt;extra_header = (unsigned char *) my_malloc(total);\n     fread(info-&gt;extra_header, total, 1, gzfile);\n@@ -241,7 +241,7 @@\n      Store the offset with ftell() ! */\n\n   if ((info-&gt;data_offset = ftell(gzfile))== -1) {\n-    printf(\"error: ftell() retturned -1.\\n\");\n+    printf(\"error: ftell() returned -1.\\n\");\n     exit(1);\n   }\n\n@@ -249,7 +249,7 @@\n   printf(\"I believe start of compressed data is %u\\n\", info-&gt;data_offset);\n   #endif\n\n-  /* Set postion eight bytes from the end of the file. */\n+  /* Set position eight bytes from the end of the file. */\n\n   if (fseek(gzfile, -8, SEEK_END)) {\n     printf(\"error: fseek() returned non-zero\\n\");\n"
msgstr ""

#: ./build/en/book.xml:7685(para) 
msgid "The <command moreinfo=\"none\">svn merge</command> command is almost exactly the same. Instead of printing the differences to your terminal, however, it applies them directly to your working copy as <emphasis>local modifications</emphasis>:"
msgstr ""

#: ./build/en/book.xml:7690(screen) 
#, no-wrap
msgid "\n$ svn merge -c 344 http://svn.example.com/repos/calc/trunk\nU  integer.c\n\n$ svn status\nM  integer.c\n"
msgstr ""

#: ./build/en/book.xml:7698(para) 
msgid "The output of <command moreinfo=\"none\">svn merge</command> shows that your copy of <filename moreinfo=\"none\">integer.c</filename> was patched. It now contains Sally's change—the change has been <quote>copied</quote> from the trunk to your working copy of your private branch, and now exists as a local modification. At this point, it's up to you to review the local modification and make sure it works correctly."
msgstr ""

#: ./build/en/book.xml:7706(para) 
msgid "In another scenario, it's possible that things may not have gone so well, and that <filename moreinfo=\"none\">integer.c</filename> may have entered a conflicted state. You might need to resolve the conflict using standard procedures (see <xref linkend=\"svn.tour\"/>), or if you decide that the merge was a bad idea altogether, simply give up and <command moreinfo=\"none\">svn revert</command> the local change."
msgstr ""

#: ./build/en/book.xml:7713(para) 
msgid "But assuming that you've reviewed the merged change, you can <command moreinfo=\"none\">svn commit</command> the change as usual. At that point, the change has been merged into your repository branch. In version control terminology, this act of copying changes between branches is commonly called <firstterm>porting</firstterm> changes."
msgstr ""

#: ./build/en/book.xml:7720(para) 
msgid "When you commit the local modification, make sure your log message mentions that you're porting a specific change from one branch to another. For example:"
msgstr ""

#: ./build/en/book.xml:7724(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"integer.c: ported r344 (spelling fixes) from trunk.\"\nSending        integer.c\nTransmitting file data .\nCommitted revision 360.\n"
msgstr ""

#: ./build/en/book.xml:7731(para) 
msgid "As you'll see in the next sections, this is a very important <quote>best practice</quote> to follow."
msgstr ""

#: ./build/en/book.xml:7735(title) 
msgid "Why Not Use Patches Instead?"
msgstr ""

#: ./build/en/book.xml:7737(para) 
msgid "A question may be on your mind, especially if you're a Unix user: why bother to use <command moreinfo=\"none\">svn merge</command> at all? Why not simply use the operating system's <command moreinfo=\"none\">patch</command> command to accomplish the same job? For example:"
msgstr ""

#: ./build/en/book.xml:7743(screen) 
#, no-wrap
msgid "\n$ svn diff -c 344 http://svn.example.com/repos/calc/trunk &gt; patchfile\n$ patch -p0  &lt; patchfile\nPatching file integer.c using Plan A...\nHunk #1 succeeded at 147.\nHunk #2 succeeded at 164.\nHunk #3 succeeded at 241.\nHunk #4 succeeded at 249.\ndone\n"
msgstr ""

#: ./build/en/book.xml:7754(para) 
msgid "In this particular case, yes, there really is no difference. But <command moreinfo=\"none\">svn merge</command> has special abilities that surpass the <command moreinfo=\"none\">patch</command> program. The file format used by <command moreinfo=\"none\">patch</command> is quite limited; it's only able to tweak file contents. There's no way to represent changes to <emphasis>trees</emphasis>, such as the addition, removal, or renaming of files and directories. Nor can the <command moreinfo=\"none\">patch</command> program notice changes to property changes. If Sally's change had, say, added a new directory, the output of <command moreinfo=\"none\">svn diff</command> wouldn't have mentioned it at all. <command moreinfo=\"none\">svn diff</command> only outputs the limited patch-format, so there are some ideas it simply can't express. The <command moreinfo=\"none\">svn merge</command> command, however, can express changes in tree structure and properties by directly applying them to your working copy."
msgstr ""

#: ./build/en/book.xml:7773(para) 
msgid "A word of warning: while <command moreinfo=\"none\">svn diff</command> and <command moreinfo=\"none\">svn merge</command> are very similar in concept, they do have different syntax in many cases. Be sure to read about them in <xref linkend=\"svn.ref\"/> for details, or ask <command moreinfo=\"none\">svn help</command>. For example, <command moreinfo=\"none\">svn merge</command> requires a working-copy path as a target, i.e. a place where it should apply the tree-changes. If the target isn't specified, it assumes you are trying to perform one of the following common operations:"
msgstr ""

#: ./build/en/book.xml:7785(para) 
msgid "You want to merge directory changes into your current working directory."
msgstr ""

#: ./build/en/book.xml:7789(para) 
msgid "You want to merge the changes in a specific file into a file by the same name which exists in your current working directory."
msgstr ""

#: ./build/en/book.xml:7795(para) 
msgid "If you are merging a directory and haven't specified a target path, <command moreinfo=\"none\">svn merge</command> assumes the first case above and tries to apply the changes into your current directory. If you are merging a file, and that file (or a file by the same name) exists in your current working directory, <command moreinfo=\"none\">svn merge</command> assumes the second case and tries to apply the changes to a local file with the same name."
msgstr ""

#: ./build/en/book.xml:7803(para) 
msgid "If you want changes applied somewhere else, you'll need to say so. For example, if you're sitting in the parent directory of your working copy, you'll have to specify the target directory to receive the changes:"
msgstr ""

#: ./build/en/book.xml:7808(screen) 
#, no-wrap
msgid "\n$ svn merge -c 344 http://svn.example.com/repos/calc/trunk my-calc-branch\nU   my-calc-branch/integer.c\n"
msgstr ""

#: ./build/en/book.xml:7817(title) 
msgid "The Key Concept Behind Merging"
msgstr ""

#: ./build/en/book.xml:7819(para) 
msgid "You've now seen an example of the <command moreinfo=\"none\">svn merge</command> command, and you're about to see several more. If you're feeling confused about exactly how merging works, you're not alone. Many users (especially those new to version control) are initially perplexed about the proper syntax of the command, and about how and when the feature should be used. But fear not, this command is actually much simpler than you think! There's a very easy technique for understanding exactly how <command moreinfo=\"none\">svn merge</command> behaves."
msgstr ""

#: ./build/en/book.xml:7830(para) 
msgid "The main source of confusion is the <emphasis>name</emphasis> of the command. The term <quote>merge</quote> somehow denotes that branches are combined together, or that there's some sort of mysterious blending of data going on. That's not the case. A better name for the command might have been <command moreinfo=\"none\">svn diff-and-apply</command>, because that's all that happens: two repository trees are compared, and the differences are applied to a working copy."
msgstr ""

#: ./build/en/book.xml:7840(para) 
msgid "The command takes three arguments:"
msgstr ""

#: ./build/en/book.xml:7844(para) 
msgid "An initial repository tree (often called the <firstterm>left side</firstterm> of the comparison),"
msgstr ""

#: ./build/en/book.xml:7848(para) 
msgid "A final repository tree (often called the <firstterm>right side</firstterm> of the comparison),"
msgstr ""

#: ./build/en/book.xml:7852(para) 
msgid "A working copy to accept the differences as local changes (often called the <firstterm>target</firstterm> of the merge)."
msgstr ""

#: ./build/en/book.xml:7858(para) 
msgid "Once these three arguments are specified, the two trees are compared, and the resulting differences are applied to the target working copy as local modifications. When the command is done, the results are no different than if you had hand-edited the files, or run various <command moreinfo=\"none\">svn add</command> or <command moreinfo=\"none\">svn delete</command> commands yourself. If you like the results, you can commit them. If you don't like the results, you can simply <command moreinfo=\"none\">svn revert</command> all of the changes."
msgstr ""

#: ./build/en/book.xml:7868(para) 
msgid "The syntax of <command moreinfo=\"none\">svn merge</command> allows you to specify the three necessary arguments rather flexibly. Here are some examples:"
msgstr ""

#: ./build/en/book.xml:7872(screen) 
#, no-wrap
msgid "\n$ svn merge http://svn.example.com/repos/branch1@150 \\\n            http://svn.example.com/repos/branch2@212 \\\n            my-working-copy\n\n$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy\n\n$ svn merge -r 100:200 http://svn.example.com/repos/trunk\n"
msgstr ""

#: ./build/en/book.xml:7882(para) 
msgid "The first syntax lays out all three arguments explicitly, naming each tree in the form <emphasis>URL@REV</emphasis> and naming the working copy target. The second syntax can be used as a shorthand for situations when you're comparing two different revisions of the same URL. The last syntax shows how the working-copy argument is optional; if omitted, it defaults to the current directory."
msgstr ""

#: ./build/en/book.xml:7895(title) 
msgid "Best Practices for Merging"
msgstr ""

#: ./build/en/book.xml:7899(title) 
msgid "Tracking Merges Manually"
msgstr ""

#: ./build/en/book.xml:7901(para) 
msgid "Merging changes sounds simple enough, but in practice it can become a headache. The problem is that if you repeatedly merge changes from one branch to another, you might accidentally merge the same change <emphasis>twice</emphasis>. When this happens, sometimes things will work fine. When patching a file, Subversion typically notices if the file already has the change, and does nothing. But if the already-existing change has been modified in any way, you'll get a conflict."
msgstr ""

#: ./build/en/book.xml:7911(para) 
msgid "Ideally, your version control system should prevent the double-application of changes to a branch. It should automatically remember which changes a branch has already received, and be able to list them for you. It should use this information to help automate merges as much as possible."
msgstr ""

#: ./build/en/book.xml:7920(para) 
msgid "However, at the time of writing, this feature is being worked on!"
msgstr ""

#: ./build/en/book.xml:7918(para) 
msgid "Unfortunately, Subversion is not such a system; it does not yet record any information about merge operations. <placeholder-1/> When you commit local modifications, the repository has no idea whether those changes came from running <command moreinfo=\"none\">svn merge</command>, or from just hand-editing the files."
msgstr ""

#: ./build/en/book.xml:7926(para) 
msgid "What does this mean to you, the user? It means that until the day Subversion grows this feature, you'll have to track merge information yourself. The best place to do this is in the commit log-message. As demonstrated in the earlier example, it's recommended that your log-message mention a specific revision number (or range of revisions) that are being merged into your branch. Later on, you can run <command moreinfo=\"none\">svn log</command> to review which changes your branch already contains. This will allow you to carefully construct a subsequent <command moreinfo=\"none\">svn merge</command> command that won't be redundant with previously ported changes."
msgstr ""

#: ./build/en/book.xml:7939(para) 
msgid "In the next section, we'll show some examples of this technique in action."
msgstr ""

#: ./build/en/book.xml:7946(title) 
msgid "Previewing Merges"
msgstr ""

#: ./build/en/book.xml:7948(para) 
msgid "Because merging only results in local modifications, it's not usually a high-risk operation. If you get the merge wrong the first time, simply <command moreinfo=\"none\">svn revert</command> the changes and try again."
msgstr ""

#: ./build/en/book.xml:7953(para) 
msgid "It's possible, however, that your working copy might already have local modifications. The changes applied by a merge will be mixed with your pre-existing ones, and running <command moreinfo=\"none\">svn revert</command> is no longer an option. The two sets of changes may be impossible to separate."
msgstr ""

#: ./build/en/book.xml:7959(para) 
msgid "In cases like this, people take comfort in being able to predict or examine merges before they happen. One simple way to do that is to run <command moreinfo=\"none\">svn diff</command> with the same arguments you plan to pass to <command moreinfo=\"none\">svn merge</command>, as we already showed in our first example of merging. Another method of previewing is to pass the <option>--dry-run</option> option to the merge command:"
msgstr ""

#: ./build/en/book.xml:7968(screen) 
#, no-wrap
msgid "\n$ svn merge --dry-run -c 344 http://svn.example.com/repos/calc/trunk\nU  integer.c\n\n$ svn status\n#  nothing printed, working copy is still unchanged.\n"
msgstr ""

#: ./build/en/book.xml:7976(para) 
msgid "The <option>--dry-run</option> option doesn't actually apply any local changes to the working copy. It only shows status codes that <emphasis>would</emphasis> be printed in a real merge. It's useful for getting a <quote>high level</quote> preview of the potential merge, for those times when running <command moreinfo=\"none\">svn diff</command> gives too much detail."
msgstr ""

#: ./build/en/book.xml:7988(title) 
msgid "Merge Conflicts"
msgstr ""

#: ./build/en/book.xml:7990(para) 
msgid "Just like the <command moreinfo=\"none\">svn update</command> command, <command moreinfo=\"none\">svn merge</command> applies changes to your working copy. And therefore it's also capable of creating conflicts. The conflicts produced by <command moreinfo=\"none\">svn merge</command>, however, are sometimes different, and this section explains those differences."
msgstr ""

#: ./build/en/book.xml:7997(para) 
msgid "To begin with, assume that your working copy has no local edits. When you <command moreinfo=\"none\">svn update</command> to a particular revision, the changes sent by the server will always apply <quote>cleanly</quote> to your working copy. The server produces the delta by comparing two trees: a virtual snapshot of your working copy, and the revision tree you're interested in. Because the left-hand side of the comparison is exactly equal to what you already have, the delta is guaranteed to correctly convert your working copy into the right-hand tree."
msgstr ""

#: ./build/en/book.xml:8008(para) 
msgid "But <command moreinfo=\"none\">svn merge</command> has no such guarantees and can be much more chaotic: the user can ask the server to compare <emphasis>any</emphasis> two trees at all, even ones that are unrelated to the working copy! This means there's large potential for human error. Users will sometimes compare the wrong two trees, creating a delta that doesn't apply cleanly. <command moreinfo=\"none\">svn merge</command> will do its best to apply as much of the delta as possible, but some parts may be impossible. Just like the Unix <command moreinfo=\"none\">patch</command> command sometimes complains about <quote>failed hunks</quote>, <command moreinfo=\"none\">svn merge</command> will complain about <quote>skipped targets</quote>:"
msgstr ""

#: ./build/en/book.xml:8021(screen) 
#, no-wrap
msgid "\n$ svn merge -r 1288:1351 http://svn.example.com/repos/branch\nU  foo.c\nU  bar.c\nSkipped missing target: 'baz.c'\nU  glub.c\nC  glorb.h\n\n$\n"
msgstr ""

#: ./build/en/book.xml:8032(para) 
msgid "In the previous example it might be the case that <filename moreinfo=\"none\">baz.c</filename> exists in both snapshots of the branch being compared, and the resulting delta wants to change the file's contents, but the file doesn't exist in the working copy. Whatever the case, the <quote>skipped</quote> message means that the user is most likely comparing the wrong two trees; they're the classic sign of user error. When this happens, it's easy to recursively revert all the changes created by the merge (<command moreinfo=\"none\">svn revert --recursive</command>), delete any unversioned files or directories left behind after the revert, and re-run <command moreinfo=\"none\">svn merge</command> with different arguments."
msgstr ""

#: ./build/en/book.xml:8046(para) 
msgid "Also notice that the previous example shows a conflict happening on <filename moreinfo=\"none\">glorb.h</filename>. We already stated that the working copy has no local edits: how can a conflict possibly happen? Again, because the user can use <command moreinfo=\"none\">svn merge</command> to define and apply any old delta to the working copy, that delta may contain textual changes that don't cleanly apply to a working file, even if the file has no local modifications."
msgstr ""

#: ./build/en/book.xml:8055(para) 
msgid "Another small difference between <command moreinfo=\"none\">svn update</command> and <command moreinfo=\"none\">svn merge</command> are the names of the full-text files created when a conflict happens. In <xref linkend=\"svn.tour.cycle.resolve\"/>, we saw that an update produces files named <filename moreinfo=\"none\">filename.mine</filename>, <filename moreinfo=\"none\">filename.rOLDREV</filename>, and <filename moreinfo=\"none\">filename.rNEWREV</filename>. When <command moreinfo=\"none\">svn merge</command> produces a conflict, though, it creates three files named <filename moreinfo=\"none\">filename.working</filename>, <filename moreinfo=\"none\">filename.left</filename>, and <filename moreinfo=\"none\">filename.right</filename>. In this case, the terms <quote>left</quote> and <quote>right</quote> are describing which side of the double-tree comparison the file came from. In any case, these differing names will help you distinguish between conflicts that happened as a result of an update versus ones that happened as a result of a merge."
msgstr ""

#: ./build/en/book.xml:8078(title) 
msgid "Noticing or Ignoring Ancestry"
msgstr ""

#: ./build/en/book.xml:8080(para) 
msgid "When conversing with a Subversion developer, you might very likely hear reference to the term <firstterm>ancestry</firstterm>. This word is used to describe the relationship between two objects in a repository: if they're related to each other, then one object is said to be an ancestor of the other."
msgstr ""

#: ./build/en/book.xml:8087(para) 
msgid "For example, suppose you commit revision 100, which includes a change to a file <filename moreinfo=\"none\">foo.c</filename>. Then <filename moreinfo=\"none\">foo.c@99</filename> is an <quote>ancestor</quote> of <filename moreinfo=\"none\">foo.c@100</filename>. On the other hand, suppose you commit the deletion of <filename moreinfo=\"none\">foo.c</filename> in revision 101, and then add a new file by the same name in revision 102. In this case, <filename moreinfo=\"none\">foo.c@99</filename> and <filename moreinfo=\"none\">foo.c@102</filename> may appear to be related (they have the same path), but in fact are completely different objects in the repository. They share no history or <quote>ancestry</quote>."
msgstr ""

#: ./build/en/book.xml:8100(para) 
msgid "The reason for bringing this up is to point out an important difference between <command moreinfo=\"none\">svn diff</command> and <command moreinfo=\"none\">svn merge</command>. The former command ignores ancestry, while the latter command is quite sensitive to it. For example, if you asked <command moreinfo=\"none\">svn diff</command> to compare revisions 99 and 102 of <filename moreinfo=\"none\">foo.c</filename>, you would see line-based diffs; the <literal moreinfo=\"none\">diff</literal> command is blindly comparing two paths. But if you asked <command moreinfo=\"none\">svn merge</command> to compare the same two objects, it would notice that they're unrelated and first attempt to delete the old file, then add the new file; the output would indicate a deletion followed by an add:"
msgstr ""

#: ./build/en/book.xml:8113(screen) 
#, no-wrap
msgid "\nD  foo.c\nA  foo.c\n"
msgstr ""

#: ./build/en/book.xml:8118(para) 
msgid "Most merges involve comparing trees that are ancestrally related to one another, and therefore <command moreinfo=\"none\">svn merge</command> defaults to this behavior. Occasionally, however, you may want the <literal moreinfo=\"none\">merge</literal> command to compare two unrelated trees. For example, you may have imported two source-code trees representing different vendor releases of a software project (see <xref linkend=\"svn.advanced.vendorbr\"/>). If you asked <command moreinfo=\"none\">svn merge</command> to compare the two trees, you'd see the entire first tree being deleted, followed by an add of the entire second tree!"
msgstr ""

#: ./build/en/book.xml:8129(para) 
msgid "In these situations, you'll want <command moreinfo=\"none\">svn merge</command> to do a path-based comparison only, ignoring any relations between files and directories. Add the <option>--ignore-ancestry</option> option to your merge command, and it will behave just like <command moreinfo=\"none\">svn diff</command>. (And conversely, the <option>--notice-ancestry</option> option will cause <command moreinfo=\"none\">svn diff</command> to behave like the <literal moreinfo=\"none\">merge</literal> command.)"
msgstr ""

#: ./build/en/book.xml:8143(title) 
msgid "Merges and Moves"
msgstr ""

#: ./build/en/book.xml:8145(para) 
msgid "A common desire is to refactor source code, especially in Java-based software projects. Files and directories are shuffled around and renamed, often causing great disruption to everyone working on the project. Sounds like a perfect case to use a branch, doesn't it? Just create a branch, shuffle things around, then merge the branch back to the trunk, right?"
msgstr ""

#: ./build/en/book.xml:8153(para) 
msgid "Alas, this scenario doesn't work so well right now, and is considered one of Subversion's current weak spots. The problem is that Subversion's <command moreinfo=\"none\">update</command> command isn't as robust as it should be, particularly when dealing with copy and move operations."
msgstr ""

#: ./build/en/book.xml:8159(para) 
msgid "When you use <command moreinfo=\"none\">svn copy</command> to duplicate a file, the repository remembers where the new file came from, but it fails to transmit that information to the client which is running <command moreinfo=\"none\">svn update</command> or <command moreinfo=\"none\">svn merge</command>. Instead of telling the client, <quote>Copy that file you already have to this new location</quote>, it instead sends down an entirely new file. This can lead to problems, especially because the same thing happens with renamed files. A lesser-known fact about Subversion is that it lacks <quote>true renames</quote> — the <command moreinfo=\"none\">svn move</command> command is nothing more than an aggregation of <command moreinfo=\"none\">svn copy</command> and <command moreinfo=\"none\">svn delete</command>."
msgstr ""

#: ./build/en/book.xml:8173(para) 
msgid "For example, suppose that while working on your private branch, you rename <filename moreinfo=\"none\">integer.c</filename> to <filename moreinfo=\"none\">whole.c</filename>. Effectively you've created a new file in your branch that is a copy of the original file, and deleted the original file. Meanwhile, back on <filename moreinfo=\"none\">trunk</filename>, Sally has committed some improvements to <filename moreinfo=\"none\">integer.c</filename>. Now you decide to merge your branch to the trunk:"
msgstr ""

#: ./build/en/book.xml:8182(screen) 
#, no-wrap
msgid "\n$ cd calc/trunk\n\n$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch\nD   integer.c\nA   whole.c\n"
msgstr ""

#: ./build/en/book.xml:8190(para) 
msgid "This doesn't look so bad at first glance, but it's also probably not what you or Sally expected. The merge operation has deleted the latest version of <filename moreinfo=\"none\">integer.c</filename> file (the one containing Sally's latest changes), and blindly added your new <filename moreinfo=\"none\">whole.c</filename> file — which is a duplicate of the <emphasis>older</emphasis> version of <filename moreinfo=\"none\">integer.c</filename>. The net effect is that merging your <quote>rename</quote> to the branch has removed Sally's recent changes from the latest revision!"
msgstr ""

#: ./build/en/book.xml:8201(para) 
msgid "This isn't true data-loss; Sally's changes are still in the repository's history, but it may not be immediately obvious that this has happened. The moral of this story is that until Subversion improves, be very careful about merging copies and renames from one branch to another."
msgstr ""

#: ./build/en/book.xml:8219(title) 
msgid "Common Use-Cases"
msgstr ""

#: ./build/en/book.xml:8221(para) 
msgid "There are many different uses for branching and <command moreinfo=\"none\">svn merge</command>, and this section describes the most common ones you're likely to run into."
msgstr ""

#: ./build/en/book.xml:8227(title) 
msgid "Merging a Whole Branch to Another"
msgstr ""

#: ./build/en/book.xml:8229(para) 
msgid "To complete our running example, we'll move forward in time. Suppose several days have passed, and many changes have happened on both the trunk and your private branch. Suppose that you've finished working on your private branch; the feature or bug fix is finally complete, and now you want to merge all of your branch changes back into the trunk for others to enjoy."
msgstr ""

#: ./build/en/book.xml:8237(para) 
msgid "So how do we use <command moreinfo=\"none\">svn merge</command> in this scenario? Remember that this command compares two trees, and applies the differences to a working copy. So to receive the changes, you need to have a working copy of the trunk. We'll assume that either you still have your original one lying around (fully updated), or that you recently checked out a fresh working copy of <filename moreinfo=\"none\">/calc/trunk</filename>."
msgstr ""

#: ./build/en/book.xml:8245(para) 
msgid "But which two trees should be compared? At first glance, the answer may seem obvious: just compare the latest trunk tree with your latest branch tree. But beware—this assumption is <emphasis>wrong</emphasis>, and has burned many a new user! Since <command moreinfo=\"none\">svn merge</command> operates like <command moreinfo=\"none\">svn diff</command>, comparing the latest trunk and branch trees will <emphasis>not</emphasis> merely describe the set of changes you made to your branch. Such a comparison shows too many changes: it would not only show the addition of your branch changes, but also the <emphasis>removal</emphasis> of trunk changes that never happened on your branch."
msgstr ""

#: ./build/en/book.xml:8257(para) 
msgid "To express only the changes that happened on your branch, you need to compare the initial state of your branch to its final state. Using <command moreinfo=\"none\">svn log</command> on your branch, you can see that your branch was created in revision 341. And the final state of your branch is simply a matter of using the <literal moreinfo=\"none\">HEAD</literal> revision. That means you want to compare revisions 341 and <literal moreinfo=\"none\">HEAD</literal> of your branch directory, and apply those differences to a working copy of the trunk."
msgstr ""

#: ./build/en/book.xml:8268(para) 
msgid "A nice way of finding the revision in which a branch was created (the <quote>base</quote> of the branch) is to use the <option>--stop-on-copy</option> option to <command moreinfo=\"none\">svn log</command>. The log subcommand will normally show every change ever made to the branch, including tracing back through the copy which created the branch. So normally, you'll see history from the trunk as well. The <option>--stop-on-copy</option> will halt log output as soon as <command moreinfo=\"none\">svn log</command> detects that its target was copied or renamed."
msgstr ""

#: ./build/en/book.xml:8279(para) 
msgid "So in our continuing example,"
msgstr ""

#: ./build/en/book.xml:8281(screen) 
#, no-wrap
msgid "\n$ svn log -v --stop-on-copy \\\n          http://svn.example.com/repos/calc/branches/my-calc-branch\n…\n------------------------------------------------------------------------\nr341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines\nChanged paths:\n   A /calc/branches/my-calc-branch (from /calc/trunk:340)\n\n$\n"
msgstr ""

#: ./build/en/book.xml:8293(para) 
msgid "As expected, the final revision printed by this command is the revision in which <filename moreinfo=\"none\">my-calc-branch</filename> was created by copying."
msgstr ""

#: ./build/en/book.xml:8299(para) 
msgid "Here's the final merging procedure, then:"
msgstr ""

#: ./build/en/book.xml:8301(screen) 
#, no-wrap
msgid "\n$ cd calc/trunk\n$ svn update\nAt revision 405.\n\n$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch\nU   integer.c\nU   button.c\nU   Makefile\n\n$ svn status\nM   integer.c\nM   button.c\nM   Makefile\n\n# ...examine the diffs, compile, test, etc...\n\n$ svn commit -m \"Merged my-calc-branch changes r341:405 into the trunk.\"\nSending        integer.c\nSending        button.c\nSending        Makefile\nTransmitting file data ...\nCommitted revision 406.\n"
msgstr ""

#: ./build/en/book.xml:8326(para) 
msgid "Again, notice that the commit log message very specifically mentions the range of changes that was merged into the trunk. Always remember to do this, because it's critical information you'll need later on."
msgstr ""

#: ./build/en/book.xml:8331(para) 
msgid "For example, suppose you decide to keep working on your branch for another week, in order to complete an enhancement to your original feature or bug fix. The repository's <literal moreinfo=\"none\">HEAD</literal> revision is now 480, and you're ready to do another merge from your private branch to the trunk. But as discussed in <xref linkend=\"svn.branchmerge.copychanges.bestprac\"/>, you don't want to merge the changes you've already merged before; you only want to merge everything <quote>new</quote> on your branch since the last time you merged. The trick is to figure out what's new."
msgstr ""

#: ./build/en/book.xml:8342(para) 
msgid "The first step is to run <command moreinfo=\"none\">svn log</command> on the trunk, and look for a log message about the last time you merged from the branch:"
msgstr ""

#: ./build/en/book.xml:8346(screen) 
#, no-wrap
msgid "\n$ cd calc/trunk\n$ svn log\n…\n------------------------------------------------------------------------\nr406 | user | 2004-02-08 11:17:26 -0600 (Sun, 08 Feb 2004) | 1 line\n\nMerged my-calc-branch changes r341:405 into the trunk.\n------------------------------------------------------------------------\n…\n"
msgstr ""

#: ./build/en/book.xml:8358(para) 
msgid "Aha! Since all branch-changes that happened between revisions 341 and 405 were previously merged to the trunk as revision 406, you now know that you want to merge only the branch changes after that—by comparing revisions 406 and <literal moreinfo=\"none\">HEAD</literal>."
msgstr ""

#: ./build/en/book.xml:8364(screen) 
#, no-wrap
msgid "\n$ cd calc/trunk\n$ svn update\nAt revision 480.\n\n# We notice that HEAD is currently 480, so we use it to do the merge:\n\n$ svn merge -r 406:480 http://svn.example.com/repos/calc/branches/my-calc-branch\nU   integer.c\nU   button.c\nU   Makefile\n\n$ svn commit -m \"Merged my-calc-branch changes r406:480 into the trunk.\"\nSending        integer.c\nSending        button.c\nSending        Makefile\nTransmitting file data ...\nCommitted revision 481.\n"
msgstr ""

#: ./build/en/book.xml:8384(para) 
msgid "Now the trunk contains the complete second wave of changes made to the branch. At this point, you can either delete your branch (we'll discuss this later on), or continue working on your branch and repeat this procedure for subsequent merges."
msgstr ""

#: ./build/en/book.xml:8394(title) 
msgid "Undoing Changes"
msgstr ""

#: ./build/en/book.xml:8396(para) 
msgid "Another common use for <command moreinfo=\"none\">svn merge</command> is to roll back a change that has already been committed. Suppose you're working away happily on a working copy of <filename moreinfo=\"none\">/calc/trunk</filename>, and you discover that the change made way back in revision 303, which changed <filename moreinfo=\"none\">integer.c</filename>, is completely wrong. It never should have been committed. You can use <command moreinfo=\"none\">svn merge</command> to <quote>undo</quote> the change in your working copy, and then commit the local modification to the repository. All you need to do is to specify a <emphasis>reverse</emphasis> difference. (You can do this by specifying <option>--revision 303:302</option>, or by an equivalent <option>--change -303</option>.)"
msgstr ""

#: ./build/en/book.xml:8411(screen) 
#, no-wrap
msgid "\n$ svn merge -c -303 http://svn.example.com/repos/calc/trunk\nU  integer.c\n\n$ svn status\nM  integer.c\n\n$ svn diff\n…\n# verify that the change is removed\n…\n\n$ svn commit -m \"Undoing change committed in r303.\"\nSending        integer.c\nTransmitting file data .\nCommitted revision 350.\n"
msgstr ""

#: ./build/en/book.xml:8429(para) 
msgid "One way to think about a repository revision is as a specific group of changes (some version control systems call these <firstterm>changesets</firstterm>). By using the <option>-r</option> switch, you can ask <command moreinfo=\"none\">svn merge</command> to apply a changeset, or whole range of changesets, to your working copy. In our case of undoing a change, we're asking <command moreinfo=\"none\">svn merge</command> to apply changeset #303 to our working copy <emphasis>backwards</emphasis>."
msgstr ""

#: ./build/en/book.xml:8440(title) 
msgid "Subversion and Changesets"
msgstr ""

#: ./build/en/book.xml:8442(para) 
msgid "Everyone seems to have a slightly different definition of <quote>changeset</quote>, or at least a different expectation of what it means for a version control system to have <quote>changeset features</quote>. For our purpose, let's say that a changeset is just a collection of changes with a unique name. The changes might include textual edits to file contents, modifications to tree structure, or tweaks to metadata. In more common speak, a changeset is just a patch with a name you can refer to."
msgstr ""

#: ./build/en/book.xml:8452(para) 
msgid "In Subversion, a global revision number N names a tree in the repository: it's the way the repository looked after the Nth commit. It's also the name of an implicit changeset: if you compare tree N with tree N-1, you can derive the exact patch that was committed. For this reason, it's easy to think of <quote>revision N</quote> as not just a tree, but a changeset as well. If you use an issue tracker to manage bugs, you can use the revision numbers to refer to particular patches that fix bugs—for example, <quote>this issue was fixed by revision 9238.</quote>. Somebody can then run <command moreinfo=\"none\">svn log -r9238</command> to read about the exact changeset which fixed the bug, and run <command moreinfo=\"none\">svn diff -c 9238</command> to see the patch itself. And Subversion's <literal moreinfo=\"none\">merge</literal> command also uses revision numbers. You can merge specific changesets from one branch to another by naming them in the merge arguments: <command moreinfo=\"none\">svn merge -r9237:9238</command> would merge changeset #9238 into your working copy."
msgstr ""

#: ./build/en/book.xml:8472(para) 
msgid "Keep in mind that rolling back a change like this is just like any other <command moreinfo=\"none\">svn merge</command> operation, so you should use <command moreinfo=\"none\">svn status</command> and <command moreinfo=\"none\">svn diff</command> to confirm that your work is in the state you want it to be in, and then use <command moreinfo=\"none\">svn commit</command> to send the final version to the repository. After committing, this particular changeset is no longer reflected in the <literal moreinfo=\"none\">HEAD</literal> revision."
msgstr ""

#: ./build/en/book.xml:8481(para) 
msgid "Again, you may be thinking: well, that really didn't undo the commit, did it? The change still exists in revision 303. If somebody checks out a version of the <filename moreinfo=\"none\">calc</filename> project between revisions 303 and 349, they'll still see the bad change, right?"
msgstr ""

#: ./build/en/book.xml:8503(para) 
msgid "The Subversion project has plans, however, to someday implement a command that would accomplish the task of permanently deleting information. In the meantime, see <xref linkend=\"svn.reposadmin.maint.tk.svndumpfilter\"/> for a possible workaround."
msgstr ""

#: ./build/en/book.xml:8487(para) 
msgid "Yes, that's true. When we talk about <quote>removing</quote> a change, we're really talking about removing it from <literal moreinfo=\"none\">HEAD</literal>. The original change still exists in the repository's history. For most situations, this is good enough. Most people are only interested in tracking the <literal moreinfo=\"none\">HEAD</literal> of a project anyway. There are special cases, however, where you really might want to destroy all evidence of the commit. (Perhaps somebody accidentally committed a confidential document.) This isn't so easy, it turns out, because Subversion was deliberately designed to never lose information. Revisions are immutable trees which build upon one another. Removing a revision from history would cause a domino effect, creating chaos in all subsequent revisions and possibly invalidating all working copies. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:8515(title) 
msgid "Resurrecting Deleted Items"
msgstr ""

#: ./build/en/book.xml:8517(para) 
msgid "The great thing about version control systems is that information is never lost. Even when you delete a file or directory, it may be gone from the <literal moreinfo=\"none\">HEAD</literal> revision, but the object still exists in earlier revisions. One of the most common questions new users ask is, <quote>How do I get my old file or directory back?</quote>."
msgstr ""

#: ./build/en/book.xml:8524(para) 
msgid "The first step is to define exactly <emphasis role=\"bold\">which</emphasis> item you're trying to resurrect. Here's a useful metaphor: you can think of every object in the repository as existing in a sort of two-dimensional coordinate system. The first coordinate is a particular revision tree, and the second coordinate is a path within that tree. So every version of your file or directory can be defined by a specific coordinate pair. (Remember the familiar <quote>peg revision</quote> syntax — foo.c@224 — mentioned back in <xref linkend=\"svn.advanced.pegrevs\"/>.)"
msgstr ""

#: ./build/en/book.xml:8536(para) 
msgid "First, you might need to use <command moreinfo=\"none\">svn log</command> to discover the exact coordinate pair you wish to resurrect. A good strategy is to run <command moreinfo=\"none\">svn log --verbose</command> in a directory which used to contain your deleted item. The <option>--verbose (-v)</option> option shows a list of all changed items in each revision; all you need to do is find the revision in which you deleted the file or directory. You can do this visually, or by using another tool to examine the log output (via <command moreinfo=\"none\">grep</command>, or perhaps via an incremental search in an editor)."
msgstr ""

#: ./build/en/book.xml:8547(screen) 
#, no-wrap
msgid "\n$ cd parent-dir\n$ svn log -v\n…\n------------------------------------------------------------------------\nr808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines\nChanged paths:\n   D /calc/trunk/real.c\n   M /calc/trunk/integer.c\n\nAdded fast fourier transform functions to integer.c.\nRemoved real.c because code now in double.c.\n…\n"
msgstr ""

#: ./build/en/book.xml:8562(para) 
msgid "In the example, we're assuming that you're looking for a deleted file <filename moreinfo=\"none\">real.c</filename>. By looking through the logs of a parent directory, you've spotted that this file was deleted in revision 808. Therefore, the last version of the file to exist was in the revision right before that. Conclusion: you want to resurrect the path <filename moreinfo=\"none\">/calc/trunk/real.c</filename> from revision 807."
msgstr ""

#: ./build/en/book.xml:8571(para) 
msgid "That was the hard part—the research. Now that you know what you want to restore, you have two different choices."
msgstr ""

#: ./build/en/book.xml:8575(para) 
msgid "One option is to use <command moreinfo=\"none\">svn merge</command> to apply revision 808 <quote>in reverse</quote>. (We've already discussed how to undo changes, see <xref linkend=\"svn.branchmerge.commonuses.undo\"/>.) This would have the effect of re-adding <filename moreinfo=\"none\">real.c</filename> as a local modification. The file would be scheduled for addition, and after a commit, the file would again exist in <literal moreinfo=\"none\">HEAD</literal>."
msgstr ""

#: ./build/en/book.xml:8584(para) 
msgid "In this particular example, however, this is probably not the best strategy. Reverse-applying revision 808 would not only schedule <filename moreinfo=\"none\">real.c</filename> for addition, but the log message indicates that it would also undo certain changes to <filename moreinfo=\"none\">integer.c</filename>, which you don't want. Certainly, you could reverse-merge revision 808 and then <command moreinfo=\"none\">svn revert</command> the local modifications to <filename moreinfo=\"none\">integer.c</filename>, but this technique doesn't scale well. What if there were 90 files changed in revision 808?"
msgstr ""

#: ./build/en/book.xml:8595(para) 
msgid "A second, more targeted strategy is not to use <command moreinfo=\"none\">svn merge</command> at all, but rather the <command moreinfo=\"none\">svn copy</command> command. Simply copy the exact revision and path <quote>coordinate pair</quote> from the repository to your working copy:"
msgstr ""

#: ./build/en/book.xml:8601(screen) 
#, no-wrap
msgid "\n$ svn copy -r 807 \\\n           http://svn.example.com/repos/calc/trunk/real.c ./real.c\n\n$ svn status\nA  +   real.c\n\n$ svn commit -m \"Resurrected real.c from revision 807, /calc/trunk/real.c.\"\nAdding         real.c\nTransmitting file data .\nCommitted revision 1390.\n"
msgstr ""

#: ./build/en/book.xml:8614(para) 
msgid "The plus sign in the status output indicates that the item isn't merely scheduled for addition, but scheduled for addition <quote>with history</quote>. Subversion remembers where it was copied from. In the future, running <command moreinfo=\"none\">svn log</command> on this file will traverse back through the file's resurrection and through all the history it had prior to revision 807. In other words, this new <filename moreinfo=\"none\">real.c</filename> isn't really new; it's a direct descendant of the original, deleted file."
msgstr ""

#: ./build/en/book.xml:8624(para) 
msgid "Although our example shows us resurrecting a file, note that these same techniques work just as well for resurrecting deleted directories."
msgstr ""

#: ./build/en/book.xml:8632(title) 
msgid "Common Branching Patterns"
msgstr ""

#: ./build/en/book.xml:8634(para) 
msgid "Version control is most often used for software development, so here's a quick peek at two of the most common branching/merging patterns used by teams of programmers. If you're not using Subversion for software development, feel free to skip this section. If you're a software developer using version control for the first time, pay close attention, as these patterns are often considered best practices by experienced folk. These processes aren't specific to Subversion; they're applicable to any version control system. Still, it may help to see them described in Subversion terms."
msgstr ""

#: ./build/en/book.xml:8648(title) 
msgid "Release Branches"
msgstr ""

#: ./build/en/book.xml:8650(para) 
msgid "Most software has a typical lifecycle: code, test, release, repeat. There are two problems with this process. First, developers need to keep writing new features while quality-assurance teams take time to test supposedly-stable versions of the software. New work cannot halt while the software is tested. Second, the team almost always needs to support older, released versions of software; if a bug is discovered in the latest code, it most likely exists in released versions as well, and customers will want to get that bugfix without having to wait for a major new release."
msgstr ""

#: ./build/en/book.xml:8662(para) 
msgid "Here's where version control can help. The typical procedure looks like this:"
msgstr ""

#: ./build/en/book.xml:8668(para) 
msgid "<emphasis>Developers commit all new work to the trunk.</emphasis> Day-to-day changes are committed to <filename moreinfo=\"none\">/trunk</filename>: new features, bugfixes, and so on."
msgstr ""

#: ./build/en/book.xml:8677(para) 
msgid "<emphasis>The trunk is copied to a <quote>release</quote> branch.</emphasis> When the team thinks the software is ready for release (say, a 1.0 release), then <filename moreinfo=\"none\">/trunk</filename> might be copied to <filename moreinfo=\"none\">/branches/1.0</filename>."
msgstr ""

#: ./build/en/book.xml:8687(para) 
msgid "<emphasis>Teams continue to work in parallel.</emphasis> One team begins rigorous testing of the release branch, while another team continues new work (say, for version 2.0) on <filename moreinfo=\"none\">/trunk</filename>. If bugs are discovered in either location, fixes are ported back and forth as necessary. At some point, however, even that process stops. The branch is <quote>frozen</quote> for final testing right before a release."
msgstr ""

#: ./build/en/book.xml:8699(para) 
msgid "<emphasis>The branch is tagged and released.</emphasis> When testing is complete, <filename moreinfo=\"none\">/branches/1.0</filename> is copied to <filename moreinfo=\"none\">/tags/1.0.0</filename> as a reference snapshot. The tag is packaged and released to customers."
msgstr ""

#: ./build/en/book.xml:8709(para) 
msgid "<emphasis>The branch is maintained over time.</emphasis> While work continues on <filename moreinfo=\"none\">/trunk</filename> for version 2.0, bugfixes continue to be ported from <filename moreinfo=\"none\">/trunk</filename> to <filename moreinfo=\"none\">/branches/1.0</filename>. When enough bugfixes have accumulated, management may decide to do a 1.0.1 release: <filename moreinfo=\"none\">/branches/1.0</filename> is copied to <filename moreinfo=\"none\">/tags/1.0.1</filename>, and the tag is packaged and released."
msgstr ""

#: ./build/en/book.xml:8723(para) 
msgid "This entire process repeats as the software matures: when the 2.0 work is complete, a new 2.0 release branch is created, tested, tagged, and eventually released. After some years, the repository ends up with a number of release branches in <quote>maintenance</quote> mode, and a number of tags representing final shipped versions."
msgstr ""

#: ./build/en/book.xml:8734(title) 
msgid "Feature Branches"
msgstr ""

#: ./build/en/book.xml:8736(para) 
msgid "A <firstterm>feature branch</firstterm> is the sort of branch that's been the dominant example in this chapter, the one you've been working on while Sally continues to work on <filename moreinfo=\"none\">/trunk</filename>. It's a temporary branch created to work on a complex change without interfering with the stability of <filename moreinfo=\"none\">/trunk</filename>. Unlike release branches (which may need to be supported forever), feature branches are born, used for a while, merged back to the trunk, then ultimately deleted. They have a finite span of usefulness."
msgstr ""

#: ./build/en/book.xml:8747(para) 
msgid "Again, project policies vary widely concerning exactly when it's appropriate to create a feature branch. Some projects never use feature branches at all: commits to <filename moreinfo=\"none\">/trunk</filename> are a free-for-all. The advantage to this system is that it's simple—nobody needs to learn about branching or merging. The disadvantage is that the trunk code is often unstable or unusable. Other projects use branches to an extreme: no change is <emphasis>ever</emphasis> committed to the trunk directly. Even the most trivial changes are created on a short-lived branch, carefully reviewed and merged to the trunk. Then the branch is deleted. This system guarantees an exceptionally stable and usable trunk at all times, but at the cost of tremendous process overhead."
msgstr ""

#: ./build/en/book.xml:8762(para) 
msgid "Most projects take a middle-of-the-road approach. They commonly insist that <filename moreinfo=\"none\">/trunk</filename> compile and pass regression tests at all times. A feature branch is only required when a change requires a large number of destabilizing commits. A good rule of thumb is to ask this question: if the developer worked for days in isolation and then committed the large change all at once (so that <filename moreinfo=\"none\">/trunk</filename> were never destabilized), would it be too large a change to review? If the answer to that question is <quote>yes</quote>, then the change should be developed on a feature branch. As the developer commits incremental changes to the branch, they can be easily reviewed by peers."
msgstr ""

#: ./build/en/book.xml:8776(para) 
msgid "Finally, there's the issue of how to best keep a feature branch in <quote>sync</quote> with the trunk as work progresses. As we mentioned earlier, there's a great risk to working on a branch for weeks or months; trunk changes may continue to pour in, to the point where the two lines of development differ so greatly that it may become a nightmare trying to merge the branch back to the trunk."
msgstr ""

#: ./build/en/book.xml:8784(para) 
msgid "This situation is best avoided by regularly merging trunk changes to the branch. Make up a policy: once a week, merge the last week's worth of trunk changes to the branch. Take care when doing this; the merging needs to be hand-tracked to avoid the problem of repeated merges (as described in <xref linkend=\"svn.branchmerge.copychanges.bestprac.track\"/>). You'll need to write careful log messages detailing exactly which revision ranges have been merged already (as demonstrated in <xref linkend=\"svn.branchmerge.commonuses.wholebr\"/>). It may sound intimidating, but it's actually pretty easy to do."
msgstr ""

#: ./build/en/book.xml:8798(para) 
msgid "At some point, you'll be ready to merge the <quote>synchronized</quote> feature branch back to the trunk. To do this, begin by doing a final merge of the latest trunk changes to the branch. When that's done, the latest versions of branch and trunk will be absolutely identical except for your branch changes. So in this special case, you would merge by comparing the branch with the trunk:"
msgstr ""

#: ./build/en/book.xml:8807(screen) 
#, no-wrap
msgid "\n$ cd trunk-working-copy\n\n$ svn update\nAt revision 1910.\n\n$ svn merge http://svn.example.com/repos/calc/trunk@1910 \\\n            http://svn.example.com/repos/calc/branches/mybranch@1910\nU  real.c\nU  integer.c\nA  newdirectory\nA  newdirectory/newfile\n…\n"
msgstr ""

#: ./build/en/book.xml:8822(para) 
msgid "By comparing the <literal moreinfo=\"none\">HEAD</literal> revision of the trunk with the <literal moreinfo=\"none\">HEAD</literal> revision of the branch, you're defining a delta that describes only the changes you made to the branch; both lines of development already have all of the trunk changes."
msgstr ""

#: ./build/en/book.xml:8828(para) 
msgid "Another way of thinking about this pattern is that your weekly sync of trunk to branch is analogous to running <command moreinfo=\"none\">svn update</command> in a working copy, while the final merge step is analogous to running <command moreinfo=\"none\">svn commit</command> from a working copy. After all, what else <emphasis>is</emphasis> a working copy but a very shallow private branch? It's a branch that's only capable of storing one change at a time."
msgstr ""

#: ./build/en/book.xml:8847(title) 
msgid "Traversing Branches"
msgstr ""

#: ./build/en/book.xml:8849(para) 
msgid "The <command moreinfo=\"none\">svn switch</command> command transforms an existing working copy to reflect a different branch. While this command isn't strictly necessary for working with branches, it provides a nice shortcut to users. In our earlier example, after creating your private branch, you checked out a fresh working copy of the new repository directory. Instead, you can simply ask Subversion to change your working copy of <filename moreinfo=\"none\">/calc/trunk</filename> to mirror the new branch location:"
msgstr ""

#: ./build/en/book.xml:8859(screen) 
#, no-wrap
msgid "\n$ cd calc\n\n$ svn info | grep URL\nURL: http://svn.example.com/repos/calc/trunk\n\n$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch\nU   integer.c\nU   button.c\nU   Makefile\nUpdated to revision 341.\n\n$ svn info | grep URL\nURL: http://svn.example.com/repos/calc/branches/my-calc-branch\n"
msgstr ""

#: ./build/en/book.xml:8875(para) 
msgid "After <quote>switching</quote> to the branch, your working copy is no different than what you would get from doing a fresh checkout of the directory. And it's usually more efficient to use this command, because often branches only differ by a small degree. The server sends only the minimal set of changes necessary to make your working copy reflect the branch directory."
msgstr ""

#: ./build/en/book.xml:8883(para) 
msgid "The <command moreinfo=\"none\">svn switch</command> command also takes a <option>--revision</option> (<option>-r</option>) option, so you need not always move your working copy to the <quote>tip</quote> of the branch."
msgstr ""

#: ./build/en/book.xml:8888(para) 
msgid "Of course, most projects are more complicated than our <filename moreinfo=\"none\">calc</filename> example, containing multiple subdirectories. Subversion users often follow a specific algorithm when using branches:"
msgstr ""

#: ./build/en/book.xml:8895(para) 
msgid "Copy the project's entire <quote>trunk</quote> to a new branch directory."
msgstr ""

#: ./build/en/book.xml:8899(para) 
msgid "Switch only <emphasis>part</emphasis> of the trunk working copy to mirror the branch."
msgstr ""

#: ./build/en/book.xml:8904(para) 
msgid "In other words, if a user knows that the branch-work only needs to happen on a specific subdirectory, they use <command moreinfo=\"none\">svn switch</command> to move only that subdirectory to the branch. (Or sometimes users will switch just a single working file to the branch!) That way, they can continue to receive normal <quote>trunk</quote> updates to most of their working copy, but the switched portions will remain immune (unless someone commits a change to their branch). This feature adds a whole new dimension to the concept of a <quote>mixed working copy</quote>—not only can working copies contain a mixture of working revisions, but a mixture of repository locations as well."
msgstr ""

#: ./build/en/book.xml:8917(para) 
msgid "If your working copy contains a number of switched subtrees from different repository locations, it continues to function as normal. When you update, you'll receive patches to each subtree as appropriate. When you commit, your local changes will still be applied as a single, atomic change to the repository."
msgstr ""

#: ./build/en/book.xml:8930(para) 
msgid "You <emphasis>can</emphasis>, however, use <command moreinfo=\"none\">svn switch</command> with the <option>--relocate</option> switch if the URL of your server changes and you don't want to abandon an existing working copy. See <xref linkend=\"svn.ref.svn.c.switch\"/> for more information and an example."
msgstr ""

#: ./build/en/book.xml:8923(para) 
msgid "Note that while it's okay for your working copy to reflect a mixture of repository locations, these locations must all be within the <emphasis>same</emphasis> repository. Subversion repositories aren't yet able to communicate with one another; that's a feature planned for the future. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:8938(title) 
msgid "Switches and Updates"
msgstr ""

#: ./build/en/book.xml:8940(para) 
msgid "Have you noticed that the output of <command moreinfo=\"none\">svn switch</command> and <command moreinfo=\"none\">svn update</command> look the same? The <literal moreinfo=\"none\">switch</literal> command is actually a superset of the update command."
msgstr ""

#: ./build/en/book.xml:8945(para) 
msgid "When you run <command moreinfo=\"none\">svn update</command>, you're asking the repository to compare two trees. The repository does so, and then sends a description of the differences back to the client. The only difference between <command moreinfo=\"none\">svn switch</command> and <command moreinfo=\"none\">svn update</command> is that the <literal moreinfo=\"none\">update</literal> command always compares two identical paths."
msgstr ""

#: ./build/en/book.xml:8953(para) 
msgid "That is, if your working copy is a mirror of <filename moreinfo=\"none\">/calc/trunk</filename>, then <command moreinfo=\"none\">svn update</command> will automatically compare your working copy of <filename moreinfo=\"none\">/calc/trunk</filename> to <filename moreinfo=\"none\">/calc/trunk</filename> in the <literal moreinfo=\"none\">HEAD</literal> revision. If you're switching your working copy to a branch, then <command moreinfo=\"none\">svn switch</command> will compare your working copy of <filename moreinfo=\"none\">/calc/trunk</filename> to some <emphasis>other</emphasis> branch-directory in the <literal moreinfo=\"none\">HEAD</literal> revision."
msgstr ""

#: ./build/en/book.xml:8965(para) 
msgid "In other words, an update moves your working copy through time. A switch moves your working copy through time <emphasis>and</emphasis> space."
msgstr ""

#: ./build/en/book.xml:8970(para) 
msgid "Because <command moreinfo=\"none\">svn switch</command> is essentially a variant of <command moreinfo=\"none\">svn update</command>, it shares the same behaviors; any local modifications in your working copy are preserved when new data arrives from the repository. This allows you to perform all sorts of clever tricks."
msgstr ""

#: ./build/en/book.xml:8976(para) 
msgid "For example, suppose you have a working copy of <filename moreinfo=\"none\">/calc/trunk</filename> and make a number of changes to it. Then you suddenly realize that you meant to make the changes to a branch instead. No problem! When you <command moreinfo=\"none\">svn switch</command> your working copy to the branch, the local changes will remain. You can then test and commit them to the branch."
msgstr ""

#: ./build/en/book.xml:8991(title) 
msgid "Tags"
msgstr ""

#: ./build/en/book.xml:8993(para) 
msgid "Another common version control concept is a <firstterm>tag</firstterm>. A tag is just a <quote>snapshot</quote> of a project in time. In Subversion, this idea already seems to be everywhere. Each repository revision is exactly that—a snapshot of the filesystem after each commit."
msgstr ""

#: ./build/en/book.xml:9000(para) 
msgid "However, people often want to give more human-friendly names to tags, like <literal moreinfo=\"none\">release-1.0</literal>. And they want to make snapshots of smaller subdirectories of the filesystem. After all, it's not so easy to remember that release-1.0 of a piece of software is a particular subdirectory of revision 4822."
msgstr ""

#: ./build/en/book.xml:9009(title) 
msgid "Creating a Simple Tag"
msgstr ""

#: ./build/en/book.xml:9011(para) 
msgid "Once again, <command moreinfo=\"none\">svn copy</command> comes to the rescue. If you want to create a snapshot of <filename moreinfo=\"none\">/calc/trunk</filename> exactly as it looks in the <literal moreinfo=\"none\">HEAD</literal> revision, then make a copy of it:"
msgstr ""

#: ./build/en/book.xml:9016(screen) 
#, no-wrap
msgid "\n$ svn copy http://svn.example.com/repos/calc/trunk \\\n           http://svn.example.com/repos/calc/tags/release-1.0 \\\n      -m \"Tagging the 1.0 release of the 'calc' project.\"\n\nCommitted revision 351.\n"
msgstr ""

#: ./build/en/book.xml:9024(para) 
msgid "This example assumes that a <filename moreinfo=\"none\">/calc/tags</filename> directory already exists. (If it doesn't, you can create it using <command moreinfo=\"none\">svn mkdir</command>.) After the copy completes, the new <filename moreinfo=\"none\">release-1.0</filename> directory is forever a snapshot of how the project looked in the <literal moreinfo=\"none\">HEAD</literal> revision at the time you made the copy. Of course you might want to be more precise about exactly which revision you copy, in case somebody else may have committed changes to the project when you weren't looking. So if you know that revision 350 of <filename moreinfo=\"none\">/calc/trunk</filename> is exactly the snapshot you want, you can specify it by passing <option>-r 350</option> to the <command moreinfo=\"none\">svn copy</command> command."
msgstr ""

#: ./build/en/book.xml:9039(para) 
msgid "But wait a moment: isn't this tag-creation procedure the same procedure we used to create a branch? Yes, in fact, it is. In Subversion, there's no difference between a tag and a branch. Both are just ordinary directories that are created by copying. Just as with branches, the only reason a copied directory is a <quote>tag</quote> is because <emphasis>humans</emphasis> have decided to treat it that way: as long as nobody ever commits to the directory, it forever remains a snapshot. If people start committing to it, it becomes a branch."
msgstr ""

#: ./build/en/book.xml:9050(para) 
msgid "If you are administering a repository, there are two approaches you can take to managing tags. The first approach is <quote>hands off</quote>: as a matter of project policy, decide where your tags will live, and make sure all users know how to treat the directories they copy in there. (That is, make sure they know not to commit to them.) The second approach is more paranoid: you can use one of the access-control scripts provided with Subversion to prevent anyone from doing anything but creating new copies in the tags-area (See <xref linkend=\"svn.serverconfig\"/>.) The paranoid approach, however, isn't usually necessary. If a user accidentally commits a change to a tag-directory, you can simply undo the change as discussed in the previous section. This is version control, after all."
msgstr ""

#: ./build/en/book.xml:9069(title) 
msgid "Creating a Complex Tag"
msgstr ""

#: ./build/en/book.xml:9071(para) 
msgid "Sometimes you may want your <quote>snapshot</quote> to be more complicated than a single directory at a single revision."
msgstr ""

#: ./build/en/book.xml:9075(para) 
msgid "For example, pretend your project is much larger than our <filename moreinfo=\"none\">calc</filename> example: suppose it contains a number of subdirectories and many more files. In the course of your work, you may decide that you need to create a working copy that is designed to have specific features and bug fixes. You can accomplish this by selectively backdating files or directories to particular revisions (using <command moreinfo=\"none\">svn update -r</command> liberally), or by switching files and directories to particular branches (making use of <command moreinfo=\"none\">svn switch</command>). When you're done, your working copy is a hodgepodge of repository locations from different revisions. But after testing, you know it's the precise combination of data you need."
msgstr ""

#: ./build/en/book.xml:9089(para) 
msgid "Time to make a snapshot. Copying one URL to another won't work here. In this case, you want to make a snapshot of your exact working copy arrangement and store it in the repository. Luckily, <command moreinfo=\"none\">svn copy</command> actually has four different uses (which you can read about in <xref linkend=\"svn.ref\"/>), including the ability to copy a working-copy tree to the repository:"
msgstr ""

#: ./build/en/book.xml:9096(screen) 
#, no-wrap
msgid "\n$ ls\nmy-working-copy/\n\n$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag\n\nCommitted revision 352.\n"
msgstr ""

#: ./build/en/book.xml:9105(para) 
msgid "Now there is a new directory in the repository, <filename moreinfo=\"none\">/calc/tags/mytag</filename>, which is an exact snapshot of your working copy—mixed revisions, URLs, and all."
msgstr ""

#: ./build/en/book.xml:9110(para) 
msgid "Other users have found interesting uses for this feature. Sometimes there are situations where you have a bunch of local changes made to your working copy, and you'd like a collaborator to see them. Instead of running <command moreinfo=\"none\">svn diff</command> and sending a patch file (which won't capture tree changes, symlink changes or changes in properties), you can instead use <command moreinfo=\"none\">svn copy</command> to <quote>upload</quote> your working copy to a private area of the repository. Your collaborator can then either checkout a verbatim copy of your working copy, or use <command moreinfo=\"none\">svn merge</command> to receive your exact changes."
msgstr ""

#: ./build/en/book.xml:9130(title) 
msgid "Branch Maintenance"
msgstr ""

#: ./build/en/book.xml:9132(para) 
msgid "You may have noticed by now that Subversion is extremely flexible. Because it implements branches and tags with the same underlying mechanism (directory copies), and because branches and tags appear in normal filesystem space, many people find Subversion intimidating. It's almost <emphasis>too</emphasis> flexible. In this section, we'll offer some suggestions for arranging and managing your data over time."
msgstr ""

#: ./build/en/book.xml:9142(title) 
msgid "Repository Layout"
msgstr ""

#: ./build/en/book.xml:9144(para) 
msgid "There are some standard, recommended ways to organize a repository. Most people create a <filename moreinfo=\"none\">trunk</filename> directory to hold the <quote>main line</quote> of development, a <filename moreinfo=\"none\">branches</filename> directory to contain branch copies, and a <filename moreinfo=\"none\">tags</filename> directory to contain tag copies. If a repository holds only one project, then often people create these top-level directories:"
msgstr ""

#: ./build/en/book.xml:9152(screen) 
#, no-wrap
msgid "\n/trunk\n/branches\n/tags\n"
msgstr ""

#: ./build/en/book.xml:9158(para) 
msgid "If a repository contains multiple projects, admins typically index their layout by project (see <xref linkend=\"svn.reposadmin.projects.chooselayout\"/> to read more about <quote>project roots</quote>):"
msgstr ""

#: ./build/en/book.xml:9162(screen) 
#, no-wrap
msgid "\n/paint/trunk\n/paint/branches\n/paint/tags\n/calc/trunk\n/calc/branches\n/calc/tags\n"
msgstr ""

#: ./build/en/book.xml:9171(para) 
msgid "Of course, you're free to ignore these common layouts. You can create any sort of variation, whatever works best for you or your team. Remember that whatever you choose, it's not a permanent commitment. You can reorganize your repository at any time. Because branches and tags are ordinary directories, the <command moreinfo=\"none\">svn move</command> command can move or rename them however you wish. Switching from one layout to another is just a matter of issuing a series of server-side moves; if you don't like the way things are organized in the repository, just juggle the directories around."
msgstr ""

#: ./build/en/book.xml:9182(para) 
msgid "Remember, though, that while moving directories may be easy to do, you need to be considerate of your users as well. Your juggling can be disorienting to users with existing working copies. If a user has a working copy of a particular repository directory, your <command moreinfo=\"none\">svn move</command> operation might remove the path from the latest revision. When the user next runs <command moreinfo=\"none\">svn update</command>, she will be told that her working copy represents a path that no longer exists, and the user will be forced to <command moreinfo=\"none\">svn switch</command> to the new location."
msgstr ""

#: ./build/en/book.xml:9198(title) 
msgid "Data Lifetimes"
msgstr ""

#: ./build/en/book.xml:9200(para) 
msgid "Another nice feature of Subversion's model is that branches and tags can have finite lifetimes, just like any other versioned item. For example, suppose you eventually finish all your work on your personal branch of the <filename moreinfo=\"none\">calc</filename> project. After merging all of your changes back into <filename moreinfo=\"none\">/calc/trunk</filename>, there's no need for your private branch directory to stick around anymore:"
msgstr ""

#: ./build/en/book.xml:9209(screen) 
#, no-wrap
msgid "\n$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \\\n             -m \"Removing obsolete branch of calc project.\"\n\nCommitted revision 375.\n"
msgstr ""

#: ./build/en/book.xml:9216(para) 
msgid "And now your branch is gone. Of course it's not really gone: the directory is simply missing from the <literal moreinfo=\"none\">HEAD</literal> revision, no longer distracting anyone. If you use <command moreinfo=\"none\">svn checkout</command>, <command moreinfo=\"none\">svn switch</command>, or <command moreinfo=\"none\">svn list</command> to examine an earlier revision, you'll still be able to see your old branch."
msgstr ""

#: ./build/en/book.xml:9224(para) 
msgid "If browsing your deleted directory isn't enough, you can always bring it back. Resurrecting data is very easy in Subversion. If there's a deleted directory (or file) that you'd like to bring back into <literal moreinfo=\"none\">HEAD</literal>, simply use <command moreinfo=\"none\">svn copy -r</command> to copy it from the old revision:"
msgstr ""

#: ./build/en/book.xml:9231(screen) 
#, no-wrap
msgid "\n$ svn copy -r 374 http://svn.example.com/repos/calc/branches/my-calc-branch \\\n                  http://svn.example.com/repos/calc/branches/my-calc-branch\n\nCommitted revision 376.\n"
msgstr ""

#: ./build/en/book.xml:9238(para) 
msgid "In our example, your personal branch had a relatively short lifetime: you may have created it to fix a bug or implement a new feature. When your task is done, so is the branch. In software development, though, it's also common to have two <quote>main</quote> branches running side-by-side for very long periods. For example, suppose it's time to release a stable version of the <filename moreinfo=\"none\">calc</filename> project to the public, and you know it's going to take a couple of months to shake bugs out of the software. You don't want people to add new features to the project, but you don't want to tell all developers to stop programming either. So instead, you create a <quote>stable</quote> branch of the software that won't change much:"
msgstr ""

#: ./build/en/book.xml:9252(screen) 
#, no-wrap
msgid "\n$ svn copy http://svn.example.com/repos/calc/trunk \\\n         http://svn.example.com/repos/calc/branches/stable-1.0 \\\n         -m \"Creating stable branch of calc project.\"\n\nCommitted revision 377.\n"
msgstr ""

#: ./build/en/book.xml:9260(para) 
msgid "And now developers are free to continue adding cutting-edge (or experimental) features to <filename moreinfo=\"none\">/calc/trunk</filename>, and you can declare a project policy that only bug fixes are to be committed to <filename moreinfo=\"none\">/calc/branches/stable-1.0</filename>. That is, as people continue to work on the trunk, a human selectively ports bug fixes over to the stable branch. Even after the stable branch has shipped, you'll probably continue to maintain the branch for a long time—that is, as long as you continue to support that release for customers."
msgstr ""

#: ./build/en/book.xml:9280(title) 
msgid "Vendor branches"
msgstr ""

#: ./build/en/book.xml:9282(para) 
msgid "As is especially the case when developing software, the data that you maintain under version control is often closely related to, or perhaps dependent upon, someone else's data. Generally, the needs of your project will dictate that you stay as up-to-date as possible with the data provided by that external entity without sacrificing the stability of your own project. This scenario plays itself out all the time—anywhere that the information generated by one group of people has a direct effect on that which is generated by another group."
msgstr ""

#: ./build/en/book.xml:9292(para) 
msgid "For example, software developers might be working on an application which makes use of a third-party library. Subversion has just such a relationship with the Apache Portable Runtime library (see <xref linkend=\"svn.developer.usingapi.apr\"/>). The Subversion source code depends on the APR library for all its portability needs. In earlier stages of Subversion's development, the project closely tracked APR's changing API, always sticking to the <quote>bleeding edge</quote> of the library's code churn. Now that both APR and Subversion have matured, Subversion attempts to synchronize with APR's library API only at well-tested, stable release points."
msgstr ""

#: ./build/en/book.xml:9304(para) 
msgid "Now, if your project depends on someone else's information, there are several ways that you could attempt to synchronize that information with your own. Most painfully, you could issue oral or written instructions to all the contributors of your project, telling them to make sure that they have the specific versions of that third-party information that your project needs. If the third-party information is maintained in a Subversion repository, you could also use Subversion's externals definitions to effectively <quote>pin down</quote> specific versions of that information to some location in your own working copy directory (see <xref linkend=\"svn.advanced.externals\"/>)."
msgstr ""

#: ./build/en/book.xml:9316(para) 
msgid "But sometimes you want to maintain custom modifications to third-party data in your own version control system. Returning to the software development example, programmers might need to make modifications to that third-party library for their own purposes. These modifications might include new functionality or bug fixes, maintained internally only until they become part of an official release of the third-party library. Or the changes might never be relayed back to the library maintainers, existing solely as custom tweaks to make the library further suit the needs of the software developers."
msgstr ""

#: ./build/en/book.xml:9327(para) 
msgid "Now you face an interesting situation. Your project could house its custom modifications to the third-party data in some disjointed fashion, such as using patch files or full-fledged alternate versions of files and directories. But these quickly become maintenance headaches, requiring some mechanism by which to apply your custom changes to the third-party data, and necessitating regeneration of those changes with each successive version of the third-party data that you track."
msgstr ""

#: ./build/en/book.xml:9336(para) 
msgid "The solution to this problem is to use <firstterm>vendor branches</firstterm>. A vendor branch is a directory tree in your own version control system that contains information provided by a third-party entity, or vendor. Each version of the vendor's data that you decide to absorb into your project is called a <firstterm>vendor drop</firstterm>."
msgstr ""

#: ./build/en/book.xml:9343(para) 
msgid "Vendor branches provide two key benefits. First, by storing the currently supported vendor drop in your own version control system, the members of your project never need to question whether they have the right version of the vendor's data. They simply receive that correct version as part of their regular working copy updates. Secondly, because the data lives in your own Subversion repository, you can store your custom changes to it in-place—you have no more need of an automated (or worse, manual) method for swapping in your customizations."
msgstr ""

#: ./build/en/book.xml:9355(title) 
msgid "General Vendor Branch Management Procedure"
msgstr ""

#: ./build/en/book.xml:9357(para) 
msgid "Managing vendor branches generally works like this. You create a top-level directory (such as <filename moreinfo=\"none\">/vendor</filename>) to hold the vendor branches. Then you import the third party code into a subdirectory of that top-level directory. You then copy that subdirectory into your main development branch (for example, <filename moreinfo=\"none\">/trunk</filename>) at the appropriate location. You always make your local changes in the main development branch. With each new release of the code you are tracking you bring it into the vendor branch and merge the changes into <filename moreinfo=\"none\">/trunk</filename>, resolving whatever conflicts occur between your local changes and the upstream changes."
msgstr ""

#: ./build/en/book.xml:9371(para) 
msgid "Perhaps an example will help to clarify this algorithm. We'll use a scenario where your development team is creating a calculator program that links against a third-party complex number arithmetic library, libcomplex. We'll begin with the initial creation of the vendor branch, and the import of the first vendor drop. We'll call our vendor branch directory <filename moreinfo=\"none\">libcomplex</filename>, and our code drops will go into a subdirectory of our vendor branch called <filename moreinfo=\"none\">current</filename>. And since <command moreinfo=\"none\">svn import</command> creates all the intermediate parent directories it needs, we can actually accomplish both of these steps with a single command."
msgstr ""

#: ./build/en/book.xml:9384(screen) 
#, no-wrap
msgid "\n$ svn import /path/to/libcomplex-1.0 \\\n             http://svn.example.com/repos/vendor/libcomplex/current \\\n             -m 'importing initial 1.0 vendor drop'\n…\n"
msgstr ""

#: ./build/en/book.xml:9391(para) 
msgid "We now have the current version of the libcomplex source code in <filename moreinfo=\"none\">/vendor/libcomplex/current</filename>. Now, we tag that version (see <xref linkend=\"svn.branchmerge.tags\"/>) and then copy it into the main development branch. Our copy will create a new directory called <filename moreinfo=\"none\">libcomplex</filename> in our existing <filename moreinfo=\"none\">calc</filename> project directory. It is in this copied version of the vendor data that we will make our customizations."
msgstr ""

#: ./build/en/book.xml:9401(screen) 
#, no-wrap
msgid "\n$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \\\n           http://svn.example.com/repos/vendor/libcomplex/1.0      \\\n           -m 'tagging libcomplex-1.0'\n…\n$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \\\n           http://svn.example.com/repos/calc/libcomplex        \\\n           -m 'bringing libcomplex-1.0 into the main branch'\n…\n"
msgstr ""

#: ./build/en/book.xml:9418(para) 
msgid "And entirely bug-free, of course!"
msgstr ""

#: ./build/en/book.xml:9412(para) 
msgid "We check out our project's main branch—which now includes a copy of the first vendor drop—and we get to work customizing the libcomplex code. Before we know it, our modified version of libcomplex is now completely integrated into our calculator program. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:9422(para) 
msgid "A few weeks later, the developers of libcomplex release a new version of their library—version 1.1—which contains some features and functionality that we really want. We'd like to upgrade to this new version, but without losing the customizations we made to the existing version. What we essentially would like to do is to replace our current baseline version of libcomplex 1.0 with a copy of libcomplex 1.1, and then re-apply the custom modifications we previously made to that library to the new version. But we actually approach the problem from the other direction, applying the changes made to libcomplex between versions 1.0 and 1.1 to our modified copy of it."
msgstr ""

#: ./build/en/book.xml:9435(para) 
msgid "To perform this upgrade, we checkout a copy of our vendor branch, and replace the code in the <filename moreinfo=\"none\">current</filename> directory with the new libcomplex 1.1 source code. We quite literally copy new files on top of existing files, perhaps exploding the libcomplex 1.1 release tarball atop our existing files and directories. The goal here is to make our <filename moreinfo=\"none\">current</filename> directory contain only the libcomplex 1.1 code, and to ensure that all that code is under version control. Oh, and we want to do this with as little version control history disturbance as possible."
msgstr ""

#: ./build/en/book.xml:9447(para) 
msgid "After replacing the 1.0 code with 1.1 code, <command moreinfo=\"none\">svn status</command> will show files with local modifications as well as, perhaps, some unversioned or missing files. If we did what we were supposed to do, the unversioned files are only those new files introduced in the 1.1 release of libcomplex—we run <command moreinfo=\"none\">svn add</command> on those to get them under version control. The missing files are files that were in 1.0 but not in 1.1, and on those paths we run <command moreinfo=\"none\">svn delete</command>. Finally, once our <filename moreinfo=\"none\">current</filename> working copy contains only the libcomplex 1.1 code, we commit the changes we made to get it looking that way."
msgstr ""

#: ./build/en/book.xml:9460(para) 
msgid "Our <filename moreinfo=\"none\">current</filename> branch now contains the new vendor drop. We tag the new version (in the same way we previously tagged the version 1.0 vendor drop), and then merge the differences between the tag of the previous version and the new current version into our main development branch."
msgstr ""

#: ./build/en/book.xml:9467(screen) 
#, no-wrap
msgid "\n$ cd working-copies/calc\n$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \\\n            http://svn.example.com/repos/vendor/libcomplex/current  \\\n            libcomplex\n… # resolve all the conflicts between their changes and our changes\n$ svn commit -m 'merging libcomplex-1.1 into the main branch'\n…\n"
msgstr ""

#: ./build/en/book.xml:9477(para) 
msgid "In the trivial use case, the new version of our third-party tool would look, from a files-and-directories point of view, just like the previous version. None of the libcomplex source files would have been deleted, renamed or moved to different locations—the new version would contain only textual modifications against the previous one. In a perfect world, our modifications would apply cleanly to the new version of the library, with absolutely no complications or conflicts."
msgstr ""

#: ./build/en/book.xml:9487(para) 
msgid "But things aren't always that simple, and in fact it is quite common for source files to get moved around between releases of software. This complicates the process of ensuring that our modifications are still valid for the new version of code, and can quickly degrade into a situation where we have to manually recreate our customizations in the new version. Once Subversion knows about the history of a given source file—including all its previous locations—the process of merging in the new version of the library is pretty simple. But we are responsible for telling Subversion how the source file layout changed from vendor drop to vendor drop."
msgstr ""

#: ./build/en/book.xml:9509(command) 
msgid "svn_load_dirs.pl"
msgstr ""

#: ./build/en/book.xml:9511(para) 
msgid "Vendor drops that contain more than a few deletes, additions and moves complicate the process of upgrading to each successive version of the third-party data. So Subversion supplies the <command moreinfo=\"none\">svn_load_dirs.pl</command> script to assist with this process. This script automates the importing steps we mentioned in the general vendor branch management procedure to make sure that mistakes are minimized. You will still be responsible for using the merge commands to merge the new versions of the third-party data into your main development branch, but <command moreinfo=\"none\">svn_load_dirs.pl</command> can help you more quickly and easily arrive at that stage."
msgstr ""

#: ./build/en/book.xml:9524(para) 
msgid "In short, <command moreinfo=\"none\">svn_load_dirs.pl</command> is an enhancement to <command moreinfo=\"none\">svn import</command> that has several important characteristics:"
msgstr ""

#: ./build/en/book.xml:9530(para) 
msgid "It can be run at any point in time to bring an existing directory in the repository to exactly match an external directory, performing all the necessary adds and deletes, and optionally performing moves, too."
msgstr ""

#: ./build/en/book.xml:9536(para) 
msgid "It takes care of complicated series of operations between which Subversion requires an intermediate commit—such as before renaming a file or directory twice."
msgstr ""

#: ./build/en/book.xml:9541(para) 
msgid "It will optionally tag the newly imported directory."
msgstr ""

#: ./build/en/book.xml:9544(para) 
msgid "It will optionally add arbitrary properties to files and directories that match a regular expression."
msgstr ""

#: ./build/en/book.xml:9549(para) 
msgid "<command moreinfo=\"none\">svn_load_dirs.pl</command> takes three mandatory arguments. The first argument is the URL to the base Subversion directory to work in. This argument is followed by the URL—relative to the first argument—into which the current vendor drop will be imported. Finally, the third argument is the local directory to import. Using our previous example, a typical run of <command moreinfo=\"none\">svn_load_dirs.pl</command> might look like:"
msgstr ""

#: ./build/en/book.xml:9558(screen) 
#, no-wrap
msgid "\n$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \\\n                   current                                        \\\n                   /path/to/libcomplex-1.1\n…\n"
msgstr ""

#: ./build/en/book.xml:9565(para) 
msgid "You can indicate that you'd like <command moreinfo=\"none\">svn_load_dirs.pl</command> to tag the new vendor drop by passing the <option>-t</option> command-line option and specifying a tag name. This tag is another URL relative to the first program argument."
msgstr ""

#: ./build/en/book.xml:9571(screen) 
#, no-wrap
msgid "\n$ svn_load_dirs.pl -t libcomplex-1.1                              \\\n                   http://svn.example.com/repos/vendor/libcomplex \\\n                   current                                        \\\n                   /path/to/libcomplex-1.1\n…\n"
msgstr ""

#: ./build/en/book.xml:9579(para) 
msgid "When you run <command moreinfo=\"none\">svn_load_dirs.pl</command>, it examines the contents of your existing <quote>current</quote> vendor drop, and compares them with the proposed new vendor drop. In the trivial case, there will be no files that are in one version and not the other, and the script will perform the new import without incident. If, however, there are discrepancies in the file layouts between versions, <command moreinfo=\"none\">svn_load_dirs.pl</command> will prompt you for how you would like to resolve those differences. For example, you will have the opportunity to tell the script that you know that the file <filename moreinfo=\"none\">math.c</filename> in version 1.0 of libcomplex was renamed to <filename moreinfo=\"none\">arithmetic.c</filename> in libcomplex 1.1. Any discrepancies not explained by moves are treated as regular additions and deletions."
msgstr ""

#: ./build/en/book.xml:9594(para) 
msgid "The script also accepts a separate configuration file for setting properties on files and directories matching a regular expression that are <emphasis>added</emphasis> to the repository. This configuration file is specified to <command moreinfo=\"none\">svn_load_dirs.pl</command> using the <option>-p</option> command-line option. Each line of the configuration file is a whitespace-delimited set of two or four values: a Perl-style regular expression to match the added path against, a control keyword (either <literal moreinfo=\"none\">break</literal> or <literal moreinfo=\"none\">cont</literal>), and then optionally a property name and value."
msgstr ""

#: ./build/en/book.xml:9606(screen) 
#, no-wrap
msgid "\n\\.png$              break   svn:mime-type   image/png\n\\.jpe?g$            break   svn:mime-type   image/jpeg\n\\.m3u$              cont    svn:mime-type   audio/x-mpegurl\n\\.m3u$              break   svn:eol-style   LF\n.*                  break   svn:eol-style   native\n"
msgstr ""

#: ./build/en/book.xml:9614(para) 
msgid "For each added path, the configured property changes whose regular expression matches the path are applied in order, unless the control specification is <literal moreinfo=\"none\">break</literal> (which means that no more property changes should be applied to that path). If the control specification is <literal moreinfo=\"none\">cont</literal>—an abbreviation for <literal moreinfo=\"none\">continue</literal>—then matching will continue with the next line of the configuration file."
msgstr ""

#: ./build/en/book.xml:9623(para) 
msgid "Any whitespace in the regular expression, property name, or property value must be surrounded by either single or double quote characters. You can escape quote characters that are not used for wrapping whitespace by preceding them with a backslash (<literal moreinfo=\"none\">\\</literal>) character. The backslash escapes only quotes when parsing the configuration file, so do not protect any other characters beyond what is necessary for the regular expression."
msgstr ""

#: ./build/en/book.xml:9641(para) 
msgid "We've covered a lot of ground in this chapter. We've discussed the concepts of tags and branches, and demonstrated how Subversion implements these concepts by copying directories with the <command moreinfo=\"none\">svn copy</command> command. We've shown how to use <command moreinfo=\"none\">svn merge</command> to copy changes from one branch to another, or roll back bad changes. We've gone over the use of <command moreinfo=\"none\">svn switch</command> to create mixed-location working copies. And we've talked about how one might manage the organization and lifetimes of branches in a repository."
msgstr ""

#: ./build/en/book.xml:9652(para) 
msgid "Remember the Subversion mantra: branches and tags are cheap. So use them liberally! At the same time, don't forget to use good merging habits. Cheap copies are only useful when you're careful about tracking your merging actions."
msgstr ""

#: ./build/en/book.xml:9670(title) 
msgid "Repository Administration"
msgstr ""

#: ./build/en/book.xml:9672(para) 
msgid "The Subversion repository is the central storehouse of all your versioned data. As such, it becomes an obvious candidate for all the love and attention an administrator can offer. While the repository is generally a low-maintenance item, it is important to understand how to properly configure and care for it so that potential problems are avoided, and actual problems are safely resolved."
msgstr ""

#: ./build/en/book.xml:9680(para) 
msgid "In this chapter, we'll discuss how to create and configure a Subversion repository. We'll also talk about repository maintenance, providing examples of how and when to use the <command moreinfo=\"none\">svnlook</command> and <command moreinfo=\"none\">svnadmin</command> tools provided with Subversion. We'll address some common questions and mistakes, and give some suggestions on how to arrange the data in the repository."
msgstr ""

#: ./build/en/book.xml:9694(para) 
msgid "This may sound really prestigious and lofty, but we're just talking about anyone who is interested in that mysterious realm beyond the working copy where everyone's data hangs out."
msgstr ""

#: ./build/en/book.xml:9688(para) 
msgid "If you plan to access a Subversion repository only in the role of a user whose data is under version control (that is, via a Subversion client), you can skip this chapter altogether. However, if you are, or wish to become, a Subversion repository administrator, <placeholder-1/> this chapter is for you."
msgstr ""

#: ./build/en/book.xml:9706(title) 
msgid "The Subversion Repository, Defined"
msgstr ""

#: ./build/en/book.xml:9708(para) 
msgid "Before jumping into the broader topic of repository administration, let's further define what a repository is. How does it look? How does it feel? Does it take its tea hot or iced, sweetened, and with lemon? As an administrator, you'll be expected to understand the composition of a repository both from a literal, OS-level perspective—how a repository looks and acts with respect to non-Subversion tools—and from a logical perspective—dealing with how data is represented <emphasis>inside</emphasis> the repository."
msgstr ""

#: ./build/en/book.xml:9718(para) 
msgid "Seen through the eyes of a typical file browser application (such as the Windows Explorer) or command-line based filesystem navigation tools, the Subversion repository is just another directory full of stuff. There are some subdirectories with human-readable configuration files in them, some subdirectories with some not-so-human-readable data files, and so on. As in other areas of the Subversion design, modularity is given high regard, and hierarchical organization is preferred to cluttered chaos. So a shallow glance into a typical repository from a nuts-and-bolts perspective is sufficient to reveal the basic components of the repository:"
msgstr ""

#: ./build/en/book.xml:9730(screen) 
#, no-wrap
msgid "\n$ ls repos\nconf/  dav/  db/  format  hooks/  locks/  README.txt\n"
msgstr ""

#: ./build/en/book.xml:9735(para) 
msgid "Here's a quick fly-by overview of what exactly you're seeing in this directory listing. (Don't get bogged down in the terminology—detailed coverage of these components exists elsewhere in this and other chapters.)"
msgstr ""

#: ./build/en/book.xml:9742(term) 
msgid "conf"
msgstr ""

#: ./build/en/book.xml:9744(para) 
msgid "A directory containing repository configuration files."
msgstr ""

#: ./build/en/book.xml:9748(term) 
msgid "dav"
msgstr ""

#: ./build/en/book.xml:9750(para) 
msgid "A directory provided to mod_dav_svn for its private housekeeping data."
msgstr ""

#: ./build/en/book.xml:9755(term) 
msgid "db"
msgstr ""

#: ./build/en/book.xml:9757(para) 
msgid "The data store for all of your versioned data."
msgstr ""

#: ./build/en/book.xml:9761(term) 
msgid "format"
msgstr ""

#: ./build/en/book.xml:9763(para) 
msgid "A file whose contents are a single integer value that dictates the version number of the repository layout."
msgstr ""

#: ./build/en/book.xml:9768(term) ./build/en/book.xml:24506(secondary) ./build/en/book.xml:24558(secondary) ./build/en/book.xml:24613(secondary) ./build/en/book.xml:24665(secondary) ./build/en/book.xml:24733(secondary) ./build/en/book.xml:24803(secondary) ./build/en/book.xml:24860(secondary) ./build/en/book.xml:24914(secondary) ./build/en/book.xml:24973(secondary) 
msgid "hooks"
msgstr ""

#: ./build/en/book.xml:9770(para) 
msgid "A directory full of hook script templates (and hook scripts themselves, once you've installed some)."
msgstr ""

#: ./build/en/book.xml:9775(term) 
msgid "locks"
msgstr ""

#: ./build/en/book.xml:9777(para) 
msgid "A directory for Subversion's repository lock files, used for tracking accessors to the repository."
msgstr ""

#: ./build/en/book.xml:9782(term) 
msgid "README.txt"
msgstr ""

#: ./build/en/book.xml:9784(para) 
msgid "A file whose contents merely inform its readers that they are looking at a Subversion repository."
msgstr ""

#: ./build/en/book.xml:9790(para) 
msgid "Of course, when accessed via the Subversion libraries, this otherwise unremarkable collection of files and directories suddenly becomes an implementation of a virtual, versioned filesystem, complete with customizable event triggers. This filesystem has its own notions of directories and files, very similar to the notions of such things held by real filesystems (such as NTFS, FAT32, ext3, and so on). But this is a special filesystem—it hangs these directories and files from revisions, keeping all the changes you've ever made to them safely stored and forever accessible. This is where the entirety of your versioned data lives."
msgstr ""

#: ./build/en/book.xml:9808(title) 
msgid "Strategies for Repository Deployment"
msgstr ""

#: ./build/en/book.xml:9810(para) 
msgid "Due largely to the simplicity of the overall design of the Subversion repository and the technologies on which it relies, creating and configuring a repository are fairly straightforward tasks. There are a few preliminary decisions you'll want to make, but the actual work involved in any given setup of a Subversion repository is pretty straightforward, tending towards mindless repetition if you find yourself setting up multiples of these things."
msgstr ""

#: ./build/en/book.xml:9819(para) 
msgid "Some of things you'll want to consider up front, though, are as follows:"
msgstr ""

#: ./build/en/book.xml:9824(para) 
msgid "What data do you expect to live in your repository (or repositories), and how will that data be organized?"
msgstr ""

#: ./build/en/book.xml:9828(para) 
msgid "Where will your repository live, and how will it be accessed?"
msgstr ""

#: ./build/en/book.xml:9832(para) 
msgid "What types of access control and repository event reporting do you need?"
msgstr ""

#: ./build/en/book.xml:9836(para) 
msgid "Which of the available types of data store do you want to use?"
msgstr ""

#: ./build/en/book.xml:9841(para) 
msgid "In this section, we'll try to help you answer those questions."
msgstr ""

#: ./build/en/book.xml:9846(title) 
msgid "Planning Your Repository Organization"
msgstr ""

#: ./build/en/book.xml:9848(para) 
msgid "While Subversion allows you to move around versioned files and directories without any loss of information, and even provides ways of moving whole sets of versioned history from one repository to another, doing so can greatly disrupt the workflow of those who access the repository often and come to expect things to be at certain locations. So before creating a new repository, try to peer into the future a bit; plan ahead before placing your data under version control. By conscientiously <quote>laying out</quote> your repository or repositories and their versioned contents ahead of time, you can prevent many future headaches."
msgstr ""

#: ./build/en/book.xml:9860(para) 
msgid "Let's assume that as repository administrator, you will be responsible for supporting the version control system for several projects. Your first decision is whether to use a single repository for multiple projects, or to give each project its own repository, or some compromise of these two."
msgstr ""

#: ./build/en/book.xml:9867(para) 
msgid "There are benefits to using a single repository for multiple projects, most obviously the lack of duplicated maintenance. A single repository means that there is one set of hook programs, one thing to routinely backup, one thing to dump and load if Subversion releases an incompatible new version, and so on. Also, you can move data between projects easily, and without losing any historical versioning information."
msgstr ""

#: ./build/en/book.xml:9893(para) 
msgid "Whether founded in ignorance or in poorly considered concepts about how to derive legitimate software development metrics, global revision numbers are a silly thing to fear, and <emphasis>not</emphasis> the kind of thing you should weigh when deciding how to arrange your projects and repositories."
msgstr ""

#: ./build/en/book.xml:9876(para) 
msgid "The downside of using a single repository is that different projects may have different requirements in terms of the repository event triggers, such as needing to send commit notification emails to different mailing lists, or having different definitions about what does and does not constitute a legitimate commit. These aren't insurmountable problems, of course—it just means that all of your hook scripts have to be sensitive to the layout of your repository rather than assuming that the whole repository is associated with a single group of people. Also, remember that Subversion uses repository-global revision numbers. While those numbers don't have any particular magical powers, some folks still don't like the fact that even though no changes have been made to their project lately, the youngest revision number for the repository keeps climbing because other projects are actively adding new revisions. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:9902(para) 
msgid "A middle-ground approach can be taken, too. For example, projects can be grouped by how well they relate to each other. You might have a few repositories with a handful of projects in each repository. That way, projects that are likely to want to share data can do so easily, and as new revisions are added to the repository, at least the developers know that those new revisions are at least remotely related to everyone who uses that repository."
msgstr ""

#: ./build/en/book.xml:9929(para) 
msgid "The <filename moreinfo=\"none\">trunk</filename>, <filename moreinfo=\"none\">tags</filename>, and <filename moreinfo=\"none\">branches</filename> trio are sometimes referred to as <quote>the TTB directories</quote>."
msgstr ""

#: ./build/en/book.xml:9911(para) 
msgid "After deciding how to organize your projects with respect to repositories, you'll probably want to think about directory hierarchies within the repositories themselves. Because Subversion uses regular directory copies for branching and tagging (see <xref linkend=\"svn.branchmerge\"/>), the Subversion community recommends that you choose a repository location for each <firstterm>project root</firstterm>—the <quote>top-most</quote> directory which contains data related to that project—and then create three subdirectories beneath that root: <filename moreinfo=\"none\">trunk</filename>, meaning the directory under which the main project development occurs; <filename moreinfo=\"none\">branches</filename>, which is a directory in which to create various named branches of the main development line; <filename moreinfo=\"none\">tags</filename>, which is a collection of tree snapshots that are created, and perhaps destroyed, but never changed. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:9935(para) 
msgid "For example, your repository might look like:"
msgstr ""

#: ./build/en/book.xml:9937(screen) 
#, no-wrap
msgid "\n/\n   calc/\n      trunk/\n      tags/\n      branches/\n   calendar/\n      trunk/\n      tags/\n      branches/\n   spreadsheet/\n      trunk/\n      tags/\n      branches/\n   …\n"
msgstr ""

#: ./build/en/book.xml:9954(para) 
msgid "Note that it doesn't matter where in your repository each project root is. If you have only one project per repository, the logical place to put each project root is at the root of that project's respective repository. If you have multiple projects, you might want to arrange them in groups inside the repository, perhaps putting projects with similar goals or shared code in the same subdirectory, or maybe just grouping them alphabetically. Such an arrangement might look like:"
msgstr ""

#: ./build/en/book.xml:9964(screen) 
#, no-wrap
msgid "\n/\n   utils/\n      calc/\n         trunk/\n         tags/\n         branches/\n      calendar/\n         trunk/\n         tags/\n         branches/\n      …\n   office/\n      spreadsheet/\n         trunk/\n         tags/\n         branches/\n      …\n"
msgstr ""

#: ./build/en/book.xml:9984(para) 
msgid "Lay out your repository in whatever way you see fit. Subversion does not expect or enforce a layout schema—in its eyes, a directory is a directory is a directory. Ultimately, you should choose the repository arrangement that meets the needs of the people who work on the projects that live there."
msgstr ""

#: ./build/en/book.xml:9991(para) 
msgid "In the name of full disclosure, though, we'll mention another very common layout. In this layout, the <filename moreinfo=\"none\">trunk</filename>, <filename moreinfo=\"none\">tags</filename>, and <filename moreinfo=\"none\">branches</filename> directories live in the root directory of your repository, and your projects are in subdirectories beneath those, like:"
msgstr ""

#: ./build/en/book.xml:9998(screen) 
#, no-wrap
msgid "\n/\n   trunk/\n      calc/\n      calendar/\n      spreadsheet/\n      …\n   tags/\n      calc/\n      calendar/\n      spreadsheet/\n      …\n   branches/\n      calc/\n      calendar/\n      spreadsheet/\n      …\n"
msgstr ""

#: ./build/en/book.xml:10017(para) 
msgid "There's nothing particularly incorrect about such a layout, but it may or may not seem as intuitive for your users. Especially in large, multi-project situations with many users, those users may tend to be familiar with only one or two of the projects in the repository. But the projects-as-branch-siblings tends to de-emphasize project individuality and focus on the entire set of projects as a single entity. That's a social issue though. We like our originally suggested arrangement for purely practical reasons—it's easier to ask about (or modify, or migrate elsewhere) the entire history of a single project when there's a single repository path that holds the entire history—past, present, tagged, and branched—for that project and that project alone."
msgstr ""

#: ./build/en/book.xml:10036(title) 
msgid "Deciding Where and How to Host Your Repository"
msgstr ""

#: ./build/en/book.xml:10038(para) 
msgid "Before creating your Subversion repository, an obvious question you'll need to answer is where the thing is going to live. This is strongly connected to a myriad of other questions involving how the repository will be accessed (via a Subversion server or directly), by whom (users behind your corporate firewall or the whole world out on the open Internet), what other services you'll be providing around Subversion (repository browsing interfaces, e-mail based commit notification, etc.), your data backup strategy, and so on."
msgstr ""

#: ./build/en/book.xml:10049(para) 
msgid "We cover server choice and configuration in <xref linkend=\"svn.serverconfig\"/>, but the point we'd like to briefly make here is simply that the answers to some of these other questions might have implications that force your hand when deciding where your repository will live. For example, certain deployment scenarios might require accessing the repository via a remote filesystem from multiple computers, in which case (as you'll read in the next section) your choice of a repository back-end data store turns out not to be a choice at all because only one of the available back-ends will work in this scenario."
msgstr ""

#: ./build/en/book.xml:10060(para) 
msgid "To try to address each and every possible way to deploy Subversion is both not possible and outside the scope of this book. We simply encourage you to evaluate your options using these pages and other sources as your reference material, and plan ahead."
msgstr ""

#: ./build/en/book.xml:10070(title) 
msgid "Choosing a Data Store"
msgstr ""

#: ./build/en/book.xml:10084(para) 
msgid "Often pronounced <quote>fuzz-fuzz</quote>, if Jack Repenning has anything to say about it. (This book, however, assumes that the reader is thinking <quote>eff-ess-eff-ess</quote>.)"
msgstr ""

#: ./build/en/book.xml:10072(para) 
msgid "As of version 1.1, Subversion provides two options for the type of underlying data store—often referred to as <quote>the back-end</quote> or, somewhat confusingly, <quote>the (versioned) filesystem</quote>—that each repository uses. One type of data store keeps everything in a Berkeley DB (or BDB) database environment; repositories that use this type are often referred to as being <quote>BDB-backed</quote>. The other type stores data in ordinary flat files, using a custom format. Subversion developers have adopted the habit of referring to this latter data storage mechanism as <firstterm>FSFS</firstterm><placeholder-1/> —a versioned filesystem implementation that uses the native OS filesystem to store data."
msgstr ""

#: ./build/en/book.xml:10092(para) 
msgid "<xref linkend=\"svn.reposadmin.basics.backends.tbl-1\"/> gives a comparative overview of Berkeley DB and FSFS repositories."
msgstr ""

#: ./build/en/book.xml:10097(title) 
msgid "Repository Data Store Comparison"
msgstr ""

#: ./build/en/book.xml:10101(entry) 
msgid "Category"
msgstr ""

#: ./build/en/book.xml:10102(entry) ./build/en/book.xml:12670(entry) 
msgid "Feature"
msgstr ""

#: ./build/en/book.xml:10103(entry) ./build/en/book.xml:10207(title) 
msgid "Berkeley DB"
msgstr ""

#: ./build/en/book.xml:10104(entry) ./build/en/book.xml:10335(title) 
msgid "FSFS"
msgstr ""

#: ./build/en/book.xml:10109(entry) 
msgid "Reliability"
msgstr ""

#: ./build/en/book.xml:10110(entry) 
msgid "Data integrity"
msgstr ""

#: ./build/en/book.xml:10111(entry) 
msgid "when properly deployed, extremely reliable; Berkeley DB 4.4 brings auto-recovery"
msgstr ""

#: ./build/en/book.xml:10113(entry) 
msgid "older versions had some rarely demonstrated, but data-destroying bugs"
msgstr ""

#: ./build/en/book.xml:10117(entry) 
msgid "Sensitivity to interruptions"
msgstr ""

#: ./build/en/book.xml:10119(quote) 
msgid "wedged"
msgstr ""

#: ./build/en/book.xml:10118(entry) 
msgid "very; crashes and permission problems can leave the database <placeholder-1/>, requiring journaled recovery procedures"
msgstr ""

#: ./build/en/book.xml:10121(entry) 
msgid "quite insensitive"
msgstr ""

#: ./build/en/book.xml:10124(entry) 
msgid "Accessibility"
msgstr ""

#: ./build/en/book.xml:10125(entry) 
msgid "Usable from a read-only mount"
msgstr ""

#: ./build/en/book.xml:10126(entry) ./build/en/book.xml:10131(entry) 
msgid "no"
msgstr ""

#: ./build/en/book.xml:10127(entry) ./build/en/book.xml:10132(entry) ./build/en/book.xml:10137(entry) 
msgid "yes"
msgstr ""

#: ./build/en/book.xml:10130(entry) 
msgid "Platform-independent storage"
msgstr ""

#: ./build/en/book.xml:10135(entry) 
msgid "Usable over network filesystems"
msgstr ""

#: ./build/en/book.xml:10136(entry) 
msgid "generally, no"
msgstr ""

#: ./build/en/book.xml:10140(entry) 
msgid "Group permissions handling"
msgstr ""

#: ./build/en/book.xml:10141(entry) 
msgid "sensitive to user umask problems; best if accessed by only one user"
msgstr ""

#: ./build/en/book.xml:10143(entry) 
msgid "works around umask problems"
msgstr ""

#: ./build/en/book.xml:10146(entry) 
msgid "Scalability"
msgstr ""

#: ./build/en/book.xml:10147(entry) 
msgid "Repository disk usage"
msgstr ""

#: ./build/en/book.xml:10148(entry) 
msgid "larger (especially if logfiles aren't purged)"
msgstr ""

#: ./build/en/book.xml:10149(entry) 
msgid "smaller"
msgstr ""

#: ./build/en/book.xml:10152(entry) 
msgid "Number of revision trees"
msgstr ""

#: ./build/en/book.xml:10153(entry) 
msgid "database; no problems"
msgstr ""

#: ./build/en/book.xml:10154(entry) 
msgid "some older native filesystems don't scale well with thousands of entries in a single directory"
msgstr ""

#: ./build/en/book.xml:10158(entry) 
msgid "Directories with many files"
msgstr ""

#: ./build/en/book.xml:10159(entry) 
msgid "slower"
msgstr ""

#: ./build/en/book.xml:10160(entry) 
msgid "faster"
msgstr ""

#: ./build/en/book.xml:10163(entry) 
msgid "Performance"
msgstr ""

#: ./build/en/book.xml:10164(entry) 
msgid "Checking out latest revision"
msgstr ""

#: ./build/en/book.xml:10165(entry) ./build/en/book.xml:10166(entry) 
msgid "no meaningful difference"
msgstr ""

#: ./build/en/book.xml:10169(entry) 
msgid "Large commits"
msgstr ""

#: ./build/en/book.xml:10170(entry) 
msgid "slower overall, but cost is amortized across the lifetime of the commit"
msgstr ""

#: ./build/en/book.xml:10172(entry) 
msgid "faster overall, but finalization delay may cause client timeouts"
msgstr ""

#: ./build/en/book.xml:10179(para) 
msgid "There are advantages and disadvantages to each of these two back-end types. Neither of them is more <quote>official</quote> than the other, though the newer FSFS is the default data store as of Subversion 1.2. Both are reliable enough to trust with your versioned data. But as you can see in <xref linkend=\"svn.reposadmin.basics.backends.tbl-1\"/>, the FSFS backend provides quite a bit more flexibility in terms of its supported deployment scenarios. More flexibility means you have to work a little harder to find ways to deploy it incorrectly. Those reasons—plus the fact that not using Berkeley DB means there's one fewer component in the system—largely explain why today almost everyone uses the FSFS backend when creating new repositories."
msgstr ""

#: ./build/en/book.xml:10193(para) 
msgid "Fortunately, most programs which access Subversion repositories are blissfully ignorant of which back-end data store is in use. And you aren't even necessarily stuck with your first choice of a data store—in the event that you change your mind later, Subversion provides ways of migrating your repository's data into another repository that uses a different back-end data store. We talk more about that later in this chapter."
msgstr ""

#: ./build/en/book.xml:10202(para) 
msgid "The following subsections provide a more detailed look at the available data store types."
msgstr ""

#: ./build/en/book.xml:10209(para) 
msgid "When the initial design phase of Subversion was in progress, the developers decided to use Berkeley DB for a variety of reasons, including its open-source license, transaction support, reliability, performance, API simplicity, thread-safety, support for cursors, and so on."
msgstr ""

#: ./build/en/book.xml:10216(para) 
msgid "Berkeley DB provides real transaction support—perhaps its most powerful feature. Multiple processes accessing your Subversion repositories don't have to worry about accidentally clobbering each other's data. The isolation provided by the transaction system is such that for any given operation, the Subversion repository code sees a static view of the database—not a database that is constantly changing at the hand of some other process—and can make decisions based on that view. If the decision made happens to conflict with what another process is doing, the entire operation is rolled back as if it never happened, and Subversion gracefully retries the operation against a new, updated (and yet still static) view of the database."
msgstr ""

#: ./build/en/book.xml:10231(para) 
msgid "Another great feature of Berkeley DB is <firstterm>hot backups</firstterm>—the ability to backup the database environment without taking it <quote>offline</quote>. We'll discuss how to backup your repository in <xref linkend=\"svn.reposadmin.maint.backup\"/>, but the benefits of being able to make fully functional copies of your repositories without any downtime should be obvious."
msgstr ""

#: ./build/en/book.xml:10238(para) 
msgid "Berkeley DB is also a very reliable database system when properly used. Subversion uses Berkeley DB's logging facilities, which means that the database first writes to on-disk log files a description of any modifications it is about to make, and then makes the modification itself. This is to ensure that if anything goes wrong, the database system can back up to a previous <firstterm>checkpoint</firstterm>—a location in the log files known not to be corrupt—and replay transactions until the data is restored to a usable state. See <xref linkend=\"svn.reposadmin.maint.diskspace\"/> for more about Berkeley DB log files."
msgstr ""

#: ./build/en/book.xml:10251(para) 
msgid "But every rose has its thorn, and so we must note some known limitations of Berkeley DB. First, Berkeley DB environments are not portable. You cannot simply copy a Subversion repository that was created on a Unix system onto a Windows system and expect it to work. While much of the Berkeley DB database format is architecture independent, there are other aspects of the environment that are not. Secondly, Subversion uses Berkeley DB in a way that will not operate on Windows 95/98 systems—if you need to house a BDB-backed repository on a Windows machine, stick with Windows 2000 or newer."
msgstr ""

#: ./build/en/book.xml:10266(para) 
msgid "Berkeley DB requires that the underlying filesystem implement strict POSIX locking semantics, and more importantly, the ability to map files directly into process memory."
msgstr ""

#: ./build/en/book.xml:10263(para) 
msgid "While Berkeley DB promises to behave correctly on network shares that meet a particular set of specifications, <placeholder-1/> most networked filesystem types and appliances do <emphasis>not</emphasis> actually meet those requirements. And in no case can you allow a BDB-backed repository that resides on a network share to be accessed by multiple clients of that share at once (which quite often is the whole point of having the repository live on a network share in the first place)."
msgstr ""

#: ./build/en/book.xml:10280(para) 
msgid "If you attempt to use Berkeley DB on a non-compliant remote filesystem, the results are unpredictable—you may see mysterious errors right away, or it may be months before you discover that your repository database is subtly corrupted. You should strongly consider using the FSFS data store for repositories that need to live on a network share."
msgstr ""

#: ./build/en/book.xml:10289(para) 
msgid "Finally, because Berkeley DB is a library linked directly into Subversion, it's more sensitive to interruptions than a typical relational database system. Most SQL systems, for example, have a dedicated server process that mediates all access to tables. If a program accessing the database crashes for some reason, the database daemon notices the lost connection and cleans up any mess left behind. And because the database daemon is the only process accessing the tables, applications don't need to worry about permission conflicts. These things are not the case with Berkeley DB, however. Subversion (and programs using Subversion libraries) access the database tables directly, which means that a program crash can leave the database in a temporarily inconsistent, inaccessible state. When this happens, an administrator needs to ask Berkeley DB to restore to a checkpoint, which is a bit of an annoyance. Other things can cause a repository to <quote>wedge</quote> besides crashed processes, such as programs conflicting over ownership and permissions on the database files."
msgstr ""

#: ./build/en/book.xml:10310(para) 
msgid "Berkeley DB 4.4 brings (to Subversion 1.4 and better) the ability for Subversion to automatically and transparently recover Berkeley DB environments in need of such recovery. When a Subversion process attaches to a repository's Berkeley DB environment, it uses some process accounting mechanisms to detect any unclean disconnections by previous processes, performs any necessary recovery, and then continues on as if nothing happened. This doesn't completely eliminate instances of repository wedging, but it does drastically reduce the amount of human interaction required to recover from them."
msgstr ""

#: ./build/en/book.xml:10323(para) 
msgid "So while a Berkeley DB repository is quite fast and scalable, it's best used by a single server process running as one user—such as Apache's <command moreinfo=\"none\">httpd</command> or <command moreinfo=\"none\">svnserve</command> (see <xref linkend=\"svn.serverconfig\"/>)—rather than accessing it as many different users via <literal moreinfo=\"none\">file://</literal> or <literal moreinfo=\"none\">svn+ssh://</literal> URLs. If using a Berkeley DB repository directly as multiple users, be sure to read <xref linkend=\"svn.serverconfig.multimethod\"/>."
msgstr ""

#: ./build/en/book.xml:10337(para) 
msgid "In mid-2004, a second type of repository storage system—one which doesn't use a database at all—came into being. An FSFS repository stores the changes associated with a revision in a single file, and so all of a repository's revisions can be found in a single subdirectory full of numbered files. Transactions are created in separate subdirectories as individual files. When complete, the transaction file is renamed and moved into the revisions directory, thus guaranteeing that commits are atomic. And because a revision file is permanent and unchanging, the repository also can be backed up while <quote>hot</quote>, just like a BDB-backed repository."
msgstr ""

#: ./build/en/book.xml:10351(para) 
msgid "The FSFS revision files describe a revision's directory structure, file contents, and deltas against files in other revision trees. Unlike a Berkeley DB database, this storage format is portable across different operating systems and isn't sensitive to CPU architecture. Because there's no journaling or shared-memory files being used, the repository can be safely accessed over a network filesystem and examined in a read-only environment. The lack of database overhead also means that the overall repository size is a bit smaller."
msgstr ""

#: ./build/en/book.xml:10362(para) 
msgid "FSFS has different performance characteristics too. When committing a directory with a huge number of files, FSFS is able to more quickly append directory entries. On the other hand, FSFS writes the latest version of a file as a delta against an earlier version, which means that checking out the latest tree is a bit slower than fetching the fulltexts stored in a Berkeley DB HEAD revision. FSFS also has a longer delay when finalizing a commit, which could in extreme cases cause clients to time out while waiting for a response."
msgstr ""

#: ./build/en/book.xml:10373(para) 
msgid "The most important distinction, however, is FSFS's inability to be <quote>wedged</quote> when something goes wrong. If a process using a Berkeley DB database runs into a permissions problem or suddenly crashes, the database can be left in an unusable state until an administrator recovers it. If the same scenarios happen to a process using an FSFS repository, the repository isn't affected at all. At worst, some transaction data is left behind."
msgstr ""

#: ./build/en/book.xml:10387(para) 
msgid "Oracle bought Sleepycat and its flagship software, Berkeley DB, on Valentine's Day in 2006."
msgstr ""

#: ./build/en/book.xml:10382(para) 
msgid "The only real argument against FSFS is its relative immaturity compared to Berkeley DB. Unlike Berkeley DB, which has years of history, its own dedicated development team and, now, Oracle's mighty name attached to it, <placeholder-1/> FSFS is a much newer bit of engineering. Prior to Subversion 1.4, it was still shaking out some pretty serious data integrity bugs which, while only triggered in very rare cases, nonetheless did occur. That said, FSFS has quickly become the back-end of choice for some of the largest public and private Subversion repositories, and promises a lower barrier to entry for Subversion across the board."
msgstr ""

#: ./build/en/book.xml:10407(title) 
msgid "Creating and Configuring Your Repository"
msgstr ""

#: ./build/en/book.xml:10409(para) 
msgid "In <xref linkend=\"svn.reposadmin.planning\"/>, we looked at some of the important decisions that should be made before creating and configuring your Subversion repository. Now, we finally get to get our hands dirty! In this section, we'll see how to actually create a Subversion repository and configure it to perform custom actions when special repository events occur."
msgstr ""

#: ./build/en/book.xml:10419(title) 
msgid "Creating the Repository"
msgstr ""

#: ./build/en/book.xml:10421(para) 
msgid "Subversion repository creation is an incredibly simple task. The <command moreinfo=\"none\">svnadmin</command> utility that comes with Subversion provides a subcommand (<literal moreinfo=\"none\">create</literal>) for doing just that."
msgstr ""

#: ./build/en/book.xml:10426(screen) 
#, no-wrap
msgid "\n$ svnadmin create /path/to/repos\n"
msgstr ""

#: ./build/en/book.xml:10430(para) 
msgid "This creates a new repository in the directory <filename moreinfo=\"none\">/path/to/repos</filename>, and with the default filesystem data store. Prior to Subversion 1.2, the default was to use Berkeley DB; the default is now FSFS. You can explicitly choose the filesystem type using the <option>--fs-type</option> argument, which accepts as a parameter either <literal moreinfo=\"none\">fsfs</literal> or <literal moreinfo=\"none\">bdb</literal>."
msgstr ""

#: ./build/en/book.xml:10439(screen) 
#, no-wrap
msgid "\n$ # Create an FSFS-backed repository\n$ svnadmin create --fs-type fsfs /path/to/repos\n$\n"
msgstr ""

#: ./build/en/book.xml:10445(screen) 
#, no-wrap
msgid "\n# Create a Berkeley-DB-backed repository\n$ svnadmin create --fs-type bdb /path/to/repos\n$\n"
msgstr ""

#: ./build/en/book.xml:10451(para) 
msgid "After running this simple command, you have a Subversion repository."
msgstr ""

#: ./build/en/book.xml:10455(para) 
msgid "The path argument to <command moreinfo=\"none\">svnadmin</command> is just a regular filesystem path and not a URL like the <command moreinfo=\"none\">svn</command> client program uses when referring to repositories. Both <command moreinfo=\"none\">svnadmin</command> and <command moreinfo=\"none\">svnlook</command> are considered server-side utilities—they are used on the machine where the repository resides to examine or modify aspects of the repository, and are in fact unable to perform tasks across a network. A common mistake made by Subversion newcomers is trying to pass URLs (even <quote>local</quote><literal moreinfo=\"none\">file://</literal> ones) to these two programs."
msgstr ""

#: ./build/en/book.xml:10468(para) 
msgid "Present in the <filename moreinfo=\"none\">db/</filename> subdirectory of your repository is the implementation of the versioned filesystem. Your new repository's versioned filesystem begins life at revision 0, which is defined to consist of nothing but the top-level root (<filename moreinfo=\"none\">/</filename>) directory. Initially, revision 0 also has a single revision property, <literal moreinfo=\"none\">svn:date</literal>, set to the time at which the repository was created."
msgstr ""

#: ./build/en/book.xml:10477(para) 
msgid "Now that you have a repository, it's time to customize it."
msgstr ""

#: ./build/en/book.xml:10481(para) 
msgid "While some parts of a Subversion repository—such as the configuration files and hook scripts—are meant to be examined and modified manually, you shouldn't (and shouldn't need to) tamper with the other parts of the repository <quote>by hand</quote>. The <command moreinfo=\"none\">svnadmin</command> tool should be sufficient for any changes necessary to your repository, or you can look to third-party tools (such as Berkeley DB's tool suite) for tweaking relevant subsections of the repository. Do <emphasis>not</emphasis> attempt manual manipulation of your version control history by poking and prodding around in your repository's data store files!"
msgstr ""

#: ./build/en/book.xml:10499(title) 
msgid "Implementing Repository Hooks"
msgstr ""

#: ./build/en/book.xml:10501(para) 
msgid "A <firstterm>hook</firstterm> is a program triggered by some repository event, such as the creation of a new revision or the modification of an unversioned property. Some hooks (the so-called <quote>pre hooks</quote>) run in advance of a repository operation and provide a means by which to both report what is about to happen and to prevent it from happening at all. Other hooks (the <quote>post hooks</quote>) run after the completion of a repository event, and are useful for reporting purposes only. Each hook is handed enough information to tell what that event is (or was), the specific repository changes proposed (or completed), and the username of the person who triggered the event."
msgstr ""

#: ./build/en/book.xml:10514(para) 
msgid "The <filename moreinfo=\"none\">hooks</filename> subdirectory is, by default, filled with templates for various repository hooks."
msgstr ""

#: ./build/en/book.xml:10518(screen) 
#, no-wrap
msgid "\n$ ls repos/hooks/\npost-commit.tmpl\t  post-unlock.tmpl  pre-revprop-change.tmpl\npost-lock.tmpl\t\t  pre-commit.tmpl   pre-unlock.tmpl\npost-revprop-change.tmpl  pre-lock.tmpl     start-commit.tmpl\n"
msgstr ""

#: ./build/en/book.xml:10525(para) 
msgid "There is one template for each hook that the Subversion repository supports, and by examining the contents of those template scripts, you can see what triggers each script to run and what data is passed to that script. Also present in many of these templates are examples of how one might use that script, in conjunction with other Subversion-supplied programs, to perform common useful tasks. To actually install a working hook, you need only place some executable program or script into the <filename moreinfo=\"none\">repos/hooks</filename> directory which can be executed as the name (like <command moreinfo=\"none\">start-commit</command> or <command moreinfo=\"none\">post-commit</command>) of the hook."
msgstr ""

#: ./build/en/book.xml:10538(para) 
msgid "On Unix platforms, this means supplying a script or program (which could be a shell script, a Python program, a compiled C binary, or any number of other things) named exactly like the name of the hook. Of course, the template files are present for more than just informational purposes—the easiest way to install a hook on Unix platforms is to simply copy the appropriate template file to a new file that lacks the <literal moreinfo=\"none\">.tmpl</literal> extension, customize the hook's contents, and ensure that the script is executable. Windows, however, uses file extensions to determine whether or not a program is executable, so you would need to supply a program whose basename is the name of the hook, and whose extension is one of the special extensions recognized by Windows for executable programs, such as <filename moreinfo=\"none\">.exe</filename> or <filename moreinfo=\"none\">.com</filename> for programs, and <filename moreinfo=\"none\">.bat</filename> for batch files."
msgstr ""

#: ./build/en/book.xml:10557(para) 
msgid "For security reasons, the Subversion repository executes hook programs with an empty environment—that is, no environment variables are set at all, not even <literal moreinfo=\"none\">$PATH</literal> (or <literal moreinfo=\"none\">%PATH%</literal>, under Windows). Because of this, many administrators are baffled when their hook program runs fine by hand, but doesn't work when run by Subversion. Be sure to explicitly set any necessary environment variables in your hook program and/or use absolute paths to programs."
msgstr ""

#: ./build/en/book.xml:10568(para) 
msgid "Subversion will attempt to execute hooks as the same user who owns the process which is accessing the Subversion repository. In most cases, the repository is being accessed via a Subversion server, so this user is the same user as which that server runs on the system. The hooks themselves will need to be configured with OS-level permissions that allow that user to execute them. Also, this means that any file or programs (including the Subversion repository itself) accessed directly or indirectly by the hook will be accessed as the same user. In other words, be alert to potential permission-related problems that could prevent the hook from performing the tasks it is designed to perform."
msgstr ""

#: ./build/en/book.xml:10581(para) 
msgid "There are nine hooks implemented by the Subversion repository, and you can get details about each of them in <xref linkend=\"svn.ref.reposhooks\"/>. As a repository administrator, you'll need to decide which of hooks you wish to implement (by way of providing an appropriately named and permissioned hook program), and how. This decision needs to be made with the bigger picture of how repository is deployed in mind. For example, if you are using server configuration stuffs to determine which usernames are permitted to commit changes to your repository, then you don't need to do this sort of access control via the hook system."
msgstr ""

#: ./build/en/book.xml:10593(para) 
msgid "There is no shortage of Subversion hook programs and scripts freely available either from the Subversion community itself or elsewhere. These scripts cover a wide range of utility—basic access control, policy adherence checking, issue tracker integration, email- or syndication-based commit notification, and beyond. See <xref linkend=\"svn.3rdparty\"/> for discussion of some of the most commonly used hook programs. Or, if you wish to write your own, see <xref linkend=\"svn.developer\"/>."
msgstr ""

#: ./build/en/book.xml:10603(para) 
msgid "While hook scripts can be leveraged to do almost anything, there is one dimension in which hook script authors should show restraint: do <emphasis>not</emphasis> modify a commit transaction using hook scripts. While it might be tempting to use hook scripts to automatically correct errors or shortcomings or policy violations present in the files being committed, doing so can cause problems. Subversion keeps client-side caches of certain bits of repository data, and if you change a commit transaction in this way, those caches become indetectably stale. This inconsistency can lead to surprising and unexpected behavior. Instead of modifying the transaction, you should simply <emphasis>validate</emphasis> the transaction in the <filename moreinfo=\"none\">pre-commit</filename> hook and reject the commit if it does not meet the desired requirements. As an added bonus, your users will learn the value of careful, compliance-minded work habits."
msgstr ""

#: ./build/en/book.xml:10626(title) 
msgid "Berkeley DB Configuration"
msgstr ""

#: ./build/en/book.xml:10628(para) 
msgid "A Berkeley DB environment is an encapsulation of one or more databases, log files, region files and configuration files. The Berkeley DB environment has its own set of default configuration values for things like the number of database locks allowed to be taken out at any given time, or the maximum size of the journaling log files, etc. Subversion's filesystem logic additionally chooses default values for some of the Berkeley DB configuration options. However, sometimes your particular repository, with its unique collection of data and access patterns, might require a different set of configuration option values."
msgstr ""

#: ./build/en/book.xml:10640(para) 
msgid "The producers of Berkeley DB understand that different applications and database environments have different requirements, and so they have provided a mechanism for overriding at runtime many of the configuration values for the Berkeley DB environment. Berkeley checks for the presence of a file named <filename moreinfo=\"none\">DB_CONFIG</filename> in the environment directory, and parses the options found in that file for use with that particular Berkeley DB environment."
msgstr ""

#: ./build/en/book.xml:10649(para) 
msgid "The Berkeley DB configuration file for a BDB-backed repository is located in the repository's <filename moreinfo=\"none\">db</filename> subdirectory, at <filename moreinfo=\"none\">db/DB_CONFIG</filename>. Subversion itself creates this file when it creates the rest of the repository. The file initially contains some default options, as well as pointers to the Berkeley DB online documentation so you can read about what those options do. Of course, you are free to add any of the supported Berkeley DB options to your <filename moreinfo=\"none\">DB_CONFIG</filename> file. Just be aware that while Subversion never attempts to read or interpret the contents of the file, and makes no direct use of the option settings in it, you'll want to avoid any configuration changes that may cause Berkeley DB to behave in a fashion that is at odds with what Subversion might expect. Also, changes made to <filename moreinfo=\"none\">DB_CONFIG</filename> won't take effect until you recover the database environment (using <command moreinfo=\"none\">svnadmin recover</command>)."
msgstr ""

#: ./build/en/book.xml:10676(title) 
msgid "Repository Maintenance"
msgstr ""

#: ./build/en/book.xml:10678(para) 
msgid "Maintaining a Subversion repository can be a daunting task, mostly due to the complexities inherent in systems which have a database backend. Doing the task well is all about knowing the tools—what they are, when to use them, and how to use them. This section will introduce you to the repository administration tools provided by Subversion, and how to wield them to accomplish tasks such as repository data migration, upgrades, backups and cleanups."
msgstr ""

#: ./build/en/book.xml:10689(title) 
msgid "An Administrator's Toolkit"
msgstr ""

#: ./build/en/book.xml:10691(para) 
msgid "Subversion provides a handful of utilities useful for creating, inspecting, modifying and repairing your repository. Let's look more closely at each of those tools. Afterward, we'll briefly examine some of the utilities included in the Berkeley DB distribution that provide functionality specific to your repository's database backend not otherwise provided by Subversion's own tools."
msgstr ""

#: ./build/en/book.xml:10703(para) 
msgid "The <command moreinfo=\"none\">svnadmin</command> program is the repository administrator's best friend. Besides providing the ability to create Subversion repositories, this program allows you to perform several maintenance operations on those repositories. The syntax of <command moreinfo=\"none\">svnadmin</command> is similar to that of other Subversion command-line programs:"
msgstr ""

#: ./build/en/book.xml:10711(screen) 
#, no-wrap
msgid "\n$ svnadmin help\ngeneral usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]\nType 'svnadmin help &lt;subcommand&gt;' for help on a specific subcommand.\nType 'svnadmin --version' to see the program version and FS modules.\n\nAvailable subcommands:\n   crashtest\n   create\n   deltify\n…\n"
msgstr ""

#: ./build/en/book.xml:10724(para) 
msgid "We've already mentioned <command moreinfo=\"none\">svnadmin</command>'s <literal moreinfo=\"none\">create</literal> subcommand (see <xref linkend=\"svn.reposadmin.basics.creating\"/>). Most of the others we will cover as they become topically relevant later in this chapter. And you can consult <xref linkend=\"svn.ref.svnadmin\"/> for a full rundown of subcommands and what each of them offers."
msgstr ""

#: ./build/en/book.xml:10736(para) 
msgid "<command moreinfo=\"none\">svnlook</command> is a tool provided by Subversion for examining the various revisions and transactions in a repository. No part of this program attempts to change the repository. <command moreinfo=\"none\">svnlook</command> is typically used by the repository hooks for reporting the changes that are about to be committed (in the case of the <command moreinfo=\"none\">pre-commit</command> hook) or that were just committed (in the case of the <command moreinfo=\"none\">post-commit</command> hook) to the repository. A repository administrator may use this tool for diagnostic purposes."
msgstr ""

#: ./build/en/book.xml:10747(para) 
msgid "<command moreinfo=\"none\">svnlook</command> has a straightforward syntax:"
msgstr ""

#: ./build/en/book.xml:10750(screen) 
#, no-wrap
msgid "\n$ svnlook help\ngeneral usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]\nNote: any subcommand which takes the '--revision' and '--transaction'\n      options will, if invoked without one of those options, act on\n      the repository's youngest revision.\nType 'svnlook help &lt;subcommand$gt;' for help on a specific subcommand.\nType 'svnlook --version' to see the program version and FS modules.\n…\n"
msgstr ""

#: ./build/en/book.xml:10761(para) 
msgid "Nearly every one of <command moreinfo=\"none\">svnlook</command>'s subcommands can operate on either a revision or a transaction tree, printing information about the tree itself, or how it differs from the previous revision of the repository. You use the <option>--revision (-r)</option> and <option>--transaction (-t)</option> options to specify which revision or transaction, respectively, to examine. In the absence of both the <option>--revision (-r)</option> and <option>--transaction (-t)</option> options, <command moreinfo=\"none\">svnlook</command> will examine the youngest (or <quote>HEAD</quote>) revision in the repository. So the following two commands do exactly the same thing when 19 is the youngest revision in the repository located at <filename moreinfo=\"none\">/path/to/repos</filename>:"
msgstr ""

#: ./build/en/book.xml:10776(screen) 
#, no-wrap
msgid "\n$ svnlook info /path/to/repos\n$ svnlook info /path/to/repos -r 19\n"
msgstr ""

#: ./build/en/book.xml:10781(para) 
msgid "The only exception to these rules about subcommands is the <command moreinfo=\"none\">svnlook youngest</command> subcommand, which takes no options, and simply prints out the repository's youngest revision number."
msgstr ""

#: ./build/en/book.xml:10786(screen) 
#, no-wrap
msgid "\n$ svnlook youngest /path/to/repos\n19\n"
msgstr ""

#: ./build/en/book.xml:10792(para) 
msgid "Keep in mind that the only transactions you can browse are uncommitted ones. Most repositories will have no such transactions, because transactions are usually either committed (in which case, you should access them as revision with the <option>--revision (-r)</option> option) or aborted and removed."
msgstr ""

#: ./build/en/book.xml:10800(para) 
msgid "Output from <command moreinfo=\"none\">svnlook</command> is designed to be both human- and machine-parsable. Take as an example the output of the <literal moreinfo=\"none\">info</literal> subcommand:"
msgstr ""

#: ./build/en/book.xml:10804(screen) 
#, no-wrap
msgid "\n$ svnlook info /path/to/repos\nsally\n2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)\n27\nAdded the usual\nGreek tree.\n"
msgstr ""

#: ./build/en/book.xml:10813(para) 
msgid "The output of the <literal moreinfo=\"none\">info</literal> subcommand is defined as:"
msgstr ""

#: ./build/en/book.xml:10818(para) 
msgid "The author, followed by a newline."
msgstr ""

#: ./build/en/book.xml:10821(para) 
msgid "The date, followed by a newline."
msgstr ""

#: ./build/en/book.xml:10824(para) 
msgid "The number of characters in the log message, followed by a newline."
msgstr ""

#: ./build/en/book.xml:10828(para) 
msgid "The log message itself, followed by a newline."
msgstr ""

#: ./build/en/book.xml:10832(para) 
msgid "This output is human-readable, meaning items like the datestamp are displayed using a textual representation instead of something more obscure (such as the number of nanoseconds since the Tasty Freeze guy drove by). But the output is also machine-parsable—because the log message can contain multiple lines and be unbounded in length, <command moreinfo=\"none\">svnlook</command> provides the length of that message before the message itself. This allows scripts and other wrappers around this command to make intelligent decisions about the log message, such as how much memory to allocate for the message, or at least how many bytes to skip in the event that this output is not the last bit of data in the stream."
msgstr ""

#: ./build/en/book.xml:10846(para) 
msgid "<command moreinfo=\"none\">svnlook</command> can perform a variety of other queries: displaying subsets of bits of information we've mentioned previously, recursively listing versioned directory trees, reporting which paths were modified in a given revision or transaction, showing textual and property differences made to files and directories, and so on. See <xref linkend=\"svn.ref.svnlook\"/> for a full reference of <command moreinfo=\"none\">svnlook</command>'s features."
msgstr ""

#: ./build/en/book.xml:10861(para) 
msgid "While it won't be the most commonly used tool at the administrator's disposal, <command moreinfo=\"none\">svndumpfilter</command> provides a very particular brand of useful functionality—the ability to quickly and easily modify streams of Subversion repository history data by acting as a path-based filter."
msgstr ""

#: ./build/en/book.xml:10868(para) 
msgid "The syntax of <command moreinfo=\"none\">svndumpfilter</command> is as follows:"
msgstr ""

#: ./build/en/book.xml:10871(screen) 
#, no-wrap
msgid "\n$ svndumpfilter help\ngeneral usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]\nType \"svndumpfilter help &lt;subcommand&gt;\" for help on a specific subcommand.\nType 'svndumpfilter --version' to see the program version.\n  \nAvailable subcommands:\n   exclude\n   include\n   help (?, h)\n"
msgstr ""

#: ./build/en/book.xml:10883(para) 
msgid "There are only two interesting subcommands. They allow you to make the choice between explicit or implicit inclusion of paths in the stream:"
msgstr ""

#: ./build/en/book.xml:10889(literal) 
msgid "exclude"
msgstr ""

#: ./build/en/book.xml:10891(para) 
msgid "Filter out a set of paths from the dump data stream."
msgstr ""

#: ./build/en/book.xml:10897(literal) 
msgid "include"
msgstr ""

#: ./build/en/book.xml:10899(para) 
msgid "Allow only the requested set of paths to pass through the dump data stream."
msgstr ""

#: ./build/en/book.xml:10905(para) 
msgid "You can learn more about these subcommands and <command moreinfo=\"none\">svndumpfilter</command>'s unique purpose in <xref linkend=\"svn.reposadmin.maint.filtering\"/>."
msgstr ""

#: ./build/en/book.xml:10924(para) 
msgid "Or is that, the <quote>sync</quote>?"
msgstr ""

#: ./build/en/book.xml:10914(para) 
msgid "The <command moreinfo=\"none\">svnsync</command> program, which is new to the 1.4 release of Subversion, provides all the functionality required for maintaining a read-only mirror of a Subversion repository. The program really has one job—to transfer one repository's versioned history into another repository. And while there are few ways to do that, its primary strength is that it can operate remotely—the <quote>source</quote> and <quote>sink</quote><placeholder-1/> repositories may be on different computers from each other and from <command moreinfo=\"none\">svnsync</command> itself."
msgstr ""

#: ./build/en/book.xml:10929(para) 
msgid "As you might expect, <command moreinfo=\"none\">svnsync</command> has a syntax that looks very much like every other program we've mentioned in this chapter:"
msgstr ""

#: ./build/en/book.xml:10933(screen) 
#, no-wrap
msgid "\n$ svnsync help\ngeneral usage: svnsync SUBCOMMAND DEST_URL  [ARGS &amp; OPTIONS ...]\nType 'svnsync help &lt;subcommand&gt;' for help on a specific subcommand.\nType 'svnsync --version' to see the program version and RA modules.\n\nAvailable subcommands:\n   initialize (init)\n   synchronize (sync)\n   copy-revprops\n   help (?, h)\n$\n"
msgstr ""

#: ./build/en/book.xml:10947(para) 
msgid "We talk more about replication repositories with <command moreinfo=\"none\">svnsync</command> in <xref linkend=\"svn.reposadmin.maint.replication\"/>."
msgstr ""

#: ./build/en/book.xml:10954(title) 
msgid "Berkeley DB Utilities"
msgstr ""

#: ./build/en/book.xml:10956(para) 
msgid "If you're using a Berkeley DB repository, then all of your versioned filesystem's structure and data live in a set of database tables within the <filename moreinfo=\"none\">db/</filename> subdirectory of your repository. This subdirectory is a regular Berkeley DB environment directory, and can therefore be used in conjunction with any of the Berkeley database tools, typically provided as part of the Berkeley DB distribution."
msgstr ""

#: ./build/en/book.xml:10965(para) 
msgid "For day-to-day Subversion use, these tools are unnecessary. Most of the functionality typically needed for Subversion repositories has been duplicated in the <command moreinfo=\"none\">svnadmin</command> tool. For example, <command moreinfo=\"none\">svnadmin list-unused-dblogs</command> and <command moreinfo=\"none\">svnadmin list-dblogs</command> perform a subset of what is provided by the Berkeley <command moreinfo=\"none\">db_archive</command> command, and <command moreinfo=\"none\">svnadmin recover</command> reflects the common use cases of the <command moreinfo=\"none\">db_recover</command> utility."
msgstr ""

#: ./build/en/book.xml:10976(para) 
msgid "There are still a few Berkeley DB utilities that you might find useful. The <command moreinfo=\"none\">db_dump</command> and <command moreinfo=\"none\">db_load</command> programs write and read, respectively, a custom file format which describes the keys and values in a Berkeley DB database. Since Berkeley databases are not portable across machine architectures, this format is a useful way to transfer those databases from machine to machine, irrespective of architecture or operating system. Also, the <command moreinfo=\"none\">db_stat</command> utility can provide useful information about the status of your Berkeley DB environment, including detailed statistics about the locking and storage subsystems."
msgstr ""

#: ./build/en/book.xml:10989(para) 
msgid "For more information on the Berkeley DB tool chain, visit the documentation section of the Berkeley DB section of Oracle's website, located at <ulink url=\"http://www.oracle.com/technology/documentation/berkeley-db/db/\"/>."
msgstr ""

#: ./build/en/book.xml:10998(title) 
msgid "Commit Log Message Correction"
msgstr ""

#: ./build/en/book.xml:11000(para) 
msgid "Sometimes a user will have an error in her log message (a misspelling or some misinformation, perhaps). If the repository is configured (using the <literal moreinfo=\"none\">pre-revprop-change</literal> and <literal moreinfo=\"none\">post-revprop-change</literal> hooks; see <xref linkend=\"svn.reposadmin.create.hooks\"/>) to accept changes to this log message after the commit is finished, then the user can <quote>fix</quote> her log message remotely using the <command moreinfo=\"none\">svn</command> program's <literal moreinfo=\"none\">propset</literal> command (see <xref linkend=\"svn.ref\"/>). However, because of the potential to lose information forever, Subversion repositories are not, by default, configured to allow changes to unversioned properties—except by an administrator."
msgstr ""

#: ./build/en/book.xml:11013(para) 
msgid "If a log message needs to be changed by an administrator, this can be done using <command moreinfo=\"none\">svnadmin setlog</command>. This command changes the log message (the <literal moreinfo=\"none\">svn:log</literal> property) on a given revision of a repository, reading the new value from a provided file."
msgstr ""

#: ./build/en/book.xml:11019(screen) 
#, no-wrap
msgid "\n$ echo \"Here is the new, correct log message\" &gt; newlog.txt\n$ svnadmin setlog myrepos newlog.txt -r 388\n"
msgstr ""

#: ./build/en/book.xml:11024(para) 
msgid "The <command moreinfo=\"none\">svnadmin setlog</command> command alone is still bound by the same protections against modifying unversioned properties as a remote client is—the <literal moreinfo=\"none\">pre-</literal> and <literal moreinfo=\"none\">post-revprop-change</literal> hooks are still triggered, and therefore must be setup to accept changes of this nature. But an administrator can get around these protections by passing the <option>--bypass-hooks</option> option to the <command moreinfo=\"none\">svnadmin setlog</command> command."
msgstr ""

#: ./build/en/book.xml:11035(para) 
msgid "Remember, though, that by bypassing the hooks, you are likely avoiding such things as email notifications of property changes, backup systems which track unversioned property changes, and so on. In other words, be very careful about what you are changing, and how you change it."
msgstr ""

#: ./build/en/book.xml:11048(title) 
msgid "Managing Disk Space"
msgstr ""

#: ./build/en/book.xml:11050(para) 
msgid "While the cost of storage has dropped incredibly in the past few years, disk usage is still a valid concern for administrators seeking to version large amounts of data. Every bit of version history information stored in the live repository is information that needs to be backed up elsewhere, perhaps multiple times as part of rotating backup schedules. It is useful to know what pieces of Subversion's repository data need to remain on the live site, which need to be backed up, and which can be safely removed."
msgstr ""

#: ./build/en/book.xml:11062(title) 
msgid "How Subversion saves disk space"
msgstr ""

#: ./build/en/book.xml:11064(para) 
msgid "To keep the size of the repository as small as possible, Subversion uses <firstterm>deltification</firstterm> (or, <quote>deltified storage</quote>) within the repository itself. Deltification involves encoding the representation of a chunk of data as a collection of differences against some other chunk of data. If the two pieces of data are very similar, this deltification results in storage savings for the deltified chunk—rather than taking up space equal to the size of the original data, it takes up only enough space to say, <quote>I look just like this other piece of data over here, except for the following couple of changes</quote>. The result is that most of the repository data that tends to be sizable—namely, the contents of versioned files—is stored at a much smaller size than the original <quote>fulltext</quote> representation of that data. And for repositories created with Subversion 1.4 or later, the space saving get even better—now those fulltext representations of file contents are themselves compressed."
msgstr ""

#: ./build/en/book.xml:11085(para) 
msgid "Because all of the data that is subject to deltification in a BDB-backed repository is stored in a single Berkeley DB database file, reducing the size of the stored values will not immediately reduce the size of the database file itself. Berkeley DB will, however, keep internal records of unused areas of the database file, and consume those areas first before growing the size of the database file. So while deltification doesn't produce immediate space savings, it can drastically slow future growth of the database."
msgstr ""

#: ./build/en/book.xml:11101(title) 
msgid "Removing dead transactions"
msgstr ""

#: ./build/en/book.xml:11103(para) 
msgid "Though they are uncommon, there are circumstances in which a Subversion commit process might fail, leaving behind in the repository the remnants of the revision-to-be that wasn't—an uncommitted transaction and all the file and directory changes associated with it. This could happen for several reasons: perhaps the client operation was inelegantly terminated by the user, or a network failure might have occurred in the middle of an operation, etc. Regardless of the reason, dead transactions can happen. They don't do any real harm, other than consuming disk space. A fastidious administrator may nonetheless wish to remove them."
msgstr ""

#: ./build/en/book.xml:11116(para) 
msgid "You can use <command moreinfo=\"none\">svnadmin</command>'s <literal moreinfo=\"none\">lstxns</literal> command to list the names of the currently outstanding transactions."
msgstr ""

#: ./build/en/book.xml:11120(screen) 
#, no-wrap
msgid "\n$ svnadmin lstxns myrepos\n19\n3a1\na45\n$\n"
msgstr ""

#: ./build/en/book.xml:11128(para) 
msgid "Each item in the resultant output can then be used with <command moreinfo=\"none\">svnlook</command> (and its <option>--transaction (-t)</option> option) to determine who created the transaction, when it was created, what types of changes were made in the transaction—information that is helpful in determining whether or not the transaction is a safe candidate for removal! If so, the transaction's name can be passed to <command moreinfo=\"none\">svnadmin rmtxns</command>, which will perform the cleanup of the transaction. In fact, the <literal moreinfo=\"none\">rmtxns</literal> subcommand can take its input directly from the output of <literal moreinfo=\"none\">lstxns</literal>!"
msgstr ""

#: ./build/en/book.xml:11141(screen) 
#, no-wrap
msgid "\n$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`\n$\n"
msgstr ""

#: ./build/en/book.xml:11146(para) 
msgid "If you use these two subcommands like this, you should consider making your repository temporarily inaccessible to clients. That way, no one can begin a legitimate transaction before you start your cleanup. <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns.ex-1\"/> contains a bit of shell-scripting that can quickly generate information about each outstanding transaction in your repository."
msgstr ""

#: ./build/en/book.xml:11155(title) 
msgid "txn-info.sh (Reporting Outstanding Transactions)"
msgstr ""

#: ./build/en/book.xml:11157(programlisting) 
#, no-wrap
msgid "\n#!/bin/sh\n\n### Generate informational output for all outstanding transactions in\n### a Subversion repository.\n\nREPOS=\"${1}\"\nif [ \"x$REPOS\" = x ] ; then\n  echo \"usage: $0 REPOS_PATH\"\n  exit\nfi\n\nfor TXN in `svnadmin lstxns ${REPOS}`; do \n  echo \"---[ Transaction ${TXN} ]-------------------------------------------\"\n  svnlook info \"${REPOS}\" -t \"${TXN}\"\ndone\n"
msgstr ""

#: ./build/en/book.xml:11176(para) 
msgid "The output of the script is basically a concatenation of several chunks of <command moreinfo=\"none\">svnlook info</command> output (see <xref linkend=\"svn.reposadmin.maint.tk.svnlook\"/>), and will look something like:"
msgstr ""

#: ./build/en/book.xml:11181(screen) 
#, no-wrap
msgid "\n$ txn-info.sh myrepos\n---[ Transaction 19 ]-------------------------------------------\nsally\n2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)\n0\n---[ Transaction 3a1 ]-------------------------------------------\nharry\n2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)\n39\nTrying to commit over a faulty network.\n---[ Transaction a45 ]-------------------------------------------\nsally\n2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)\n0\n$\n"
msgstr ""

#: ./build/en/book.xml:11199(para) 
msgid "A long-abandoned transaction usually represents some sort of failed or interrupted commit. A transaction's datestamp can provide interesting information—for example, how likely is it that an operation begun nine months ago is still active?"
msgstr ""

#: ./build/en/book.xml:11205(para) 
msgid "In short, transaction cleanup decisions need not be made unwisely. Various sources of information—including Apache's error and access logs, Subversion's operational logs, Subversion revision history, and so on—can be employed in the decision-making process. And of course, an administrator can often simply communicate with a seemingly dead transaction's owner (via email, for example) to verify that the transaction is, in fact, in a zombie state."
msgstr ""

#: ./build/en/book.xml:11218(title) 
msgid "Purging unused Berkeley DB logfiles"
msgstr ""

#: ./build/en/book.xml:11220(para) 
msgid "Until recently, the largest offender of disk space usage with respect to BDB-backed Subversion repositories was the log files in which Berkeley DB performs its pre-writes before modifying the actual database files. These files capture all the actions taken along the route of changing the database from one state to another—while the database files reflect at any given time some state, the log files contain all the many changes along the way between states. As such, they can grow and accumulate quite rapidly."
msgstr ""

#: ./build/en/book.xml:11231(para) 
msgid "Fortunately, beginning with the 4.2 release of Berkeley DB, the database environment has the ability to remove its own unused log files without any external procedures. Any repositories created using an <command moreinfo=\"none\">svnadmin</command> which is compiled against Berkeley DB version 4.2 or greater will be configured for this automatic log file removal. If you don't want this feature enabled, simply pass the <option>--bdb-log-keep</option> option to the <command moreinfo=\"none\">svnadmin create</command> command. If you forget to do this, or change your mind at a later time, simple edit the <filename moreinfo=\"none\">DB_CONFIG</filename> file found in your repository's <filename moreinfo=\"none\">db</filename> directory, comment out the line which contains the <literal moreinfo=\"none\">set_flags DB_LOG_AUTOREMOVE</literal> directive, and then run <command moreinfo=\"none\">svnadmin recover</command> on your repository to force the configuration changes to take effect. See <xref linkend=\"svn.reposadmin.create.bdb\"/> for more information about database configuration."
msgstr ""

#: ./build/en/book.xml:11249(para) 
msgid "Without some sort of automatic log file removal in place, log files will accumulate as you use your repository. This is actually somewhat of a feature of the database system—you should be able to recreate your entire database using nothing but the log files, so these files can be useful for catastrophic database recovery. But typically, you'll want to archive the log files that are no longer in use by Berkeley DB, and then remove them from disk to conserve space. Use the <command moreinfo=\"none\">svnadmin list-unused-dblogs</command> command to list the unused log files:"
msgstr ""

#: ./build/en/book.xml:11261(screen) ./build/en/book.xml:22453(screen) 
#, no-wrap
msgid "\n$ svnadmin list-unused-dblogs /path/to/repos\n/path/to/repos/log.0000000031\n/path/to/repos/log.0000000032\n/path/to/repos/log.0000000033\n\n$ svnadmin list-unused-dblogs /path/to/repos | xargs rm\n## disk space reclaimed!\n"
msgstr ""

#: ./build/en/book.xml:11272(para) 
msgid "BDB-backed repositories whose log files are used as part of a backup or disaster recovery plan should <emphasis>not</emphasis> make use of the log file autoremoval feature. Reconstruction of a repository's data from log files can only be accomplished when the log files are all available. If some of the log files are removed from disk before the backup system has a chance to copy them elsewhere, the incomplete set of backed-up log files is essentially useless."
msgstr ""

#: ./build/en/book.xml:11289(title) 
msgid "Berkeley DB Recovery"
msgstr ""

#: ./build/en/book.xml:11291(para) 
msgid "As mentioned in <xref linkend=\"svn.reposadmin.basics.backends.bdb\"/>, a Berkeley DB repository can sometimes be left in frozen state if not closed properly. When this happens, an administrator needs to rewind the database back into a consistent state. This is unique to BDB-backed repositories, though—if you are using FSFS-backed ones instead, this won't apply to you. And for those of you using Subversion 1.4 with Berkeley DB 4.4 or better, you should find that Subversion has become much more resilient in these types of situations. Still, wedged Berkeley DB repositories do occur, and an administrator needs to know how to safely deal with this circumstance."
msgstr ""

#: ./build/en/book.xml:11303(para) 
msgid "In order to protect the data in your repository, Berkeley DB uses a locking mechanism. This mechanism ensures that portions of the database are not simultaneously modified by multiple database accessors, and that each process sees the data in the correct state when that data is being read from the database. When a process needs to change something in the database, it first checks for the existence of a lock on the target data. If the data is not locked, the process locks the data, makes the change it wants to make, and then unlocks the data. Other processes are forced to wait until that lock is removed before they are permitted to continue accessing that section of the database. (This has nothing to do with the locks that you, as a user, can apply to versioned files within the repository; we try to clear up the confusion caused by this terminology collision in <xref linkend=\"svn.advanced.locking.meanings\"/>.)"
msgstr ""

#: ./build/en/book.xml:11319(para) 
msgid "In the course of using your Subversion repository, fatal errors or interruptions can prevent a process from having the chance to remove the locks it has placed in the database. The result is that the back-end database system gets <quote>wedged</quote>. When this happens, any attempts to access the repository hang indefinitely (since each new accessor is waiting for a lock to go away—which isn't going to happen)."
msgstr ""

#: ./build/en/book.xml:11333(para) 
msgid "E.g.: hard drive + huge electromagnet = disaster."
msgstr ""

#: ./build/en/book.xml:11328(para) 
msgid "If this happens to your repository, don't panic. The Berkeley DB filesystem takes advantage of database transactions and checkpoints and pre-write journaling to ensure that only the most catastrophic of events <placeholder-1/> can permanently destroy a database environment. A sufficiently paranoid repository administrator will have made off-site backups of the repository data in some fashion, but head off to the tape backup storage closet just yet."
msgstr ""

#: ./build/en/book.xml:11340(para) 
msgid "Instead, use the following recipe to attempt to <quote>unwedge</quote> your repository:"
msgstr ""

#: ./build/en/book.xml:11345(para) 
msgid "Make sure that there are no processes accessing (or attempting to access) the repository. For networked repositories, this means shutting down the Apache HTTP Server or svnserve daemon, too."
msgstr ""

#: ./build/en/book.xml:11351(para) 
msgid "Become the user who owns and manages the repository. This is important, as recovering a repository while running as the wrong user can tweak the permissions of the repository's files in such a way that your repository will still be inaccessible even after it is <quote>unwedged</quote>."
msgstr ""

#: ./build/en/book.xml:11359(para) 
msgid "Run the command <command moreinfo=\"none\">svnadmin recover /path/to/repos</command>. You should see output like this:"
msgstr ""

#: ./build/en/book.xml:11363(screen) 
#, no-wrap
msgid "\nRepository lock acquired.\nPlease wait; recovering the repository may take some time...\n\nRecovery completed.\nThe latest repos revision is 19.\n"
msgstr ""

#: ./build/en/book.xml:11370(para) 
msgid "This command may take many minutes to complete."
msgstr ""

#: ./build/en/book.xml:11373(para) 
msgid "Restart the server process."
msgstr ""

#: ./build/en/book.xml:11377(para) 
msgid "This procedure fixes almost every case of repository lock-up. Make sure that you run this command as the user that owns and manages the database, not just as <literal moreinfo=\"none\">root</literal>. Part of the recovery process might involve recreating from scratch various database files (shared memory regions, for example). Recovering as <literal moreinfo=\"none\">root</literal> will create those files such that they are owned by <literal moreinfo=\"none\">root</literal>, which means that even after you restore connectivity to your repository, regular users will be unable to access it."
msgstr ""

#: ./build/en/book.xml:11388(para) 
msgid "If the previous procedure, for some reason, does not successfully unwedge your repository, you should do two things. First, move your broken repository out of the way and restore your latest backup of it. Then, send an email to the Subversion user list (at <email>users@subversion.tigris.org</email>) describing your problem in detail. Data integrity is an extremely high priority to the Subversion developers."
msgstr ""

#: ./build/en/book.xml:11401(title) 
msgid "Migrating Repository Data Elsewhere"
msgstr ""

#: ./build/en/book.xml:11403(para) 
msgid "A Subversion filesystem has its data spread throughout various back-end data store files in a fashion generally understood by (and of interest to) only the Subversion developers themselves. However, circumstances may arise that call for all, or some subset, of that data to be copied or moved into another repository."
msgstr ""

#: ./build/en/book.xml:11410(para) 
msgid "Subversion provides such functionality by way of repository dump streams. A repository dump stream (often referred to as a <quote>dumpfile</quote> when stored as a file on disk) is a portable, flat file format that describes the various revisions in your repository—what was changed, by whom, when, and so on. This dump stream is the primary mechanism used to marshal versioned history—in whole or in part, with or without modification—between repositories. And Subversion provides the tools necessary for creating and loading these dump streams—the <command moreinfo=\"none\">svnadmin dump</command> and <command moreinfo=\"none\">svnadmin load</command> subcommands, respectively."
msgstr ""

#: ./build/en/book.xml:11424(para) 
msgid "While the Subversion repository dump format contains human-readable portions and a familiar structure (it resembles an RFC-822 format, the same type of format used for most email), it is <emphasis>not</emphasis> a plaintext file format. The format should be treated as a binary file format, highly sensitive to meddling. Many text editor tools will corrupt the file's contents, often due to automatic line ending character conversion."
msgstr ""

#: ./build/en/book.xml:11434(para) 
msgid "There are many reasons for dumping and loading Subversion repository data. Early in Subversion's life, the most common reason was due to the evolution of Subversion itself. As Subversion matured, there were times when changes made to the back-end database schema caused compatibility issues with previous versions of the repository, so users had to dump their repository data using the previous version of Subversion, and load it into a freshly created repository with the new version of Subversion. Now, these types of schema changes haven't occured since Subversion's 1.0 release, and the Subversion developers promise not to force users to dump and load their repositories when upgrading between minor versions (such as from 1.3 to 1.4) of Subversion. But there are still other reasons for dumping and loading, including re-deploying a Berkeley DB repository on a new OS or CPU architecture, switching between the Berkeley DB and FSFS back-ends, or (as we'll cover in <xref linkend=\"svn.reposadmin.maint.filtering\"/> purging versioned data from repository history."
msgstr ""

#: ./build/en/book.xml:11453(para) 
msgid "Whatever your reason for migration repository history, using the <command moreinfo=\"none\">svnadmin dump</command> and <command moreinfo=\"none\">svnadmin load</command> subcommands is straightforward. <command moreinfo=\"none\">svnadmin dump</command> will output a range of repository revisions that are formatted using Subversion's custom filesystem dump format. The dump format is printed to the standard output stream, while informative messages are printed to the standard error stream. This allows you to redirect the output stream to a file while watching the status output in your terminal window. For example:"
msgstr ""

#: ./build/en/book.xml:11465(screen) 
#, no-wrap
msgid "\n$ svnlook youngest myrepos\n26\n$ svnadmin dump myrepos &gt; dumpfile\n* Dumped revision 0.\n* Dumped revision 1.\n* Dumped revision 2.\n…\n* Dumped revision 25.\n* Dumped revision 26.\n"
msgstr ""

#: ./build/en/book.xml:11477(para) 
msgid "At the end of the process, you will have a single file (<filename moreinfo=\"none\">dumpfile</filename> in the previous example) that contains all the data stored in your repository in the requested range of revisions. Note that <command moreinfo=\"none\">svnadmin dump</command> is reading revision trees from the repository just like any other <quote>reader</quote> process would (<command moreinfo=\"none\">svn checkout</command>, for example). So it's safe to run this command at any time."
msgstr ""

#: ./build/en/book.xml:11486(para) 
msgid "The other subcommand in the pair, <command moreinfo=\"none\">svnadmin load</command>, parses the standard input stream as a Subversion repository dump file, and effectively replays those dumped revisions into the target repository for that operation. It also gives informative feedback, this time using the standard output stream:"
msgstr ""

#: ./build/en/book.xml:11493(screen) 
#, no-wrap
msgid "\n$ svnadmin load newrepos &lt; dumpfile\n&lt;&lt;&lt; Started new txn, based on original revision 1\n     * adding path : A ... done.\n     * adding path : A/B ... done.\n     …\n------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;\n\n&lt;&lt;&lt; Started new txn, based on original revision 2\n     * editing path : A/mu ... done.\n     * editing path : A/D/G/rho ... done.\n\n------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;\n\n…\n\n&lt;&lt;&lt; Started new txn, based on original revision 25\n     * editing path : A/D/gamma ... done.\n\n------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;\n\n&lt;&lt;&lt; Started new txn, based on original revision 26\n     * adding path : A/Z/zeta ... done.\n     * editing path : A/mu ... done.\n\n------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;\n\n"
msgstr ""

#: ./build/en/book.xml:11522(para) 
msgid "The result of a load is new revisions added to a repository—the same thing you get by making commits against that repository from a regular Subversion client. And just as in a commit, you can use hook programs to perform actions before and after each of the commits made during a load process. By passing the <option>--use-pre-commit-hook</option> and <option>--use-post-commit-hook</option> options to <command moreinfo=\"none\">svnadmin load</command>, you can instruct Subversion to execute the pre-commit and post-commit hook programs, respectively, for each loaded revision. You might use these, for example, to ensure that loaded revisions pass through the same validation steps that regular commits pass through. Of course, you should use these options with care—if your post-commit hook sends emails to a mailing list for each new commit, you might not want to spew hundreds or thousands of commit emails in rapid succession at that list for each of the loaded revisions! You can read more about the use of hook scripts in <xref linkend=\"svn.reposadmin.create.hooks\"/>."
msgstr ""

#: ./build/en/book.xml:11542(para) 
msgid "Note that because <command moreinfo=\"none\">svnadmin</command> uses standard input and output streams for the repository dump and load process, people who are feeling especially saucy can try things like this (perhaps even using different versions of <command moreinfo=\"none\">svnadmin</command> on each side of the pipe):"
msgstr ""

#: ./build/en/book.xml:11548(screen) 
#, no-wrap
msgid "\n$ svnadmin create newrepos\n$ svnadmin dump myrepos | svnadmin load newrepos\n"
msgstr ""

#: ./build/en/book.xml:11553(para) 
msgid "By default, the dump file will be quite large—much larger than the repository itself. That's because by default every version of every file is expressed as a full text in the dump file. This is the fastest and simplest behavior, and nice if you're piping the dump data directly into some other process (such as a compression program, filtering program, or into a loading process). But if you're creating a dump file for longer-term storage, you'll likely want to save disk space by using the <option>--deltas</option> switch. With this option, successive revisions of files will be output as compressed, binary differences—just as file revisions are stored in a repository. This option is slower, but results in a dump file much closer in size to the original repository."
msgstr ""

#: ./build/en/book.xml:11568(para) 
msgid "We mentioned previously that <command moreinfo=\"none\">svnadmin dump</command> outputs a range of revisions. Use the <option>--revision (-r)</option> option to specify a single revision to dump, or a range of revisions. If you omit this option, all the existing repository revisions will be dumped."
msgstr ""

#: ./build/en/book.xml:11575(screen) 
#, no-wrap
msgid "\n$ svnadmin dump myrepos -r 23 &gt; rev-23.dumpfile\n$ svnadmin dump myrepos -r 100:200 &gt; revs-100-200.dumpfile\n"
msgstr ""

#: ./build/en/book.xml:11580(para) 
msgid "As Subversion dumps each new revision, it outputs only enough information to allow a future loader to re-create that revision based on the previous one. In other words, for any given revision in the dump file, only the items that were changed in that revision will appear in the dump. The only exception to this rule is the first revision that is dumped with the current <command moreinfo=\"none\">svnadmin dump</command> command."
msgstr ""

#: ./build/en/book.xml:11589(para) 
msgid "By default, Subversion will not express the first dumped revision as merely differences to be applied to the previous revision. For one thing, there is no previous revision in the dump file! And secondly, Subversion cannot know the state of the repository into which the dump data will be loaded (if it ever, in fact, occurs). To ensure that the output of each execution of <command moreinfo=\"none\">svnadmin dump</command> is self-sufficient, the first dumped revision is by default a full representation of every directory, file, and property in that revision of the repository."
msgstr ""

#: ./build/en/book.xml:11600(para) 
msgid "However, you can change this default behavior. If you add the <option>--incremental</option> option when you dump your repository, <command moreinfo=\"none\">svnadmin</command> will compare the first dumped revision against the previous revision in the repository, the same way it treats every other revision that gets dumped. It will then output the first revision exactly as it does the rest of the revisions in the dump range—mentioning only the changes that occurred in that revision. The benefit of this is that you can create several small dump files that can be loaded in succession, instead of one large one, like so:"
msgstr ""

#: ./build/en/book.xml:11612(screen) 
#, no-wrap
msgid "\n$ svnadmin dump myrepos -r 0:1000 &gt; dumpfile1\n$ svnadmin dump myrepos -r 1001:2000 --incremental &gt; dumpfile2\n$ svnadmin dump myrepos -r 2001:3000 --incremental &gt; dumpfile3\n"
msgstr ""

#: ./build/en/book.xml:11618(para) 
msgid "These dump files could be loaded into a new repository with the following command sequence:"
msgstr ""

#: ./build/en/book.xml:11621(screen) 
#, no-wrap
msgid "\n$ svnadmin load newrepos &lt; dumpfile1\n$ svnadmin load newrepos &lt; dumpfile2\n$ svnadmin load newrepos &lt; dumpfile3\n"
msgstr ""

#: ./build/en/book.xml:11627(para) 
msgid "Another neat trick you can perform with this <option>--incremental</option> option involves appending to an existing dump file a new range of dumped revisions. For example, you might have a <literal moreinfo=\"none\">post-commit</literal> hook that simply appends the repository dump of the single revision that triggered the hook. Or you might have a script that runs nightly to append dump file data for all the revisions that were added to the repository since the last time the script ran. Used like this, <command moreinfo=\"none\">svnadmin dump</command> can be one way to backup changes to your repository over time in case of a system crash or some other catastrophic event."
msgstr ""

#: ./build/en/book.xml:11639(para) 
msgid "The dump format can also be used to merge the contents of several different repositories into a single repository. By using the <option>--parent-dir</option> option of <command moreinfo=\"none\">svnadmin load</command>, you can specify a new virtual root directory for the load process. That means if you have dump files for three repositories, say <filename moreinfo=\"none\">calc-dumpfile</filename>, <filename moreinfo=\"none\">cal-dumpfile</filename>, and <filename moreinfo=\"none\">ss-dumpfile</filename>, you can first create a new repository to hold them all:"
msgstr ""

#: ./build/en/book.xml:11650(screen) 
#, no-wrap
msgid "\n$ svnadmin create /path/to/projects\n$\n"
msgstr ""

#: ./build/en/book.xml:11655(para) 
msgid "Then, make new directories in the repository which will encapsulate the contents of each of the three previous repositories:"
msgstr ""

#: ./build/en/book.xml:11659(screen) 
#, no-wrap
msgid "\n$ svn mkdir -m \"Initial project roots\" \\\n      file:///path/to/projects/calc \\\n      file:///path/to/projects/calendar \\\n      file:///path/to/projects/spreadsheet\nCommitted revision 1.\n$ \n"
msgstr ""

#: ./build/en/book.xml:11668(para) 
msgid "Lastly, load the individual dump files into their respective locations in the new repository:"
msgstr ""

#: ./build/en/book.xml:11671(screen) 
#, no-wrap
msgid "\n$ svnadmin load /path/to/projects --parent-dir calc &lt; calc-dumpfile\n…\n$ svnadmin load /path/to/projects --parent-dir calendar &lt; cal-dumpfile\n…\n$ svnadmin load /path/to/projects --parent-dir spreadsheet &lt; ss-dumpfile\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:11681(para) 
msgid "We'll mention one final way to use the Subversion repository dump format—conversion from a different storage mechanism or version control system altogether. Because the dump file format is, for the most part, human-readable, it should be relatively easy to describe generic sets of changes—each of which should be treated as a new revision—using this file format. In fact, the <command moreinfo=\"none\">cvs2svn</command> utility (see <xref linkend=\"svn.forcvs.convert\"/>) uses the dump format to represent the contents of a CVS repository so that those contents can be copied into a Subversion repository."
msgstr ""

#: ./build/en/book.xml:11696(title) 
msgid "Filtering Repository History"
msgstr ""

#: ./build/en/book.xml:11706(para) 
msgid "That's rather the reason you use version control at all, right?"
msgstr ""

#: ./build/en/book.xml:11715(para) 
msgid "Conscious, cautious removal of certain bits of versioned data is actually supported by real use-cases. That's why an <quote>obliterate</quote> feature has been one of the most highly requested Subversion features, and one which the Subversion developers hope to soon provide."
msgstr ""

#: ./build/en/book.xml:11698(para) 
msgid "Since Subversion stores your versioned history using, at the very least, binary differencing algorithms and data compression (optionally in a completely opaque database system), attempting manual tweaks is unwise, if not quite difficult, and at any rate strongly discouraged. And once data has been stored in your repository, Subversion generally doesn't provide an easy way to remove that data. <placeholder-1/> But inevitably, there will be times when you would like to manipulate the history of your repository. You might need to strip out all instances of a file that was accidentally added to the repository (and shouldn't be there for whatever reason). <placeholder-2/> Or, perhaps you have multiple projects sharing a single repository, and you decide to split them up into their own repositories. To accomplish tasks like this, administrators need a more manageable and malleable representation of the data in their repositories—the Subversion repository dump format."
msgstr ""

#: ./build/en/book.xml:11729(para) 
msgid "As we described in <xref linkend=\"svn.reposadmin.maint.migrate\"/>, the Subversion repository dump format is a human-readable representation of the changes that you've made to your versioned data over time. You use the <command moreinfo=\"none\">svnadmin dump</command> command to generate the dump data, and <command moreinfo=\"none\">svnadmin load</command> to populate a new repository with it (see <xref linkend=\"svn.reposadmin.maint.migrate\"/>). The great thing about the human-readability aspect of the dump format is that, if you aren't careless about it, you can manually inspect and modify it. Of course, the downside is that if you have three years' worth of repository activity encapsulated in what is likely to be a very large dump file, it could take you a long, long time to manually inspect and modify it."
msgstr ""

#: ./build/en/book.xml:11744(para) 
msgid "That's where <command moreinfo=\"none\">svndumpfilter</command> becomes useful. This program acts as path-based filter for repository dump streams. Simply give it either a list of paths you wish to keep, or a list of paths you wish to not keep, then pipe your repository dump data through this filter. The result will be a modified stream of dump data that contains only the versioned paths you (explicitly or implicitly) requested."
msgstr ""

#: ./build/en/book.xml:11753(para) 
msgid "Let's look a realistic example of how you might use this program. We discuss elsewhere (see <xref linkend=\"svn.reposadmin.projects.chooselayout\"/>) the process of deciding how to choose a layout for the data in your repositories—using one repository per project or combining them, arranging stuff within your repository, and so on. But sometimes after new revisions start flying in, you rethink your layout and would like to make some changes. A common change is the decision to move multiple projects which are sharing a single repository into separate repositories for each project."
msgstr ""

#: ./build/en/book.xml:11764(para) 
msgid "Our imaginary repository contains three projects: <literal moreinfo=\"none\">calc</literal>, <literal moreinfo=\"none\">calendar</literal>, and <literal moreinfo=\"none\">spreadsheet</literal>. They have been living side-by-side in a layout like this:"
msgstr ""

#: ./build/en/book.xml:11769(screen) 
#, no-wrap
msgid "\n/\n   calc/\n      trunk/\n      branches/\n      tags/\n   calendar/\n      trunk/\n      branches/\n      tags/\n   spreadsheet/\n      trunk/\n      branches/\n      tags/\n"
msgstr ""

#: ./build/en/book.xml:11785(para) 
msgid "To get these three projects into their own repositories, we first dump the whole repository:"
msgstr ""

#: ./build/en/book.xml:11788(screen) 
#, no-wrap
msgid "\n$ svnadmin dump /path/to/repos &gt; repos-dumpfile\n* Dumped revision 0.\n* Dumped revision 1.\n* Dumped revision 2.\n* Dumped revision 3.\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:11798(para) 
msgid "Next, run that dump file through the filter, each time including only one of our top-level directories, and resulting in three new dump files:"
msgstr ""

#: ./build/en/book.xml:11802(screen) 
#, no-wrap
msgid "\n$ svndumpfilter include calc &lt; repos-dumpfile &gt; calc-dumpfile\n…\n$ svndumpfilter include calendar &lt; repos-dumpfile &gt; cal-dumpfile\n…\n$ svndumpfilter include spreadsheet &lt; repos-dumpfile &gt; ss-dumpfile\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:11812(para) 
msgid "At this point, you have to make a decision. Each of your dump files will create a valid repository, but will preserve the paths exactly as they were in the original repository. This means that even though you would have a repository solely for your <literal moreinfo=\"none\">calc</literal> project, that repository would still have a top-level directory named <filename moreinfo=\"none\">calc</filename>. If you want your <filename moreinfo=\"none\">trunk</filename>, <filename moreinfo=\"none\">tags</filename>, and <filename moreinfo=\"none\">branches</filename> directories to live in the root of your repository, you might wish to edit your dump files, tweaking the <literal moreinfo=\"none\">Node-path</literal> and <literal moreinfo=\"none\">Node-copyfrom-path</literal> headers to no longer have that first <filename moreinfo=\"none\">calc/</filename> path component. Also, you'll want to remove the section of dump data that creates the <filename moreinfo=\"none\">calc</filename> directory. It will look something like:"
msgstr ""

#: ./build/en/book.xml:11829(screen) 
#, no-wrap
msgid "\nNode-path: calc\nNode-action: add\nNode-kind: dir\nContent-length: 0\n  \n"
msgstr ""

#: ./build/en/book.xml:11838(para) 
msgid "If you do plan on manually editing the dump file to remove a top-level directory, make sure that your editor is not set to automatically convert end-lines to the native format (e.g. \\r\\n to \\n) as the content will then not agree with the metadata. This will render the dump file useless."
msgstr ""

#: ./build/en/book.xml:11846(para) 
msgid "All that remains now is to create your three new repositories, and load each dump file into the right repository:"
msgstr ""

#: ./build/en/book.xml:11850(screen) 
#, no-wrap
msgid "\n$ svnadmin create calc; svnadmin load calc &lt; calc-dumpfile\n&lt;&lt;&lt; Started new transaction, based on original revision 1\n     * adding path : Makefile ... done.\n     * adding path : button.c ... done.\n…\n$ svnadmin create calendar; svnadmin load calendar &lt; cal-dumpfile\n&lt;&lt;&lt; Started new transaction, based on original revision 1\n     * adding path : Makefile ... done.\n     * adding path : cal.c ... done.\n…\n$ svnadmin create spreadsheet; svnadmin load spreadsheet &lt; ss-dumpfile\n&lt;&lt;&lt; Started new transaction, based on original revision 1\n     * adding path : Makefile ... done.\n     * adding path : ss.c ... done.\n…\n$\n"
msgstr ""

#: ./build/en/book.xml:11869(para) 
msgid "Both of <command moreinfo=\"none\">svndumpfilter</command>'s subcommands accept options for deciding how to deal with <quote>empty</quote> revisions. If a given revision contained only changes to paths that were filtered out, that now-empty revision could be considered uninteresting or even unwanted. So to give the user control over what to do with those revisions, <command moreinfo=\"none\">svndumpfilter</command> provides the following command-line options:"
msgstr ""

#: ./build/en/book.xml:11880(option) 
msgid "--drop-empty-revs"
msgstr ""

#: ./build/en/book.xml:11882(para) 
msgid "Do not generate empty revisions at all—just omit them."
msgstr ""

#: ./build/en/book.xml:11887(option) 
msgid "--renumber-revs"
msgstr ""

#: ./build/en/book.xml:11889(para) 
msgid "If empty revisions are dropped (using the <option>--drop-empty-revs</option> option), change the revision numbers of the remaining revisions so that there are no gaps in the numeric sequence."
msgstr ""

#: ./build/en/book.xml:11896(option) 
msgid "--preserve-revprops"
msgstr ""

#: ./build/en/book.xml:11898(para) 
msgid "If empty revisions are not dropped, preserve the revision properties (log message, author, date, custom properties, etc.) for those empty revisions. Otherwise, empty revisions will only contain the original datestamp, and a generated log message that indicates that this revision was emptied by <command moreinfo=\"none\">svndumpfilter</command>."
msgstr ""

#: ./build/en/book.xml:11909(para) 
msgid "While <command moreinfo=\"none\">svndumpfilter</command> can be very useful, and a huge timesaver, there are unfortunately a couple of gotchas. First, this utility is overly sensitive to path semantics. Pay attention to whether paths in your dump file are specified with or without leading slashes. You'll want to look at the <literal moreinfo=\"none\">Node-path</literal> and <literal moreinfo=\"none\">Node-copyfrom-path</literal> headers."
msgstr ""

#: ./build/en/book.xml:11917(screen) 
#, no-wrap
msgid "\n…\nNode-path: spreadsheet/Makefile\n…\n"
msgstr ""

#: ./build/en/book.xml:11930(para) 
msgid "While <command moreinfo=\"none\">svnadmin dump</command> has a consistent leading slash policy—to not include them—other programs which generate dump data might not be so consistent."
msgstr ""

#: ./build/en/book.xml:11923(para) 
msgid "If the paths have leading slashes, you should include leading slashes in the paths you pass to <command moreinfo=\"none\">svndumpfilter include</command> and <command moreinfo=\"none\">svndumpfilter exclude</command> (and if they don't, you shouldn't). Further, if your dump file has an inconsistent usage of leading slashes for some reason, <placeholder-1/> you should probably normalize those paths so they all have, or lack, leading slashes."
msgstr ""

#: ./build/en/book.xml:11938(para) 
msgid "Also, copied paths can give you some trouble. Subversion supports copy operations in the repository, where a new path is created by copying some already existing path. It is possible that at some point in the lifetime of your repository, you might have copied a file or directory from some location that <command moreinfo=\"none\">svndumpfilter</command> is excluding, to a location that it is including. In order to make the dump data self-sufficient, <command moreinfo=\"none\">svndumpfilter</command> needs to still show the addition of the new path—including the contents of any files created by the copy—and not represent that addition as a copy from a source that won't exist in your filtered dump data stream. But because the Subversion repository dump format only shows what was changed in each revision, the contents of the copy source might not be readily available. If you suspect that you have any copies of this sort in your repository, you might want to rethink your set of included/excluded paths."
msgstr ""

#: ./build/en/book.xml:11957(para) 
msgid "Finally, <command moreinfo=\"none\">svndumpfilter</command> takes path filtering quite literally. If you are trying to copy the history of a project rooted at <filename moreinfo=\"none\">trunk/my-project</filename> and move it into a repository of its own, you would, of course, use the <command moreinfo=\"none\">svndumpfilter include</command> command to keep all the changes in and under <filename moreinfo=\"none\">trunk/my-project</filename>. But the resulting dump file makes no assumptions about the repository into which you plan to load this data. Specifically, the dump data might begin with the revision which added the <filename moreinfo=\"none\">trunk/my-project</filename> directory, but it will <emphasis>not</emphasis> contain directives which would create the <filename moreinfo=\"none\">trunk</filename> directory itself (because <filename moreinfo=\"none\">trunk</filename> doesn't match the include filter). You'll need to make sure that any directories which the new dump stream expect to exist actually do exist in the target repository before trying to load the stream into that repository."
msgstr ""

#: ./build/en/book.xml:11981(title) 
msgid "Repository Replication"
msgstr ""

#: ./build/en/book.xml:11983(para) 
msgid "There are several scenarios in which it is quite handy to have a Subversion repository whose version history is exactly the same as some other repository's. Perhaps the most obvious one is the maintenance of a simple backup repository, used when the primary repository has become inaccessible due to a hardware failure, network outage, or other such annoyance. Other scenarios include deploying mirror repositories to distribute heavy Subversion load across multiple servers, use as a soft-upgrade mechanism, and so on."
msgstr ""

#: ./build/en/book.xml:11993(para) 
msgid "As of version 1.4, Subversion provides a program for managing scenarios like these—<command moreinfo=\"none\">svnsync</command>. <command moreinfo=\"none\">svnsync</command> works by essentially asking the Subversion server to <quote>replay</quote> revisions, one at a time. It then uses that revision information to mimic a commit of the same to another repository. Neither repository needs to be locally accessible to machine on which <command moreinfo=\"none\">svnsync</command> is running—its parameters are repository URLs, and it does all its work through Subversion's repository access (RA) interfaces. All it requires is read access to the source repository and read/write access to the destination repository."
msgstr ""

#: ./build/en/book.xml:12008(para) 
msgid "When using <command moreinfo=\"none\">svnsync</command> against a remote source repository, the Subversion server for that repository must be running Subversion version 1.4 or better."
msgstr ""

#: ./build/en/book.xml:12026(para) 
msgid "In fact, it can't truly be read-only, or <command moreinfo=\"none\">svnsync</command> itself would have a tough time copying revision history into it."
msgstr ""

#: ./build/en/book.xml:12013(para) 
msgid "Assuming you already have a source repository that you'd like to mirror, the next thing you need is an empty target repository which will actually serve as that mirror. This target repository can use either of the available filesystem data-store back-ends (see <xref linkend=\"svn.reposadmin.basics.backends\"/>), but it must not yet have any version history in it. The protocol via which <command moreinfo=\"none\">svnsync</command> communicates revision information is highly sensitive to mismatches between the versioned histories contained in the source and target repositories. For this reason, while <command moreinfo=\"none\">svnsync</command> cannot <emphasis>demand</emphasis> that the target repository be read-only, <placeholder-1/> allowing the revision history in the target repository to change by any mechanism other than the mirroring process is a recipe for disaster."
msgstr ""

#: ./build/en/book.xml:12035(para) 
msgid "Do <emphasis>not</emphasis> modify a mirror repository in such a way as to cause its version history to deviate from that of the repository it mirrors. The only commits and revision property modifications that ever occur on that mirror repository should be those performed by the <command moreinfo=\"none\">svnsync</command> tool."
msgstr ""

#: ./build/en/book.xml:12043(para) 
msgid "Another requirement of the target repository is that the <command moreinfo=\"none\">svnsync</command> process be allowed to modify certain revision properties. <command moreinfo=\"none\">svnsync</command> stores its bookkeeping information in special revision properties on revision 0 of the destination repository. Because <command moreinfo=\"none\">svnsync</command> works within the framework of that repository's hook system, the default state of the repository (which is to disallow revision property changes; see <xref linkend=\"svn.ref.reposhooks.pre-revprop-change\"/>) is insufficient. You'll need to explicitly implement the pre-revprop-change hook, and your script must allow <command moreinfo=\"none\">svnsync</command> to set and change its special properties. With those provisions in place, you are ready to start mirroring repository revisions."
msgstr ""

#: ./build/en/book.xml:12059(para) 
msgid "It's a good idea to implement authorization measures which allow your repository replication process to perform its tasks while preventing other users from modifying the contents of your mirror repository at all."
msgstr ""

#: ./build/en/book.xml:12065(para) 
msgid "Let's walk through the use of <command moreinfo=\"none\">svnsync</command> in a somewhat typical mirroring scenario. We'll pepper this discourse with practical recommendations which you are free to disregard if they aren't required by or suitable for your environment."
msgstr ""

#: ./build/en/book.xml:12071(para) 
msgid "As a service to the fine developers of our favorite version control system, we will be mirroring the public Subversion source code repository and exposing that mirror publicly on the Internet, hosted on a different machine than the one on which the original Subversion source code repository lives. This remote host has a global configuration which permits anonymous users to read the contents of repositories on the host, but requires users to authenticate in order to modify those repositories. (Please forgive us for glossing over the details of Subversion server configuration for the moment—those are covered thoroughly in <xref linkend=\"svn.serverconfig\"/>.) And for no other reason than that it makes for a more interesting example, we'll be driving the replication process from a third machine, the one which we currently find ourselves using."
msgstr ""

#: ./build/en/book.xml:12086(para) 
msgid "First, we'll create the repository which will be our mirror. This and the next couple of steps do require shell access to the machine on which the mirror repository will live. Once the repository is all configured, though, we shouldn't need to touch it directly again."
msgstr ""

#: ./build/en/book.xml:12092(screen) 
#, no-wrap
msgid "\n$ ssh admin@svn.example.com \\\n      \"svnadmin create /path/to/repositories/svn-mirror\"\nadmin@svn.example.com's password: ********\n$\n"
msgstr ""

#: ./build/en/book.xml:12099(para) 
msgid "At this point, we have our repository, and due to our server's configuration, that repository is now <quote>live</quote> on the Internet. Now, because we don't want anything modifying the repository except our replication process, we need a way to distinguish that process from other would-be committers. To do so, we use a dedicated username for our process. Only commits and revision property modifications performed by the special username <literal moreinfo=\"none\">syncuser</literal> will be allowed."
msgstr ""

#: ./build/en/book.xml:12109(para) 
msgid "We'll use the repository's hook system both to allow the replication process to do what it needs to do, and to enforce that only it is doing those things. We accomplish this by implementing two of the repository event hooks—pre-revprop-change and start-commit. Our <filename moreinfo=\"none\">pre-revprop-change</filename> hook script is found in <xref linkend=\"svn.reposadmin.maint.replication.pre-revprop-change\"/>, and basically verifies that the user attempting the property changes is our <literal moreinfo=\"none\">syncuser</literal> user. If so, the change is allowed; otherwise, it is denied."
msgstr ""

#: ./build/en/book.xml:12120(title) 
msgid "Mirror repository's pre-revprop-change hook script"
msgstr ""

#: ./build/en/book.xml:12122(programlisting) 
#, no-wrap
msgid "\n#!/bin/sh \n\nUSER=\"$3\"\n\nif [ \"$USER\" = \"syncuser\" ]; then exit 0; fi\n\necho \"Only the syncuser user may change revision properties\" &gt;&amp;2\nexit 1\n"
msgstr ""

#: ./build/en/book.xml:12134(para) 
msgid "That covers revision property changes. Now we need to ensure that only the <literal moreinfo=\"none\">syncuser</literal> user is permitted to commit new revisions to the repository. We do this using a <filename moreinfo=\"none\">start-commit</filename> hook scripts like the one in <xref linkend=\"svn.reposadmin.maint.replication.start-commit\"/>."
msgstr ""

#: ./build/en/book.xml:12141(title) 
msgid "Mirror repository's start-commit hook script"
msgstr ""

#: ./build/en/book.xml:12143(programlisting) 
#, no-wrap
msgid "\n#!/bin/sh \n\nUSER=\"$2\"\n\nif [ \"$USER\" = \"syncuser\" ]; then exit 0; fi\n\necho \"Only the syncuser user may commit new revisions\" &gt;&amp;2\nexit 1\n"
msgstr ""

#: ./build/en/book.xml:12155(para) 
msgid "After installing our hook scripts and ensuring that they are executable by the Subversion server, we're finished with the setup of the mirror repository. Now, we get to actually do the mirroring."
msgstr ""

#: ./build/en/book.xml:12160(para) 
msgid "The first thing we need to do with <command moreinfo=\"none\">svnsync</command> is to register in our target repository the fact that it will be a mirror of the source repository. We do this using the <command moreinfo=\"none\">svnsync initialize</command> subcommand. Note that the various <command moreinfo=\"none\">svnsync</command> subcommands provide several of the same authentication-related options that <command moreinfo=\"none\">svn</command> does: <option>--username</option>, <option>--password</option>, <option>--non-interactive</option>, <option>--config-dir</option>, and <option>--no-auth-cache</option>."
msgstr ""

#: ./build/en/book.xml:12173(screen) 
#, no-wrap
msgid "\n$ svnsync help init\ninitialize (init): usage: svnsync initialize DEST_URL SOURCE_URL\n\nInitialize a destination repository for synchronization from\nanother repository.\n\nThe destination URL must point to the root of a repository with\nno committed revisions.  The destination repository must allow\nrevision property changes.\n\nYou should not commit to, or make revision property changes in,\nthe destination repository by any method other than 'svnsync'.\nIn other words, the destination repository should be a read-only\nmirror of the source repository.\n\nValid options:\n  --non-interactive        : do no interactive prompting\n  --no-auth-cache          : do not cache authentication tokens\n  --username arg           : specify a username ARG\n  --password arg           : specify a password ARG\n  --config-dir arg         : read user configuration files from directory ARG\n\n$ svnsync initialize http://svn.example.com/svn-mirror \\\n                     http://svn.collab.net/repos/svn \\\n                     --username syncuser --password syncpass\nCopied properties for revision 0.\n$\n"
msgstr ""

#: ./build/en/book.xml:12203(para) 
msgid "Our target repository will now remember that it is a mirror of the public Subversion source code repository. Notice that we provided a username and password as arguments to <command moreinfo=\"none\">svnsync</command>—that was required by the pre-revprop-change hook on our mirror repository."
msgstr ""

#: ./build/en/book.xml:12210(para) 
msgid "The URLs provided to <command moreinfo=\"none\">svnsync</command> must point to the root directories of the target and source repositories, respectively. The tool does not handle mirroring of repository subtrees."
msgstr ""

#: ./build/en/book.xml:12217(para) 
msgid "The initial release of <command moreinfo=\"none\">svnsync</command> (in Subversion 1.4) has a small shortcoming—the values given to the <option>--username</option> and <option>--password</option> command-line options get used for authentication against both the source and destination repositories. Obviously, there's no guarantee that the synchronizing user's credentials are the same in both places. In the event that they are not the same, users trying to run <command moreinfo=\"none\">svnsync</command> in non-interactive mode (with the <option>--non-interactive</option> option) might experience problems."
msgstr ""

#: ./build/en/book.xml:12235(para) 
msgid "Be forewarned that while it will take only a few seconds for the average reader to parse this paragraph and the sample output which follows it, the actual time required to complete such a mirroring operation is, shall we say, quite a bit longer."
msgstr ""

#: ./build/en/book.xml:12230(para) 
msgid "And now comes the fun part. With a single subcommand, we can tell <command moreinfo=\"none\">svnsync</command> to copy all the as-yet-unmirrored revisions from the source repository to the target. <placeholder-1/> The <command moreinfo=\"none\">svnsync synchronize</command> subcommand will peek into the special revision properties previously stored on the target repository, and determine what repository it is mirroring and that the most recently mirrored revision was revision 0. Then it will query the source repository and determine what the latest revision in that repository is. Finally, it asks the source repository's server to start replaying all the revisions between 0 and that latest revision. As <command moreinfo=\"none\">svnsync</command> get the resulting response from the source repository's server, it begins forwarding those revisions to the target repository's server as new commits."
msgstr ""

#: ./build/en/book.xml:12254(screen) 
#, no-wrap
msgid "\n$ svnsync help synchronize\nsynchronize (sync): usage: svnsync synchronize DEST_URL\n\nTransfer all pending revisions from source to destination.\n…\n$ svnsync synchronize http://svn.example.com/svn-mirror \\\n                      --username syncuser --password syncpass\nCommitted revision 1.\nCopied properties for revision 1.\nCommitted revision 2.\nCopied properties for revision 2.\nCommitted revision 3.\nCopied properties for revision 3.\n…\nCommitted revision 23406.\nCopied properties for revision 23406.\nCommitted revision 23407.\nCopied properties for revision 23407.\nCommitted revision 23408.\nCopied properties for revision 23408.\n"
msgstr ""

#: ./build/en/book.xml:12277(para) 
msgid "Of particular interest here is that for each mirrored revision, there is first a commit of that revision to the target repository, and then property changes follow. This is because the initial commit is performed by (and attributed to) the user <literal moreinfo=\"none\">syncuser</literal>, and datestamped with the time as of that revision's creation. Also, Subversion's underlying repository access interfaces don't provide a mechanism for setting arbitary revision properties as part of a commit. So <command moreinfo=\"none\">svnsync</command> follows up with an immediate series of property modifications which copy all the revision properties found for that revision in the source repository into the target repository. This also has the effect of fixing the author and datestamp of the revision to match that of the source repository."
msgstr ""

#: ./build/en/book.xml:12292(para) 
msgid "Also noteworthy is that <command moreinfo=\"none\">svnsync</command> performs careful bookkeeping that allows it to be safely interrupted and restarted without ruining the integrity of the mirrored data. If a network glitch occurs while mirroring a repository, simply repeat the <command moreinfo=\"none\">svnsync synchronize</command> command and it will happily pick up right where it left off. In fact, as new revisions appear in the source repository, this is exactly what you to do in order to keep your mirror up-to-date."
msgstr ""

#: ./build/en/book.xml:12302(para) 
msgid "There is, however, one bit of inelegance in the process. Because Subversion revision properties can be changed at any time throughout the lifetime of the repository, and don't leave an audit trail that indicates when they were changed, replication processes have to pay special attention to them. If you've already mirror the first 15 revisions of a repository and someone then changes a revision property on revision 12, <command moreinfo=\"none\">svnsync</command> won't know to go back and patch up its copy of revision 12. You'll need to tell it to do so manually by using (or with some additionally tooling around) the <command moreinfo=\"none\">svnsync copy-revprops</command> subcommand, which simply re-replicates all the revision properties for a particular revision."
msgstr ""

#: ./build/en/book.xml:12316(screen) 
#, no-wrap
msgid "\n$ svnsync help copy-revprops\ncopy-revprops: usage: svnsync copy-revprops DEST_URL REV\n\nCopy all revision properties for revision REV from source to\ndestination.\n…\n$ svnsync copy-revprops http://svn.example.com/svn-mirror 12 \\\n                        --username syncuser --password syncpass\nCopied properties for revision 12.\n$\n"
msgstr ""

#: ./build/en/book.xml:12329(para) 
msgid "That's repository replication in a nutshell. You'll likely want some automation around such a process. For example, while our example was a pull-and-push setup, you might wish to have your primary repository push changes to one or more blessed mirrors as part of its post-commit and post-revprop-change hook implementations. This would enable the mirror to be up-to-date in as near to realtime as is likely possible."
msgstr ""

#: ./build/en/book.xml:12338(para) 
msgid "Also, while it isn't very commonplace to do so, <command moreinfo=\"none\">svnsync</command> does gracefully mirror repositories in which the user as whom it authenticates only has partial read access. It simply copies only the bits of the repository that it is permitted to see. Obviously such a mirror is not useful as a backup solution."
msgstr ""

#: ./build/en/book.xml:12345(para) 
msgid "As far as user interaction with repositories and mirrors goes, it <emphasis>is</emphasis> possible to have a single working copy that interacts with both, but you'll have to jump through some hoops to make it happen. First, you need to ensure that both the primary and mirror repositories have the same repository UUID (which is not the case by default). You can set the mirror repository's UUID by loading a dump file stub into it which contains the UUID of the primary repository, like so:"
msgstr ""

#: ./build/en/book.xml:12355(screen) 
#, no-wrap
msgid "\n$ cat - &lt;&lt;EOF | svnadmin load --force-uuid dest\nSVN-fs-dump-format-version: 2\n\nUUID: 65390229-12b7-0310-b90b-f21a5aa7ec8e\nEOF\n$\n"
msgstr ""

#: ./build/en/book.xml:12364(para) 
msgid "Now that the two repositories have the same UUID, you can use <command moreinfo=\"none\">svn switch --relocate</command> to point your working copy to whichever of the repositories you wish to operate against, a process which is described in <xref linkend=\"svn.ref.svn.c.switch\"/>. There is a possible danger here, though, in that if the primary and mirror repositories aren't in close synchronization, a working copy up-to-date with and pointing to the primary repository will, if relocated to point to an out-of-date mirror, become confused about the apparent sudden loss of revisions it fully expects to be present."
msgstr ""

#: ./build/en/book.xml:12375(para) 
msgid "Finally, be aware that the revision-based replication provided by <command moreinfo=\"none\">svnsync</command> is only that—replication of revisions. It does not include such things as the hook implementations, repository or server configuration data, uncommitted transactions, or information about user locks on repository paths. Only information carried by the Subversion repository dump file format is available for replication."
msgstr ""

#: ./build/en/book.xml:12388(title) 
msgid "Repository Backup"
msgstr ""

#: ./build/en/book.xml:12390(para) 
msgid "Despite numerous advances in technology since the birth of the modern computer, one thing unfortunately rings true with crystalline clarity—sometimes, things go very, very awry. Power outages, network connectivity dropouts, corrupt RAM and crashed hard drives are but a taste of the evil that Fate is poised to unleash on even the most conscientious administrator. And so we arrive at a very important topic—how to make backup copies of your repository data."
msgstr ""

#: ./build/en/book.xml:12400(para) 
msgid "There are two types of backup methods available for Subversion repository administrators—full and incremental. A full backup of the repository involves squirreling away in one sweeping action all the information required to fully reconstruct that repository in the event of a catastrophe. Usually, it means quite literally the duplication of the entire repository directory (which includes either a Berkeley DB or FSFS environment). Incremental backups are lesser things, backups of only the portion of the repository data that has changed since the previous backup."
msgstr ""

#: ./build/en/book.xml:12412(para) 
msgid "As far as full backups go, the naive approach might seem like a sane one, but unless you temporarily disable all other access to your repository, simply doing a recursive directory copy runs the risk of generating a faulty backup. In the case of Berkeley DB, the documentation describes a certain order in which database files can be copied that will guarantee a valid backup copy. A similar ordering exists for FSFS data. But you don't have to implement these algorithms yourself, because the Subversion development team has already done so. The <command moreinfo=\"none\">svnadmin hotcopy</command> command takes care of the minutia involved in making a hot backup of your repository. And its invocation is as trivial as Unix's <command moreinfo=\"none\">cp</command> or Windows' <command moreinfo=\"none\">copy</command> operations:"
msgstr ""

#: ./build/en/book.xml:12427(screen) 
#, no-wrap
msgid "\n$ svnadmin hotcopy /path/to/repos /path/to/repos-backup\n"
msgstr ""

#: ./build/en/book.xml:12431(para) 
msgid "The resulting backup is a fully functional Subversion repository, able to be dropped in as a replacement for your live repository should something go horribly wrong."
msgstr ""

#: ./build/en/book.xml:12435(para) 
msgid "When making copies of a Berkeley DB repository, you can even instruct <command moreinfo=\"none\">svnadmin hotcopy</command> to purge any unused Berkeley DB logfiles (see <xref linkend=\"svn.reposadmin.maint.diskspace.bdblogs\"/>) from the original repository upon completion of the copy. Simply provide the <option>--clean-logs</option> option on the command-line."
msgstr ""

#: ./build/en/book.xml:12442(screen) 
#, no-wrap
msgid "\n$ svnadmin hotcopy --clean-logs /path/to/bdb-repos /path/to/bdb-repos-backup\n"
msgstr ""

#: ./build/en/book.xml:12446(para) 
msgid "Additional tooling around this command is available, too. The <filename moreinfo=\"none\">tools/backup/</filename> directory of the Subversion source distribution holds the <command moreinfo=\"none\">hot-backup.py</command> script. This script adds a bit of backup management atop <command moreinfo=\"none\">svnadmin hotcopy</command>, allowing you to keep only the most recent configured number of backups of each repository. It will automatically manage the names of the backed-up repository directories to avoid collisions with previous backups, and will <quote>rotate off</quote> older backups, deleting them so only the most recent ones remain. Even if you also have an incremental backup, you might want to run this program on a regular basis. For example, you might consider using <command moreinfo=\"none\">hot-backup.py</command> from a program scheduler (such as <command moreinfo=\"none\">cron</command> on Unix systems) which will cause it to run nightly (or at whatever granularity of Time you deem safe enough for you)."
msgstr ""

#: ./build/en/book.xml:12464(para) 
msgid "Some administrators use a different backup mechanism built around generating and storing repository dump data. We described in <xref linkend=\"svn.reposadmin.maint.migrate\"/> how to use <command moreinfo=\"none\">svnadmin dump --incremental</command> to perform an incremental backup of a given revision or range of revisions. And of course, there is a full backup variation of this achieved by omitting the <option>--incremental</option> option to that command. There is some value in these methods in that the format of your backed-up information is flexible—it's not tied to a particular platform, versioned filesystem type, or release of Subversion or Berkeley DB. But that flexibility comes at a cost, namely that restoring that data can take a long time—longer with each new revision committed to your repository. Also, as is the case with so many of the various backup methods, revision property changes made to already-backed-up revisions won't get picked up by a non-overlapping, incremental dump generation. For these reasons, we recommend against relying solely on dump-based backup approaches."
msgstr ""

#: ./build/en/book.xml:12484(para) 
msgid "As you can see, each of the various backup types and methods has its advantages and disadvantages. The easiest is by far the full hot backup, which will always result in a perfect working replica of your repository. Should something bad happen to your live repository, you can restore from the backup with a simple recursive directory copy. Unfortunately, if you are maintaining multiple backups of your repository, these full copies will each eat up just as much disk space as your live repository. Incremental backups, by contrast, tend to be quicker to generate and smaller to store. But the restoration process can be a pain, often involving applying multiple incremental backups. And other methods have their own peculiarities. Administators need to find the balance between the cost of making the backup and the cost of restoring it."
msgstr ""

#: ./build/en/book.xml:12500(para) 
msgid "The <command moreinfo=\"none\">svnsync</command> program (see <xref linkend=\"svn.reposadmin.maint.replication\"/>) actually provides a rather handy middle-ground approach. If you are regularly synchronizing a read-only mirror with your main repository, then in a pinch, your read-only mirror is probably a good candidate for replacing that main repository if it falls over. The primary disadvantage of this method is that only the versioned repository data gets synchronized—repository configuration files, user-specified repository path locks, and other items which might live in the physical repository directory but not <emphasis>inside</emphasis> the repository's virtual versioned filesystem are not handled by svnsync."
msgstr ""

#: ./build/en/book.xml:12520(para) 
msgid "<command moreinfo=\"none\">svnadmin setlog</command> can be called in a way that bypasses the hook interface altogether."
msgstr ""

#: ./build/en/book.xml:12513(para) 
msgid "In any backup scenario, repository administrators need to be aware of how modifications to unversioned revision properties affect their backups. Since these changes do not themselves generate new revisions, they will not trigger post-commit hooks, and may not even trigger the pre-revprop-change and post-revprop-change hooks. <placeholder-1/> And since you can change revision properties without respect to chronological order—you can change any revision's properties at any time—an incremental backup of the latest few revisions might not catch a property modification to a revision that was included as part of a previous backup."
msgstr ""

#: ./build/en/book.xml:12530(para) 
msgid "Generally speaking, only the truly paranoid would need to backup their entire repository, say, every time a commit occurred. However, assuming that a given repository has some other redundancy mechanism in place with relatively fine granularity (like per-commit emails or incremental dumps), a hot backup of the database might be something that a repository administrator would want to include as part of a system-wide nightly backup. It's your data—protect it as much as you'd like."
msgstr ""

#: ./build/en/book.xml:12555(para) 
msgid "You know—the collective term for all of her <quote>fickle fingers</quote>."
msgstr ""

#: ./build/en/book.xml:12540(para) 
msgid "Often, the best approach to repository backups is a diversified one which leverages combinations of the methods described here. The Subversion developers, for example, back up the Subversion source code repository nightly using <command moreinfo=\"none\">hot-backup.py</command> and an offsite <command moreinfo=\"none\">rsync</command> of those full backups; keep multiple archives of all the commit and property change notification emails; and have repository mirrors maintained by various volunteers using <command moreinfo=\"none\">svnsync</command>. Your solution might be similar, but should be catered to your needs and that delicate balance of convenience with paranoia. And whatever you do, validate your backups from time to time—what good is a spare tire that has a hole in it? While all of this might not save your hardware from the iron fist of Fate, <placeholder-1/> it should certainly help you recover from those trying times."
msgstr ""

#: ./build/en/book.xml:12571(para) 
msgid "By now you should have a basic understanding of how to create, configure, and maintain Subversion repositories. We've introduced you to the various tools that will assist you with this task. Throughout the chapter, we've noted common administration pitfalls, and suggestions for avoiding them."
msgstr ""

#: ./build/en/book.xml:12578(para) 
msgid "All that remains is for you to decide what exciting data to store in your repository, and finally, how to make it available over a network. The next chapter is all about networking."
msgstr ""

#: ./build/en/book.xml:12592(title) 
msgid "Server Configuration"
msgstr ""

#: ./build/en/book.xml:12594(para) 
msgid "A Subversion repository can be accessed simultaneously by clients running on the same machine on which the repository resides using the <literal moreinfo=\"none\">file://</literal> method. But the typical Subversion setup involves a single server machine being accessed from clients on computers all over the office—or, perhaps, all over the world."
msgstr ""

#: ./build/en/book.xml:12601(para) 
msgid "This chapter describes how to get your Subversion repository exposed outside its host machine for use by remote clients. We will cover Subversion's currently available server mechanisms, discussing the configuration and use of each. After reading this section, you should be able to decide which networking setup is right for your needs, and understand how to enable such a setup on your host computer."
msgstr ""

#: ./build/en/book.xml:12615(title) 
msgid "Overview"
msgstr ""

#: ./build/en/book.xml:12617(para) 
msgid "Subversion was designed with an abstract network layer. This means that a repository can be programmatically accessed by any sort of server process, and the client <quote>repository access</quote> API allows programmers to write plugins that speak relevant network protocols. In theory, Subversion can use an infinite number of network implementations. In practice, there are only two servers at the time of this writing."
msgstr ""

#: ./build/en/book.xml:12625(para) 
msgid "Apache is an extremely popular webserver; using the <command moreinfo=\"none\">mod_dav_svn</command> module, Apache can access a repository and make it available to clients via the WebDAV/DeltaV protocol, which is an extension of HTTP. Because Apache is an extremely extensible web server, it provides a number of features <quote>for free</quote>, such as encrypted SSL communication, logging, integration with a number of third-party authentication systems, and limited built-in web browsing of repositories."
msgstr ""

#: ./build/en/book.xml:12635(para) 
msgid "In the other corner is <command moreinfo=\"none\">svnserve</command>: a small, lightweight server program that speaks a custom protocol with clients. Because its protocol is explicitly designed for Subversion and is stateful (unlike HTTP), it provides significantly faster network operations—but at the cost of some features as well. It only understands CRAM-MD5 authentication, has no logging, no web-browsing, and no option to encrypt network traffic. It is, however, extremely easy to set up and is often the best option for small teams just starting out with Subversion."
msgstr ""

#: ./build/en/book.xml:12646(para) 
msgid "A third option is to use <command moreinfo=\"none\">svnserve</command> tunneled over an SSH connection. Even though this scenario still uses <command moreinfo=\"none\">svnserve</command>, it differs quite a bit in features from a traditional <command moreinfo=\"none\">svnserve</command> deployment. SSH is used to encrypt all communication. SSH is also used exclusively to authenticate, so real system accounts are required on the server host (unlike vanilla <command moreinfo=\"none\">svnserve</command>, which has its own private user accounts.) Finally, because this setup requires that each user spawn a private, temporary <command moreinfo=\"none\">svnserve</command> process, it's equivalent (from a permissions point of view) to allowing a group of local users to all access the repository via <literal moreinfo=\"none\">file://</literal> URLs. Path-based access control has no meaning, since each user is accessing the repository database files directly."
msgstr ""

#: ./build/en/book.xml:12662(para) 
msgid "Here's a quick summary of the three typical server deployments."
msgstr ""

#: ./build/en/book.xml:12666(title) 
msgid "Comparison of Subversion Server Options"
msgstr ""

#: ./build/en/book.xml:12671(entry) 
msgid "Apache + mod_dav_svn"
msgstr ""

#: ./build/en/book.xml:12673(entry) 
msgid "svnserve over SSH"
msgstr ""

#: ./build/en/book.xml:12678(entry) 
msgid "Authentication options"
msgstr ""

#: ./build/en/book.xml:12679(entry) 
msgid "HTTP(S) basic auth, X.509 certificates, LDAP, NTLM, or any other mechanism available to Apache httpd"
msgstr ""

#: ./build/en/book.xml:12681(entry) 
msgid "CRAM-MD5"
msgstr ""

#: ./build/en/book.xml:12682(entry) 
msgid "SSH"
msgstr ""

#: ./build/en/book.xml:12686(entry) 
msgid "User account options"
msgstr ""

#: ./build/en/book.xml:12687(entry) ./build/en/book.xml:12688(entry) 
msgid "private 'users' file"
msgstr ""

#: ./build/en/book.xml:12689(entry) 
msgid "system accounts"
msgstr ""

#: ./build/en/book.xml:12693(entry) 
msgid "Authorization options"
msgstr ""

#: ./build/en/book.xml:12694(entry) ./build/en/book.xml:12696(entry) 
msgid "read/write access can be granted over whole repository, or specified per-path."
msgstr ""

#: ./build/en/book.xml:12698(entry) 
msgid "read/write access only grantable over whole repository"
msgstr ""

#: ./build/en/book.xml:12703(entry) 
msgid "Encryption"
msgstr ""

#: ./build/en/book.xml:12704(entry) 
msgid "via optional SSL"
msgstr ""

#: ./build/en/book.xml:12705(entry) 
msgid "none"
msgstr ""

#: ./build/en/book.xml:12706(entry) 
msgid "SSH tunneled"
msgstr ""

#: ./build/en/book.xml:12710(entry) 
msgid "Logging"
msgstr ""

#: ./build/en/book.xml:12712(quote) 
msgid "high-level"
msgstr ""

#: ./build/en/book.xml:12711(entry) 
msgid "full Apache logs of each HTTP request, with optional <placeholder-1/> logging of general client operations"
msgstr ""

#: ./build/en/book.xml:12714(entry) ./build/en/book.xml:12715(entry) 
msgid "no logging"
msgstr ""

#: ./build/en/book.xml:12719(entry) 
msgid "Interoperability"
msgstr ""

#: ./build/en/book.xml:12720(entry) 
msgid "partially usable by other WebDAV clients"
msgstr ""

#: ./build/en/book.xml:12721(entry) ./build/en/book.xml:12722(entry) 
msgid "only talks to svn clients"
msgstr ""

#: ./build/en/book.xml:12726(entry) 
msgid "Web viewing"
msgstr ""

#: ./build/en/book.xml:12727(entry) 
msgid "limited built-in support, or via 3rd-party tools such as ViewVC"
msgstr ""

#: ./build/en/book.xml:12729(entry) ./build/en/book.xml:12730(entry) 
msgid "only via 3rd-party tools such as ViewVC"
msgstr ""

#: ./build/en/book.xml:12734(entry) 
msgid "Speed"
msgstr ""

#: ./build/en/book.xml:12735(entry) 
msgid "somewhat slower"
msgstr ""

#: ./build/en/book.xml:12736(entry) ./build/en/book.xml:12737(entry) 
msgid "somewhat faster"
msgstr ""

#: ./build/en/book.xml:12741(entry) ./build/en/book.xml:13603(title) 
msgid "Initial setup"
msgstr ""

#: ./build/en/book.xml:12742(entry) 
msgid "somewhat complex"
msgstr ""

#: ./build/en/book.xml:12743(entry) 
msgid "extremely simple"
msgstr ""

#: ./build/en/book.xml:12744(entry) 
msgid "moderately simple"
msgstr ""

#: ./build/en/book.xml:12755(title) 
msgid "Choosing a Server Configuration"
msgstr ""

#: ./build/en/book.xml:12757(para) 
msgid "So, which server should you use? Which is best?"
msgstr ""

#: ./build/en/book.xml:12759(para) 
msgid "Obviously, there's no right answer to that question. Every team has different needs, and the different servers all represent different sets of tradeoffs. The Subversion project itself doesn't endorse one server or another, or consider either server more <quote>official</quote> than another."
msgstr ""

#: ./build/en/book.xml:12765(para) 
msgid "Here are some reasons why you might choose one deployment over another, as well as reasons you might <emphasis>not</emphasis> choose one."
msgstr ""

#: ./build/en/book.xml:12771(title) 
msgid "The <command moreinfo=\"none\">svnserve</command> Server"
msgstr ""

#: ./build/en/book.xml:12775(term) ./build/en/book.xml:12826(term) ./build/en/book.xml:12874(term) 
msgid "Why you might want to use it:"
msgstr ""

#: ./build/en/book.xml:12779(para) 
msgid "Quick and easy to set up."
msgstr ""

#: ./build/en/book.xml:12782(para) ./build/en/book.xml:12830(para) 
msgid "Network protocol is stateful and noticeably faster than WebDAV."
msgstr ""

#: ./build/en/book.xml:12785(para) ./build/en/book.xml:12882(para) 
msgid "No need to create system accounts on server."
msgstr ""

#: ./build/en/book.xml:12788(para) 
msgid "Password is not passed over the network."
msgstr ""

#: ./build/en/book.xml:12796(term) ./build/en/book.xml:12844(term) ./build/en/book.xml:12905(term) 
msgid "Why you might want to avoid it:"
msgstr ""

#: ./build/en/book.xml:12800(para) 
msgid "Network protocol is not encrypted."
msgstr ""

#: ./build/en/book.xml:12803(para) ./build/en/book.xml:12848(para) 
msgid "Only one choice of authentication method."
msgstr ""

#: ./build/en/book.xml:12806(para) 
msgid "Password is stored in the clear on the server."
msgstr ""

#: ./build/en/book.xml:12809(para) ./build/en/book.xml:12851(para) 
msgid "No logging of any kind, not even errors."
msgstr ""

#: ./build/en/book.xml:12822(title) 
msgid "<command moreinfo=\"none\">svnserve</command> over SSH"
msgstr ""

#: ./build/en/book.xml:12833(para) 
msgid "You can take advantage of existing ssh accounts and user infrastructure."
msgstr ""

#: ./build/en/book.xml:12836(para) 
msgid "All network traffic is encrypted."
msgstr ""

#: ./build/en/book.xml:12854(para) 
msgid "Requires users to be in same system group, or use a shared ssh key."
msgstr ""

#: ./build/en/book.xml:12857(para) 
msgid "Can lead to file permissions problems."
msgstr ""

#: ./build/en/book.xml:12870(title) 
msgid "The Apache HTTP Server"
msgstr ""

#: ./build/en/book.xml:12878(para) 
msgid "Allows Subversion to use any of the numerous authentication systems already integrated with Apache."
msgstr ""

#: ./build/en/book.xml:12885(para) 
msgid "Full Apache logging."
msgstr ""

#: ./build/en/book.xml:12887(para) 
msgid "Network traffic can be encrypted via SSL."
msgstr ""

#: ./build/en/book.xml:12890(para) 
msgid "HTTP(S) can usually go through corporate firewalls."
msgstr ""

#: ./build/en/book.xml:12893(para) 
msgid "Built-in repository browsing via web browser."
msgstr ""

#: ./build/en/book.xml:12896(para) 
msgid "Repository can be mounted as a network drive for transparent version control. (See <xref linkend=\"svn.webdav.autoversioning\"/>.)"
msgstr ""

#: ./build/en/book.xml:12909(para) 
msgid "Noticeably slower than svnserve, because HTTP is a stateless protocol and requires more turnarounds."
msgstr ""

#: ./build/en/book.xml:12913(para) 
msgid "Initial setup can be complex."
msgstr ""

#: ./build/en/book.xml:12925(title) 
msgid "Recommendations"
msgstr ""

#: ./build/en/book.xml:12927(para) 
msgid "In general, the authors of this book recommend a vanilla <command moreinfo=\"none\">svnserve</command> installation for small teams just trying to get started with a Subversion server; it's the simplest to set up, and has the fewest maintenance issues. Remember, you can always switch to a more complex server deployment as your needs change."
msgstr ""

#: ./build/en/book.xml:12934(para) 
msgid "Here are some general recommendations and tips, based on years of supporting users:"
msgstr ""

#: ./build/en/book.xml:12939(para) 
msgid "If you're trying to set up the simplest possible server for your group, then a vanilla <command moreinfo=\"none\">svnserve</command> installation is the easiest, fastest route. Note, however, that your repository data will be transmitted in the clear over the network. If your deployment is entirely within your company's LAN or VPN, this isn't an issue. If the repository is exposed to the wide-open internet, then you might want to make sure the repository's contents aren't sensitive (e.g. it contains only open-source code.)"
msgstr ""

#: ./build/en/book.xml:12952(para) 
msgid "If you need to integrate with existing identity systems (LDAP, Active Directory, NTLM, X.509, etc.), then an Apache-based server is your only real option. Similarly, if you absolutely need server-side logs of either server errors or client activities, then an Apache-based server is required."
msgstr ""

#: ./build/en/book.xml:12961(para) 
msgid "If you've decided to use either Apache or stock <command moreinfo=\"none\">svnserve</command>, create a single <literal moreinfo=\"none\">svn</literal> user on your system and run the server process as that user. Be sure to make the repository directory wholly owned by the <literal moreinfo=\"none\">svn</literal> user as well. From a security point of view, this keeps the repository data nicely siloed and protected by operating system filesystem permissions, changeable by only the Subversion server process itself."
msgstr ""

#: ./build/en/book.xml:12974(para) 
msgid "If you have an existing infrastructure heavily based on SSH accounts, and if your users already have system accounts on your server machine, then it makes sense to deploy an svnserve-over-ssh solution. Otherwise, we don't widely recommend this option to the public. It's generally considered safer to have your users access the repository via (imaginary) accounts managed by <command moreinfo=\"none\">svnserve</command> or Apache, rather than by full-blown system accounts. If your deep desire for encrypted communication still draws you to this option, we recommend using Apache with SSL instead."
msgstr ""

#: ./build/en/book.xml:12988(para) 
msgid "Do <emphasis>not</emphasis> be seduced by the simple idea of having all of your users access a repository directly via <literal moreinfo=\"none\">file://</literal> URLs. Even if the repository is readily available to everyone via network share, this is a bad idea. It removes any layers of protection between the users and the repository: users can accidentally (or intentionally) corrupt the repository database, it becomes hard to take the repository offline for inspection or upgrade, and it can lead to a mess of file-permissions problems (see <xref linkend=\"svn.serverconfig.multimethod\"/>.) Note that this is also one of the reasons we warn against accessing repositories via <literal moreinfo=\"none\">svn+ssh://</literal> URLs — from a security standpoint, it's effectively the same as local users accessing via <literal moreinfo=\"none\">file://</literal>, and can entail all the same problems if the administrator isn't careful."
msgstr ""

#: ./build/en/book.xml:13017(title) 
msgid "svnserve, a custom server"
msgstr ""

#: ./build/en/book.xml:13019(para) 
msgid "The <command moreinfo=\"none\">svnserve</command> program is a lightweight server, capable of speaking to clients over TCP/IP using a custom, stateful protocol. Clients contact an <command moreinfo=\"none\">svnserve</command> server by using URLs that begin with the <literal moreinfo=\"none\">svn://</literal> or <literal moreinfo=\"none\">svn+ssh://</literal> schema. This section will explain the different ways of running <command moreinfo=\"none\">svnserve</command>, how clients authenticate themselves to the server, and how to configure appropriate access control to your repositories."
msgstr ""

#: ./build/en/book.xml:13031(title) 
msgid "Invoking the Server"
msgstr ""

#: ./build/en/book.xml:13033(para) 
msgid "There are a few different ways to run the <command moreinfo=\"none\">svnserve</command> program:"
msgstr ""

#: ./build/en/book.xml:13037(para) 
msgid "Run <command moreinfo=\"none\">svnserve</command> as a standalone daemon, listening for requests."
msgstr ""

#: ./build/en/book.xml:13040(para) 
msgid "Have the Unix <command moreinfo=\"none\">inetd</command> daemon temporarily spawn <command moreinfo=\"none\">svnserve</command> whenever a request comes in on a certain port."
msgstr ""

#: ./build/en/book.xml:13043(para) 
msgid "Have SSH invoke a temporary <command moreinfo=\"none\">svnserve</command> over an encrypted tunnel."
msgstr ""

#: ./build/en/book.xml:13046(para) 
msgid "Run <command moreinfo=\"none\">svnserve</command> as a Windows service."
msgstr ""

#: ./build/en/book.xml:13052(title) 
msgid "<command moreinfo=\"none\">svnserve</command> as Daemon"
msgstr ""

#: ./build/en/book.xml:13054(para) 
msgid "The easiest option is to run <command moreinfo=\"none\">svnserve</command> as a standalone <quote>daemon</quote> process. Use the <option>-d</option> option for this:"
msgstr ""

#: ./build/en/book.xml:13058(screen) 
#, no-wrap
msgid "\n$ svnserve -d\n$               # svnserve is now running, listening on port 3690\n"
msgstr ""

#: ./build/en/book.xml:13063(para) 
msgid "When running <command moreinfo=\"none\">svnserve</command> in daemon mode, you can use the <option>--listen-port=</option> and <option>--listen-host=</option> options to customize the exact port and hostname to <quote>bind</quote> to."
msgstr ""

#: ./build/en/book.xml:13068(para) 
msgid "Once the <command moreinfo=\"none\">svnserve</command> program is running, it makes every repository on your system available to the network. A client needs to specify an <emphasis>absolute</emphasis> path in the repository URL. For example, if a repository is located at <filename moreinfo=\"none\">/usr/local/repositories/project1</filename>, then a client would reach it via <uri>svn://host.example.com/usr/local/repositories/project1</uri>. To increase security, you can pass the <option>-r</option> option to <command moreinfo=\"none\">svnserve</command>, which restricts it to exporting only repositories below that path. For example:"
msgstr ""

#: ./build/en/book.xml:13080(screen) 
#, no-wrap
msgid "\n$ svnserve -d -r /usr/local/repositories\n…\n"
msgstr ""

#: ./build/en/book.xml:13085(para) 
msgid "Using the <option>-r</option> option effectively modifies the location that the program treats as the root of the remote filesystem space. Clients then use URLs that have that path portion removed from them, leaving much shorter (and much less revealing) URLs:"
msgstr ""

#: ./build/en/book.xml:13091(screen) 
#, no-wrap
msgid "\n$ svn checkout svn://host.example.com/project1\n…\n"
msgstr ""

#: ./build/en/book.xml:13100(title) 
msgid "<command moreinfo=\"none\">svnserve</command> via <command moreinfo=\"none\">inetd</command>"
msgstr ""

#: ./build/en/book.xml:13102(para) 
msgid "If you want <command moreinfo=\"none\">inetd</command> launch the process, then you can pass the <option>-i</option> (<option>--inetd</option>) option:"
msgstr ""

#: ./build/en/book.xml:13106(screen) 
#, no-wrap
msgid "\n$ svnserve -i\n( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )\n"
msgstr ""

#: ./build/en/book.xml:13111(para) 
msgid "When invoked with the <option>--inetd</option> option, <command moreinfo=\"none\">svnserve</command> attempts to speak with a Subversion client via <emphasis>stdin</emphasis> and <emphasis>stdout</emphasis> using a custom protocol. This is the standard behavior for a program being run via <command moreinfo=\"none\">inetd</command>. The IANA has reserved port 3690 for the Subversion protocol, so on a Unix-like system you can add lines to <filename moreinfo=\"none\">/etc/services</filename> like these (if they don't already exist):"
msgstr ""

#: ./build/en/book.xml:13121(screen) 
#, no-wrap
msgid "\nsvn           3690/tcp   # Subversion\nsvn           3690/udp   # Subversion\n"
msgstr ""

#: ./build/en/book.xml:13126(para) 
msgid "And if your system is using a classic Unix-like <command moreinfo=\"none\">inetd</command> daemon, you can add this line to <filename moreinfo=\"none\">/etc/inetd.conf</filename>:"
msgstr ""

#: ./build/en/book.xml:13130(screen) 
#, no-wrap
msgid "\nsvn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i\n"
msgstr ""

#: ./build/en/book.xml:13134(para) 
msgid "Make sure <quote>svnowner</quote> is a user which has appropriate permissions to access your repositories. Now, when a client connection comes into your server on port 3690, <command moreinfo=\"none\">inetd</command> will spawn an <command moreinfo=\"none\">svnserve</command> process to service it. Of course, you may also want to add <option>-r</option> to the configuration line as well, to restrict which repositories are exported."
msgstr ""

#: ./build/en/book.xml:13147(title) 
msgid "<command moreinfo=\"none\">svnserve</command> over a Tunnel"
msgstr ""

#: ./build/en/book.xml:13149(para) 
msgid "A third way to invoke <command moreinfo=\"none\">svnserve</command> is in <quote>tunnel mode</quote>, with the <option>-t</option> option. This mode assumes that a remote-service program such as <command moreinfo=\"none\">RSH</command> or <command moreinfo=\"none\">SSH</command> has successfully authenticated a user and is now invoking a private <command moreinfo=\"none\">svnserve</command> process <emphasis>as that user</emphasis>. The <command moreinfo=\"none\">svnserve</command> program behaves normally (communicating via <emphasis>stdin</emphasis> and <emphasis>stdout</emphasis>), and assumes that the traffic is being automatically redirected over some sort of tunnel back to the client. When <command moreinfo=\"none\">svnserve</command> is invoked by a tunnel agent like this, be sure that the authenticated user has full read and write access to the repository database files. It's essentially the same as a local user accessing the repository via <literal moreinfo=\"none\">file://</literal> URLs."
msgstr ""

#: ./build/en/book.xml:13166(para) 
msgid "This option is described in much more detail in <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr ""

#: ./build/en/book.xml:13173(title) 
msgid "<command moreinfo=\"none\">svnserve</command> as Windows Service"
msgstr ""

#: ./build/en/book.xml:13175(para) 
msgid "If your Windows system is a descendant of Windows NT (2000, 2003, XP, Vista), then you can run <command moreinfo=\"none\">svnserve</command> as a standard Windows service. This is typically a much nicer experience than running it as a standalone daemon with the <option>--daemon (-d)</option> option. Using daemon-mode requires launching a console, typing a command, and then leaving the console window running indefinitely. A Windows service, however, runs in the background, can start at boot time automatically, and can be started and stopped using the same consistent administration interface as other Windows services."
msgstr ""

#: ./build/en/book.xml:13188(para) 
msgid "You'll need to define the new service using the command-line tool <command moreinfo=\"none\">SC.EXE</command>. Much like the <command moreinfo=\"none\">inetd</command> configuration line, you must specify an exact invocation of <command moreinfo=\"none\">svnserve</command> for Windows to run at start-up time:"
msgstr ""

#: ./build/en/book.xml:13194(screen) 
#, no-wrap
msgid "\nC:\\&gt; sc create svn\n        binpath= \"C:\\svn\\bin\\svnserve.exe --service -r C:\\repos\"\n        displayname= \"Subversion Server\"\n        depend= Tcpip\n        start= auto\n"
msgstr ""

#: ./build/en/book.xml:13202(para) 
msgid "This defines a new Windows service named <quote>svn</quote>, and which executes a particular <command moreinfo=\"none\">svnserve.exe</command> command when started (in this case, rooted at <filename moreinfo=\"none\">C:\\repos</filename>.) There are a number of caveats in the prior example, however."
msgstr ""

#: ./build/en/book.xml:13209(para) 
msgid "First, notice that the <command moreinfo=\"none\">svnserve.exe</command> program must always be invoked with the <option>--service</option> option. Any other options to <command moreinfo=\"none\">svnserve</command> must then be specified on the same line, but you cannot add conflicting options such as <option>--daemon (-d)</option>, <option>--tunnel</option>, or <option>--inetd (-i)</option>. Options such as <option>-r</option> or <option>--listen-port</option> are fine, though. Second, be careful about spaces when invoking the <command moreinfo=\"none\">SC.EXE</command> command: the <literal moreinfo=\"none\">key= value</literal> patterns must have no spaces between <literal moreinfo=\"none\">key=</literal> and exactly one space before the <literal moreinfo=\"none\">value</literal>. Lastly, be careful about spaces in your command-line to be invoked. If a directory name contains spaces (or other characters that need escaping), place the entire inner value of <literal moreinfo=\"none\">binpath</literal> in double-quotes, by escaping them:"
msgstr ""

#: ./build/en/book.xml:13229(screen) 
#, no-wrap
msgid "\nC:\\&gt; sc create svn\n        binpath= \"\\\"C:\\program files\\svn\\bin\\svnserve.exe\\\" --service -r C:\\repos\"\n        displayname= \"Subversion Server\"\n        depend= Tcpip\n        start= auto\n"
msgstr ""

#: ./build/en/book.xml:13237(para) 
msgid "Once the service is defined, it can stopped, started, or queried using standard GUI tools (The Services administrative control panel), or at the command line as well:"
msgstr ""

#: ./build/en/book.xml:13242(screen) 
#, no-wrap
msgid "\nC:\\&gt; net stop svn\nC:\\&gt; net start svn\n"
msgstr ""

#: ./build/en/book.xml:13247(para) 
msgid "The service can also be uninstalled (i.e. undefined) by deleting its definition: <literal moreinfo=\"none\">sc delete svn</literal>. Just be sure to stop the service first! The <command moreinfo=\"none\">SC.EXE</command> program has many other subcommands and options, run <literal moreinfo=\"none\">sc /?</literal> to learn more about it."
msgstr ""

#: ./build/en/book.xml:13260(title) 
msgid "Built-in authentication and authorization"
msgstr ""

#: ./build/en/book.xml:13262(para) 
msgid "When a client connects to an <command moreinfo=\"none\">svnserve</command> process, the following things happen:"
msgstr ""

#: ./build/en/book.xml:13266(para) 
msgid "The client selects a specific repository."
msgstr ""

#: ./build/en/book.xml:13269(para) 
msgid "The server processes the repository's <filename moreinfo=\"none\">conf/svnserve.conf</filename> file, and begins to enforce any authentication and authorization policies defined therein."
msgstr ""

#: ./build/en/book.xml:13274(para) 
msgid "Depending on the situation and authorization policies,"
msgstr ""

#: ./build/en/book.xml:13278(para) 
msgid "the client may be allowed to make requests anonymously, without ever receiving an authentication challenge, OR"
msgstr ""

#: ./build/en/book.xml:13282(para) 
msgid "the client may be challenged for authentication at any time, OR"
msgstr ""

#: ./build/en/book.xml:13285(para) 
msgid "if operating in <quote>tunnel mode</quote>, the client will declare itself to be already externally authenticated."
msgstr ""

#: ./build/en/book.xml:13294(para) 
msgid "See RFC 2195."
msgstr ""

#: ./build/en/book.xml:13293(para) 
msgid "At the time of writing, the server only knows how to send a CRAM-MD5 <placeholder-1/> authentication challenge. In essence, the server sends a small amount of data to the client. The client uses the MD5 hash algorithm to create a fingerprint of the data and password combined, then sends the fingerprint as a response. The server performs the same computation with the stored password to verify that the result is identical. <emphasis>At no point does the actual password travel over the network.</emphasis>"
msgstr ""

#: ./build/en/book.xml:13304(para) 
msgid "It's also possible, of course, for the client to be externally authenticated via a tunnel agent, such as <command moreinfo=\"none\">SSH</command>. In that case, the server simply examines the user it's running as, and uses it as the authenticated username. For more on this, see <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr ""

#: ./build/en/book.xml:13310(para) 
msgid "As you've already guessed, a repository's <filename moreinfo=\"none\">svnserve.conf</filename> file is the central mechanism for controlling authentication and authorization policies. The file has the same format as other configuration files (see <xref linkend=\"svn.advanced.confarea\"/>): section names are marked by square brackets (<literal moreinfo=\"none\">[</literal> and <literal moreinfo=\"none\">]</literal>), comments begin with hashes (<literal moreinfo=\"none\">#</literal>), and each section contains specific variables that can be set (<literal moreinfo=\"none\">variable = value</literal>). Let's walk through this file and learn how to use them."
msgstr ""

#: ./build/en/book.xml:13324(title) 
msgid "Create a 'users' file and realm"
msgstr ""

#: ./build/en/book.xml:13326(para) 
msgid "For now, the <literal moreinfo=\"none\">[general]</literal> section of the <filename moreinfo=\"none\">svnserve.conf</filename> has all the variables you need. Begin by defining a file which contains usernames and passwords, and an authentication realm:"
msgstr ""

#: ./build/en/book.xml:13331(screen) 
#, no-wrap
msgid "\n[general]\npassword-db = userfile\nrealm = example realm\n"
msgstr ""

#: ./build/en/book.xml:13337(para) 
msgid "The <literal moreinfo=\"none\">realm</literal> is a name that you define. It tells clients which sort of <quote>authentication namespace</quote> they're connecting to; the Subversion client displays it in the authentication prompt, and uses it as a key (along with the server's hostname and port) for caching credentials on disk (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). The <literal moreinfo=\"none\">password-db</literal> variable points to a separate file that contains a list of usernames and passwords, using the same familiar format. For example:"
msgstr ""

#: ./build/en/book.xml:13347(screen) 
#, no-wrap
msgid "\n[users]\nharry = foopassword\nsally = barpassword\n"
msgstr ""

#: ./build/en/book.xml:13353(para) 
msgid "The value of <literal moreinfo=\"none\">password-db</literal> can be an absolute or relative path to the users file. For many admins, it's easy to keep the file right in the <filename moreinfo=\"none\">conf/</filename> area of the repository, alongside <filename moreinfo=\"none\">svnserve.conf</filename>. On the other hand, it's possible you may want to have two or more repositories share the same users file; in that case, the file should probably live in a more public place. The repositories sharing the users file should also be configured to have the same realm, since the list of users essentially defines an authentication realm. Wherever the file lives, be sure to set the file's read and write permissions appropriately. If you know which user(s) <command moreinfo=\"none\">svnserve</command> will run as, restrict read access to the user file as necessary."
msgstr ""

#: ./build/en/book.xml:13372(title) 
msgid "Set access controls"
msgstr ""

#: ./build/en/book.xml:13374(para) 
msgid "There are two more variables to set in the <filename moreinfo=\"none\">svnserve.conf</filename> file: they determine what unauthenticated (anonymous) and authenticated users are allowed to do. The variables <literal moreinfo=\"none\">anon-access</literal> and <literal moreinfo=\"none\">auth-access</literal> can be set to the values <literal moreinfo=\"none\">none</literal>, <literal moreinfo=\"none\">read</literal>, or <literal moreinfo=\"none\">write</literal>. Setting the value to <literal moreinfo=\"none\">none</literal> restricts all access of any kind; <literal moreinfo=\"none\">read</literal> allows read-only access to the repository, and <literal moreinfo=\"none\">write</literal> allows complete read/write access to the repository. For example:"
msgstr ""

#: ./build/en/book.xml:13386(screen) 
#, no-wrap
msgid "\n[general]\npassword-db = userfile\nrealm = example realm\n\n# anonymous users can only read the repository\nanon-access = read\n\n# authenticated users can both read and write\nauth-access = write\n"
msgstr ""

#: ./build/en/book.xml:13398(para) 
msgid "The example settings are, in fact, the default values of the variables, should you forget to define them. If you want to be even more conservative, you can block anonymous access completely:"
msgstr ""

#: ./build/en/book.xml:13403(screen) 
#, no-wrap
msgid "\n[general]\npassword-db = userfile\nrealm = example realm\n\n# anonymous users aren't allowed\nanon-access = none\n\n# authenticated users can both read and write\nauth-access = write\n"
msgstr ""

#: ./build/en/book.xml:13415(para) 
msgid "The server process not only understands these <quote>blanket</quote> access controls to the repository, but also finer-grained access restrictions placed on specific files and directories within the repository. To make use of this feature, you need to define a file containing more detailed rules, and then set the <literal moreinfo=\"none\">authz-db</literal> variable to point to it:"
msgstr ""

#: ./build/en/book.xml:13423(screen) 
#, no-wrap
msgid "\n[general]\npassword-db = userfile\nrealm = example realm\n\n# Specific access rules for specific locations\nauthz-db = authzfile\n"
msgstr ""

#: ./build/en/book.xml:13432(para) 
msgid "The syntax of the <filename moreinfo=\"none\">authzfile</filename> file is discussed in detail in <xref linkend=\"svn.serverconfig.pathbasedauthz\"/>. Note that the <literal moreinfo=\"none\">authz-db</literal> variable isn't mutually exclusive with the <literal moreinfo=\"none\">anon-access</literal> and <literal moreinfo=\"none\">auth-access</literal> variables; if all the variables are defined at once, then <emphasis>all</emphasis> of the rules must be satisfied before access is allowed."
msgstr ""

#: ./build/en/book.xml:13446(title) 
msgid "Tunneling over SSH"
msgstr ""

#: ./build/en/book.xml:13448(para) 
msgid "<command moreinfo=\"none\">svnserve</command>'s built-in authentication can be very handy, because it avoids the need to create real system accounts. On the other hand, some administrators already have well-established SSH authentication frameworks in place. In these situations, all of the project's users already have system accounts and the ability to <quote>SSH into</quote> the server machine."
msgstr ""

#: ./build/en/book.xml:13456(para) 
msgid "It's easy to use SSH in conjunction with <command moreinfo=\"none\">svnserve</command>. The client simply uses the <literal moreinfo=\"none\">svn+ssh://</literal> URL schema to connect:"
msgstr ""

#: ./build/en/book.xml:13460(screen) 
#, no-wrap
msgid "\n$ whoami\nharry\n\n$ svn list svn+ssh://host.example.com/repos/project\nharry@host.example.com's password:  *****\n\nfoo\nbar\nbaz\n…\n"
msgstr ""

#: ./build/en/book.xml:13473(para) 
msgid "In this example, the Subversion client is invoking a local <command moreinfo=\"none\">ssh</command> process, connecting to <literal moreinfo=\"none\">host.example.com</literal>, authenticating as the user <literal moreinfo=\"none\">harry</literal>, then spawning a private <command moreinfo=\"none\">svnserve</command> process on the remote machine running as the user <literal moreinfo=\"none\">harry</literal>. The <command moreinfo=\"none\">svnserve</command> command is being invoked in tunnel mode (<option>-t</option>) and its network protocol is being <quote>tunneled</quote> over the encrypted connection by <command moreinfo=\"none\">ssh</command>, the tunnel-agent. <command moreinfo=\"none\">svnserve</command> is aware that it's running as the user <literal moreinfo=\"none\">harry</literal>, and if the client performs a commit, the authenticated username will be attributed as the author of the new revision."
msgstr ""

#: ./build/en/book.xml:13488(para) 
msgid "The important thing to understand here is that the Subversion client is <emphasis>not</emphasis> connecting to a running <command moreinfo=\"none\">svnserve</command> daemon. This method of access doesn't require a daemon, nor does it notice one if present. It relies wholly on the ability of <command moreinfo=\"none\">ssh</command> to spawn a temporary <command moreinfo=\"none\">svnserve</command> process, which then terminates when the network connection is closed."
msgstr ""

#: ./build/en/book.xml:13497(para) 
msgid "When using <literal moreinfo=\"none\">svn+ssh://</literal> URLs to access a repository, remember that it's the <command moreinfo=\"none\">ssh</command> program prompting for authentication, and <emphasis>not</emphasis> the <command moreinfo=\"none\">svn</command> client program. That means there's no automatic password caching going on (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). The Subversion client often makes multiple connections to the repository, though users don't normally notice this due to the password caching feature. When using <literal moreinfo=\"none\">svn+ssh://</literal> URLs, however, users may be annoyed by <command moreinfo=\"none\">ssh</command> repeatedly asking for a password for every outbound connection. The solution is to use a separate SSH password-caching tool like <command moreinfo=\"none\">ssh-agent</command> on a Unix-like system, or <command moreinfo=\"none\">pageant</command> on Windows."
msgstr ""

#: ./build/en/book.xml:13526(para) 
msgid "Note that using any sort of <command moreinfo=\"none\">svnserve</command>-enforced access control at all is a bit pointless; the user already has direct access to the repository database."
msgstr ""

#: ./build/en/book.xml:13513(para) 
msgid "When running over a tunnel, authorization is primarily controlled by operating system permissions to the repository's database files; it's very much the same as if Harry were accessing the repository directly via a <literal moreinfo=\"none\">file://</literal> URL. If multiple system users are going to be accessing the repository directly, you may want to place them into a common group, and you'll need to be careful about umasks. (Be sure to read <xref linkend=\"svn.serverconfig.multimethod\"/>.) But even in the case of tunneling, the <filename moreinfo=\"none\">svnserve.conf</filename> file can still be used to block access, by simply setting <literal moreinfo=\"none\">auth-access = read</literal> or <literal moreinfo=\"none\">auth-access = none</literal>. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:13533(para) 
msgid "You'd think that the story of SSH tunneling would end here, but it doesn't. Subversion allows you to create custom tunnel behaviors in your run-time <filename moreinfo=\"none\">config</filename> file (see <xref linkend=\"svn.advanced.confarea\"/>). For example, suppose you want to use RSH instead of SSH. In the <literal moreinfo=\"none\">[tunnels]</literal> section of your <filename moreinfo=\"none\">config</filename> file, simply define it like this:"
msgstr ""

#: ./build/en/book.xml:13542(screen) 
#, no-wrap
msgid "\n[tunnels]\nrsh = rsh\n"
msgstr ""

#: ./build/en/book.xml:13547(para) 
msgid "And now, you can use this new tunnel definition by using a URL schema that matches the name of your new variable: <literal moreinfo=\"none\">svn+rsh://host/path</literal>. When using the new URL schema, the Subversion client will actually be running the command <command moreinfo=\"none\">rsh host svnserve -t</command> behind the scenes. If you include a username in the URL (for example, <literal moreinfo=\"none\">svn+rsh://username@host/path</literal>) the client will also include that in its command (<command moreinfo=\"none\">rsh username@host svnserve -t</command>). But you can define new tunneling schemes to be much more clever than that:"
msgstr ""

#: ./build/en/book.xml:13558(screen) 
#, no-wrap
msgid "\n[tunnels]\njoessh = $JOESSH /opt/alternate/ssh -p 29934\n"
msgstr ""

#: ./build/en/book.xml:13563(para) 
msgid "This example demonstrates a couple of things. First, it shows how to make the Subversion client launch a very specific tunneling binary (the one located at <filename moreinfo=\"none\">/opt/alternate/ssh</filename>) with specific options. In this case, accessing a <literal moreinfo=\"none\">svn+joessh://</literal> URL would invoke the particular SSH binary with <option>-p 29934</option> as arguments—useful if you want the tunnel program to connect to a non-standard port."
msgstr ""

#: ./build/en/book.xml:13573(para) 
msgid "Second, it shows how to define a custom environment variable that can override the name of the tunneling program. Setting the <literal moreinfo=\"none\">SVN_SSH</literal> environment variable is a convenient way to override the default SSH tunnel agent. But if you need to have several different overrides for different servers, each perhaps contacting a different port or passing a different set of options to SSH, you can use the mechanism demonstrated in this example. Now if we were to set the <literal moreinfo=\"none\">JOESSH</literal> environment variable, its value would override the entire value of the tunnel variable—<command moreinfo=\"none\">$JOESSH</command> would be executed instead of <command moreinfo=\"none\">/opt/alternate/ssh -p 29934</command>."
msgstr ""

#: ./build/en/book.xml:13591(title) 
msgid "SSH configuration tricks"
msgstr ""

#: ./build/en/book.xml:13593(para) 
msgid "It's not only possible to control the way in which the client invokes <command moreinfo=\"none\">ssh</command>, but also to control the behavior of <command moreinfo=\"none\">sshd</command> on your server machine. In this section, we'll show how to control the exact <command moreinfo=\"none\">svnserve</command> command executed by <command moreinfo=\"none\">sshd</command>, as well as how to have multiple users share a single system account."
msgstr ""

#: ./build/en/book.xml:13605(para) 
msgid "To begin, locate the home directory of the account you'll be using to launch <command moreinfo=\"none\">svnserve</command>. Make sure the account has an SSH public/private keypair installed, and that the user can log in via public-key authentication. Password authentication will not work, since all of the following SSH tricks revolve around using the SSH <filename moreinfo=\"none\">authorized_keys</filename> file."
msgstr ""

#: ./build/en/book.xml:13613(para) 
msgid "If it doesn't already exist, create the <filename moreinfo=\"none\">authorized_keys</filename> file (on Unix, typically <filename moreinfo=\"none\">~/.ssh/authorized_keys</filename>). Each line in this file describes a public key that is allowed to connect. The lines are typically of the form:"
msgstr ""

#: ./build/en/book.xml:13620(screen) 
#, no-wrap
msgid "\n  ssh-dsa AAAABtce9euch… user@example.com\n"
msgstr ""

#: ./build/en/book.xml:13624(para) 
msgid "The first field describes the type of key, the second field is the uuencoded key itself, and the third field is a comment. However, it's a lesser known fact that the entire line can be preceded by a <literal moreinfo=\"none\">command</literal> field:"
msgstr ""

#: ./build/en/book.xml:13630(screen) 
#, no-wrap
msgid "\n  command=\"program\" ssh-dsa AAAABtce9euch… user@example.com\n"
msgstr ""

#: ./build/en/book.xml:13634(para) 
msgid "When the <literal moreinfo=\"none\">command</literal> field is set, the SSH daemon will run the named program instead of the typical <command moreinfo=\"none\">svnserve -t</command> invocation that the Subversion client asks for. This opens the door to a number of server-side tricks. In the following examples, we abbreviate the lines of the file as:"
msgstr ""

#: ./build/en/book.xml:13641(screen) 
#, no-wrap
msgid "\n  command=\"program\" TYPE KEY COMMENT\n"
msgstr ""

#: ./build/en/book.xml:13649(title) 
msgid "Controlling the invoked command"
msgstr ""

#: ./build/en/book.xml:13651(para) 
msgid "Because we can specify the executed server-side command, it's easy to name a specific <command moreinfo=\"none\">svnserve</command> binary to run and to pass it extra arguments:"
msgstr ""

#: ./build/en/book.xml:13655(screen) 
#, no-wrap
msgid "\n  command=\"/path/to/svnserve -t -r /virtual/root\" TYPE KEY COMMENT\n"
msgstr ""

#: ./build/en/book.xml:13659(para) 
msgid "In this example, <filename moreinfo=\"none\">/path/to/svnserve</filename> might be a custom wrapper script around <command moreinfo=\"none\">svnserve</command> which sets the umask (see <xref linkend=\"svn.serverconfig.multimethod\"/>). It also shows how to anchor <command moreinfo=\"none\">svnserve</command> in a virtual root directory, just as one often does when running <command moreinfo=\"none\">svnserve</command> as a daemon process. This might be done either to restrict access to parts of the system, or simply to relieve the user of having to type an absolute path in the <literal moreinfo=\"none\">svn+ssh://</literal> URL."
msgstr ""

#: ./build/en/book.xml:13671(para) 
msgid "It's also possible to have multiple users share a single account. Instead of creating a separate system account for each user, generate a public/private keypair for each person. Then place each public key into the <filename moreinfo=\"none\">authorized_users</filename> file, one per line, and use the <option>--tunnel-user</option> option:"
msgstr ""

#: ./build/en/book.xml:13679(screen) 
#, no-wrap
msgid "\n  command=\"svnserve -t --tunnel-user=harry\" TYPE1 KEY1 harry@example.com\n  command=\"svnserve -t --tunnel-user=sally\" TYPE2 KEY2 sally@example.com\n"
msgstr ""

#: ./build/en/book.xml:13684(para) 
msgid "This example allows both Harry and Sally to connect to the same account via public-key authentication. Each of them has a custom command that will be executed; the <option>--tunnel-user</option> option tells <command moreinfo=\"none\">svnserve -t</command> to assume that the named argument is the authenticated user. Without <option>--tunnel-user</option>, it would appear as though all commits were coming from the one shared system account."
msgstr ""

#: ./build/en/book.xml:13694(para) 
msgid "A final word of caution: giving a user access to the server via public-key in a shared account might still allow other forms of SSH access, even if you've set the <literal moreinfo=\"none\">command</literal> value in <filename moreinfo=\"none\">authorized_keys</filename>. For example, the user may still get shell access through SSH, or be able to perform X11 or general port-forwarding through your server. To give the user as little permission as possible, you may want to specify a number of restrictive options immediately after the <literal moreinfo=\"none\">command</literal>:"
msgstr ""

#: ./build/en/book.xml:13705(screen) 
#, no-wrap
msgid "\n  command=\"svnserve -t --tunnel-user=harry\",no-port-forwarding,\\\n           no-agent-forwarding,no-X11-forwarding,no-pty \\\n           TYPE1 KEY1 harry@example.com\n"
msgstr ""

#: ./build/en/book.xml:13723(title) 
msgid "httpd, the Apache HTTP server"
msgstr ""

#: ./build/en/book.xml:13739(para) 
msgid "They really hate doing that."
msgstr ""

#: ./build/en/book.xml:13725(para) 
msgid "The Apache HTTP Server is a <quote>heavy duty</quote> network server that Subversion can leverage. Via a custom module, <command moreinfo=\"none\">httpd</command> makes Subversion repositories available to clients via the WebDAV/DeltaV protocol, which is an extension to HTTP 1.1 (see <ulink url=\"http://www.webdav.org/\"/> for more information). This protocol takes the ubiquitous HTTP protocol that is the core of the World Wide Web, and adds writing—specifically, versioned writing—capabilities. The result is a standardized, robust system that is conveniently packaged as part of the Apache 2.0 software, is supported by numerous operating systems and third-party products, and doesn't require network administrators to open up yet another custom port. <placeholder-1/> While an Apache-Subversion server has more features than <command moreinfo=\"none\">svnserve</command>, it's also a bit more difficult to set up. With flexibility often comes more complexity."
msgstr ""

#: ./build/en/book.xml:13745(para) 
msgid "Much of the following discussion includes references to Apache configuration directives. While some examples are given of the use of these directives, describing them in full is outside the scope of this chapter. The Apache team maintains excellent documentation, publicly available on their website at <ulink url=\"http://httpd.apache.org\"/>. For example, a general reference for the configuration directives is located at <ulink url=\"       http://httpd.apache.org/docs-2.0/mod/directives.html\"/>."
msgstr ""

#: ./build/en/book.xml:13753(para) 
msgid "Also, as you make changes to your Apache setup, it is likely that somewhere along the way a mistake will be made. If you are not already familiar with Apache's logging subsystem, you should become aware of it. In your <filename moreinfo=\"none\">httpd.conf</filename> file are directives that specify the on-disk locations of the access and error logs generated by Apache (the <literal moreinfo=\"none\">CustomLog</literal> and <literal moreinfo=\"none\">ErrorLog</literal> directives, respectively). Subversion's mod_dav_svn uses Apache's error logging interface as well. You can always browse the contents of those files for information that might reveal the source of a problem that is not clearly noticeable otherwise."
msgstr ""

#: ./build/en/book.xml:13767(title) 
msgid "Why Apache 2?"
msgstr ""

#: ./build/en/book.xml:13769(para) 
msgid "If you're a system administrator, it's very likely that you're already running the Apache web server and have some prior experience with it. At the time of writing, Apache 1.3 is by far the most popular version of Apache. The world has been somewhat slow to upgrade to the Apache 2.X series for various reasons: some people fear change, especially changing something as critical as a web server. Other people depend on plug-in modules that only work against the Apache 1.3 API, and are waiting for a 2.X port. Whatever the reason, many people begin to worry when they first discover that Subversion's Apache module is written specifically for the Apache 2 API."
msgstr ""

#: ./build/en/book.xml:13781(para) 
msgid "The proper response to this problem is: don't worry about it. It's easy to run Apache 1.3 and Apache 2 side-by-side; simply install them to separate places, and use Apache 2 as a dedicated Subversion server that runs on a port other than 80. Clients can access the repository by placing the port number into the URL:"
msgstr ""

#: ./build/en/book.xml:13788(screen) 
#, no-wrap
msgid "\n$ svn checkout http://host.example.com:7382/repos/project\n…\n"
msgstr ""

#: ./build/en/book.xml:13797(title) 
msgid "Prerequisites"
msgstr ""

#: ./build/en/book.xml:13799(para) 
msgid "To network your repository over HTTP, you basically need four components, available in two packages. You'll need Apache <command moreinfo=\"none\">httpd</command> 2.0, the <command moreinfo=\"none\">mod_dav</command> DAV module that comes with it, Subversion, and the <command moreinfo=\"none\">mod_dav_svn</command> filesystem provider module distributed with Subversion. Once you have all of those components, the process of networking your repository is as simple as:"
msgstr ""

#: ./build/en/book.xml:13810(para) 
msgid "getting httpd 2.0 up and running with the mod_dav module,"
msgstr ""

#: ./build/en/book.xml:13814(para) 
msgid "installing the mod_dav_svn plugin to mod_dav, which uses Subversion's libraries to access the repository, and"
msgstr ""

#: ./build/en/book.xml:13819(para) 
msgid "configuring your <filename moreinfo=\"none\">httpd.conf</filename> file to export (or expose) the repository."
msgstr ""

#: ./build/en/book.xml:13824(para) 
msgid "You can accomplish the first two items either by compiling <command moreinfo=\"none\">httpd</command> and Subversion from source code, or by installing pre-built binary packages of them on your system. For the most up-to-date information on how to compile Subversion for use with the Apache HTTP Server, as well as how to compile and configure Apache itself for this purpose, see the <filename moreinfo=\"none\">INSTALL</filename> file in the top level of the Subversion source code tree."
msgstr ""

#: ./build/en/book.xml:13837(title) 
msgid "Basic Apache Configuration"
msgstr ""

#: ./build/en/book.xml:13839(para) 
msgid "Once you have all the necessary components installed on your system, all that remains is the configuration of Apache via its <filename moreinfo=\"none\">httpd.conf</filename> file. Instruct Apache to load the mod_dav_svn module using the <literal moreinfo=\"none\">LoadModule</literal> directive. This directive must precede any other Subversion-related configuration items. If your Apache was installed using the default layout, your <command moreinfo=\"none\">mod_dav_svn</command> module should have been installed in the <filename moreinfo=\"none\">modules</filename> subdirectory of the Apache install location (often <filename moreinfo=\"none\">/usr/local/apache2</filename>). The <literal moreinfo=\"none\">LoadModule</literal> directive has a simple syntax, mapping a named module to the location of a shared library on disk:"
msgstr ""

#: ./build/en/book.xml:13854(screen) 
#, no-wrap
msgid "\nLoadModule dav_svn_module     modules/mod_dav_svn.so\n"
msgstr ""

#: ./build/en/book.xml:13858(para) 
msgid "Note that if <command moreinfo=\"none\">mod_dav</command> was compiled as a shared object (instead of statically linked directly to the <command moreinfo=\"none\">httpd</command> binary), you'll need a similar <literal moreinfo=\"none\">LoadModule</literal> statement for it, too. Be sure that it comes before the <command moreinfo=\"none\">mod_dav_svn</command> line:"
msgstr ""

#: ./build/en/book.xml:13864(screen) 
#, no-wrap
msgid "\nLoadModule dav_module         modules/mod_dav.so\nLoadModule dav_svn_module     modules/mod_dav_svn.so\n"
msgstr ""

#: ./build/en/book.xml:13870(para) 
msgid "At a later location in your configuration file, you now need to tell Apache where you keep your Subversion repository (or repositories). The <literal moreinfo=\"none\">Location</literal> directive has an XML-like notation, starting with an opening tag, and ending with a closing tag, with various other configuration directives in the middle. The purpose of the <literal moreinfo=\"none\">Location</literal> directive is to instruct Apache to do something special when handling requests that are directed at a given URL or one of its children. In the case of Subversion, you want Apache to simply hand off support for URLs that point at versioned resources to the DAV layer. You can instruct Apache to delegate the handling of all URLs whose path portions (the part of the URL that follows the server's name and the optional port number) begin with <filename moreinfo=\"none\">/repos/</filename> to a DAV provider whose repository is located at <filename moreinfo=\"none\">/absolute/path/to/repository</filename> using the following <filename moreinfo=\"none\">httpd.conf</filename> syntax:"
msgstr ""

#: ./build/en/book.xml:13889(screen) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNPath /absolute/path/to/repository\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:13896(para) 
msgid "If you plan to support multiple Subversion repositories that will reside in the same parent directory on your local disk, you can use an alternative directive, the <literal moreinfo=\"none\">SVNParentPath</literal> directive, to indicate that common parent directory. For example, if you know you will be creating multiple Subversion repositories in a directory <filename moreinfo=\"none\">/usr/local/svn</filename> that would be accessed via URLs like <uri>http://my.server.com/svn/repos1</uri>, <uri>http://my.server.com/svn/repos2</uri>, and so on, you could use the <filename moreinfo=\"none\">httpd.conf</filename> configuration syntax in the following example:"
msgstr ""

#: ./build/en/book.xml:13908(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n\n  # any \"/svn/foo\" URL will map to a repository /usr/local/svn/foo\n  SVNParentPath /usr/local/svn\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:13917(para) 
msgid "Using the previous syntax, Apache will delegate the handling of all URLs whose path portions begin with <filename moreinfo=\"none\">/svn/</filename> to the Subversion DAV provider, which will then assume that any items in the directory specified by the <literal moreinfo=\"none\">SVNParentPath</literal> directive are actually Subversion repositories. This is a particularly convenient syntax in that, unlike the use of the <literal moreinfo=\"none\">SVNPath</literal> directive, you don't have to restart Apache in order to create and network new repositories."
msgstr ""

#: ./build/en/book.xml:13928(para) 
msgid "Be sure that when you define your new <literal moreinfo=\"none\">Location</literal>, it doesn't overlap with other exported Locations. For example, if your main <literal moreinfo=\"none\">DocumentRoot</literal> is exported to <filename moreinfo=\"none\">/www</filename>, do not export a Subversion repository in <literal moreinfo=\"none\">&lt;Location /www/repos&gt;</literal>. If a request comes in for the URI <filename moreinfo=\"none\">/www/repos/foo.c</filename>, Apache won't know whether to look for a file <filename moreinfo=\"none\">repos/foo.c</filename> in the <literal moreinfo=\"none\">DocumentRoot</literal>, or whether to delegate <command moreinfo=\"none\">mod_dav_svn</command> to return <filename moreinfo=\"none\">foo.c</filename> from the Subversion repository."
msgstr ""

#: ./build/en/book.xml:13943(title) 
msgid "Server Names and the COPY Request"
msgstr ""

#: ./build/en/book.xml:13945(para) 
msgid "Subversion makes use of the <literal moreinfo=\"none\">COPY</literal> request type to perform server-side copies of files and directories. As part of the sanity checking done by the Apache modules, the source of the copy is expected to be located on the same machine as the destination of the copy. To satisfy this requirement, you might need to tell mod_dav the name you use as the hostname of your server. Generally, you can use the <literal moreinfo=\"none\">ServerName</literal> directive in <filename moreinfo=\"none\">httpd.conf</filename> to accomplish this."
msgstr ""

#: ./build/en/book.xml:13955(screen) 
#, no-wrap
msgid "\nServerName svn.example.com\n"
msgstr ""

#: ./build/en/book.xml:13959(para) 
msgid "If you are using Apache's virtual hosting support via the <literal moreinfo=\"none\">NameVirtualHost</literal> directive, you may need to use the <literal moreinfo=\"none\">ServerAlias</literal> directive to specify additional names that your server is known by. Again, refer to the Apache documentation for full details."
msgstr ""

#: ./build/en/book.xml:13967(para) 
msgid "At this stage, you should strongly consider the question of permissions. If you've been running Apache for some time now as your regular web server, you probably already have a collection of content—web pages, scripts and such. These items have already been configured with a set of permissions that allows them to work with Apache, or more appropriately, that allows Apache to work with those files. Apache, when used as a Subversion server, will also need the correct permissions to read and write to your Subversion repository."
msgstr ""

#: ./build/en/book.xml:13978(para) 
msgid "You will need to determine a permission system setup that satisfies Subversion's requirements without messing up any previously existing web page or script installations. This might mean changing the permissions on your Subversion repository to match those in use by other things that Apache serves for you, or it could mean using the <literal moreinfo=\"none\">User</literal> and <literal moreinfo=\"none\">Group</literal> directives in <filename moreinfo=\"none\">httpd.conf</filename> to specify that Apache should run as the user and group that owns your Subversion repository. There is no single correct way to set up your permissions, and each administrator will have different reasons for doing things a certain way. Just be aware that permission-related problems are perhaps the most common oversight when configuring a Subversion repository for use with Apache."
msgstr ""

#: ./build/en/book.xml:13998(title) 
msgid "Authentication Options"
msgstr ""

#: ./build/en/book.xml:14000(para) 
msgid "At this point, if you configured <filename moreinfo=\"none\">httpd.conf</filename> to contain something like"
msgstr ""

#: ./build/en/book.xml:14003(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14010(para) 
msgid "…then your repository is <quote>anonymously</quote> accessible to the world. Until you configure some authentication and authorization policies, the Subversion repositories you make available via the <literal moreinfo=\"none\">Location</literal> directive will be generally accessible to everyone. In other words,"
msgstr ""

#: ./build/en/book.xml:14019(para) 
msgid "anyone can use their Subversion client to checkout a working copy of a repository URL (or any of its subdirectories),"
msgstr ""

#: ./build/en/book.xml:14024(para) 
msgid "anyone can interactively browse the repository's latest revision simply by pointing their web browser to the repository URL, and"
msgstr ""

#: ./build/en/book.xml:14029(para) 
msgid "anyone can commit to the repository."
msgstr ""

#: ./build/en/book.xml:14033(para) 
msgid "Of course, you might have already set up a <filename moreinfo=\"none\">pre-commit</filename> hook script to prevent commits (see <xref linkend=\"svn.reposadmin.create.hooks\"/>). But as you read on, you'll see that it's also possible use Apache's built-in methods to restrict access in specific ways."
msgstr ""

#: ./build/en/book.xml:14042(title) 
msgid "Basic HTTP Authentication"
msgstr ""

#: ./build/en/book.xml:14044(para) 
msgid "The easiest way to authenticate a client is via the HTTP Basic authentication mechanism, which simply uses a username and password to verify that a user is who she says she is. Apache provides an <command moreinfo=\"none\">htpasswd</command> utility for managing the list of acceptable usernames and passwords, those to whom you wish to grant special access to your Subversion repository. Let's grant commit access to Sally and Harry. First, we need to add them to the password file."
msgstr ""

#: ./build/en/book.xml:14054(screen) 
#, no-wrap
msgid "\n$ ### First time: use -c to create the file\n$ ### Use -m to use MD5 encryption of the password, which is more secure\n$ htpasswd -cm /etc/svn-auth-file harry\nNew password: *****\nRe-type new password: *****\nAdding password for user harry\n$ htpasswd -m /etc/svn-auth-file sally\nNew password: *******\nRe-type new password: *******\nAdding password for user sally\n$\n"
msgstr ""

#: ./build/en/book.xml:14068(para) 
msgid "Next, you need to add some more <filename moreinfo=\"none\">httpd.conf</filename> directives inside your <literal moreinfo=\"none\">Location</literal> block to tell Apache what to do with your new password file. The <literal moreinfo=\"none\">AuthType</literal> directive specifies the type of authentication system to use. In this case, we want to specify the <literal moreinfo=\"none\">Basic</literal> authentication system. <literal moreinfo=\"none\">AuthName</literal> is an arbitrary name that you give for the authentication domain. Most browsers will display this name in the pop-up dialog box when the browser is querying the user for his name and password. Finally, use the <literal moreinfo=\"none\">AuthUserFile</literal> directive to specify the location of the password file you created using <command moreinfo=\"none\">htpasswd</command>."
msgstr ""

#: ./build/en/book.xml:14083(para) 
msgid "After adding these three directives, your <literal moreinfo=\"none\">&lt;Location&gt;</literal> block should look something like this:"
msgstr ""

#: ./build/en/book.xml:14087(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /etc/svn-auth-file\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14097(para) 
msgid "This <literal moreinfo=\"none\">&lt;Location&gt;</literal> block is not yet complete, and will not do anything useful. It's merely telling Apache that whenever authorization is required, Apache should harvest a username and password from the Subversion client. What's missing here, however, are directives that tell Apache <emphasis>which</emphasis> sorts of client requests require authorization. Wherever authorization is required, Apache will demand authentication as well. The simplest thing to do is protect all requests. Adding <literal moreinfo=\"none\">Require valid-user</literal> tells Apache that all requests require an authenticated user:"
msgstr ""

#: ./build/en/book.xml:14110(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /etc/svn-auth-file\n  Require valid-user\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14121(para) 
msgid "Be sure to read the next section (<xref linkend=\"svn.serverconfig.httpd.authz\"/>) for more detail on the <literal moreinfo=\"none\">Require</literal> directive and other ways to set authorization policies."
msgstr ""

#: ./build/en/book.xml:14134(para) 
msgid "While self-signed server certificates are still vulnerable to a <quote>man in the middle</quote> attack, such an attack is still much more difficult for a casual observer to pull off, compared to sniffing unprotected passwords."
msgstr ""

#: ./build/en/book.xml:14125(para) 
msgid "One word of warning: HTTP Basic Auth passwords pass in very nearly plain-text over the network, and thus are extremely insecure. If you're worried about password snooping, it may be best to use some sort of SSL encryption, so that clients authenticate via <literal moreinfo=\"none\">https://</literal> instead of <literal moreinfo=\"none\">http://</literal>; at a bare minimum, you can configure Apache to use a self-signed server certificate. <placeholder-1/> Consult Apache's documentation (and OpenSSL documentation) about how to do that."
msgstr ""

#: ./build/en/book.xml:14148(title) 
msgid "SSL Certificate Management"
msgstr ""

#: ./build/en/book.xml:14150(para) 
msgid "Businesses that need to expose their repositories for access outside the company firewall should be conscious of the possibility that unauthorized parties could be <quote>sniffing</quote> their network traffic. SSL makes that kind of unwanted attention less likely to result in sensitive data leaks."
msgstr ""

#: ./build/en/book.xml:14157(para) 
msgid "If a Subversion client is compiled to use OpenSSL, then it gains the ability to speak to an Apache server via <literal moreinfo=\"none\">https://</literal> URLs. The Neon library used by the Subversion client is not only able to verify server certificates, but can also supply client certificates when challenged. When the client and server have exchanged SSL certificates and successfully authenticated one another, all further communication is encrypted via a session key."
msgstr ""

#: ./build/en/book.xml:14166(para) 
msgid "It's beyond the scope of this book to describe how to generate client and server certificates, and how to configure Apache to use them. Many other books, including Apache's own documentation, describe this task. But what <emphasis>can</emphasis> be covered here is how to manage server and client certificates from an ordinary Subversion client."
msgstr ""

#: ./build/en/book.xml:14174(para) 
msgid "When speaking to Apache via <literal moreinfo=\"none\">https://</literal>, a Subversion client can receive two different types of information:"
msgstr ""

#: ./build/en/book.xml:14179(para) 
msgid "a server certificate"
msgstr ""

#: ./build/en/book.xml:14180(para) 
msgid "a demand for a client certificate"
msgstr ""

#: ./build/en/book.xml:14183(para) 
msgid "If the client receives a server certificate, it needs to verify that it trusts the certificate: is the server really who it claims to be? The OpenSSL library does this by examining the signer of the server certificate, or <firstterm>certifying authority</firstterm> (CA). If OpenSSL is unable to automatically trust the CA, or if some other problem occurs (such as an expired certificate or hostname mismatch), the Subversion command-line client will ask you whether you want to trust the server certificate anyway:"
msgstr ""

#: ./build/en/book.xml:14194(screen) 
#, no-wrap
msgid "\n$ svn list https://host.example.com/repos/project\n\nError validating server certificate for 'https://host.example.com:443':\n - The certificate is not issued by a trusted authority. Use the\n   fingerprint to validate the certificate manually!\nCertificate information:\n - Hostname: host.example.com\n - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT\n - Issuer: CA, example.com, Sometown, California, US\n - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b\n\n(R)eject, accept (t)emporarily or accept (p)ermanently?\n"
msgstr ""

#: ./build/en/book.xml:14209(para) 
msgid "This dialogue should look familiar; it's essentially the same question you've probably seen coming from your web browser (which is just another HTTP client like Subversion!). If you choose the (p)ermanent option, the server certificate will be cached in your private run-time <filename moreinfo=\"none\">auth/</filename> area in just the same way your username and password are cached (see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>). If cached, Subversion will automatically remember to trust this certificate in future negotiations."
msgstr ""

#: ./build/en/book.xml:14219(para) 
msgid "Your run-time <filename moreinfo=\"none\">servers</filename> file also gives you the ability to make your Subversion client automatically trust specific CAs, either globally or on a per-host basis. Simply set the <literal moreinfo=\"none\">ssl-authority-files</literal> variable to a semicolon-separated list of PEM-encoded CA certificates:"
msgstr ""

#: ./build/en/book.xml:14226(screen) 
#, no-wrap
msgid "\n[global]\nssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem\n"
msgstr ""

#: ./build/en/book.xml:14231(para) 
msgid "Many OpenSSL installations also have a pre-defined set of <quote>default</quote> CAs that are nearly universally trusted. To make the Subversion client automatically trust these standard authorities, set the <literal moreinfo=\"none\">ssl-trust-default-ca</literal> variable to <literal moreinfo=\"none\">true</literal>."
msgstr ""

#: ./build/en/book.xml:14238(para) 
msgid "When talking to Apache, a Subversion client might also receive a challenge for a client certificate. Apache is asking the client to identify itself: is the client really who it says it is? If all goes correctly, the Subversion client sends back a private certificate signed by a CA that Apache trusts. A client certificate is usually stored on disk in encrypted format, protected by a local password. When Subversion receives this challenge, it will ask you for both a path to the certificate and the password which protects it:"
msgstr ""

#: ./build/en/book.xml:14249(screen) 
#, no-wrap
msgid "\n$ svn list https://host.example.com/repos/project\n\nAuthentication realm: https://host.example.com:443\nClient certificate filename: /path/to/my/cert.p12\nPassphrase for '/path/to/my/cert.p12':  ********\n…\n"
msgstr ""

#: ./build/en/book.xml:14258(para) 
msgid "Notice that the client certificate is a <quote>p12</quote> file. To use a client certificate with Subversion, it must be in PKCS#12 format, which is a portable standard. Most web browsers are already able to import and export certificates in that format. Another option is to use the OpenSSL command-line tools to convert existing certificates into PKCS#12."
msgstr ""

#: ./build/en/book.xml:14266(para) 
msgid "Again, the runtime <filename moreinfo=\"none\">servers</filename> file allows you to automate this challenge on a per-host basis. Either or both pieces of information can be described in runtime variables:"
msgstr ""

#: ./build/en/book.xml:14271(screen) 
#, no-wrap
msgid "\n[groups]\nexamplehost = host.example.com\n\n[examplehost]\nssl-client-cert-file = /path/to/my/cert.p12\nssl-client-cert-password = somepassword\n"
msgstr ""

#: ./build/en/book.xml:14286(para) 
msgid "More security-conscious folk might not want to store the client certificate password in the runtime <filename moreinfo=\"none\">servers</filename> file."
msgstr ""

#: ./build/en/book.xml:14280(para) 
msgid "Once you've set the <literal moreinfo=\"none\">ssl-client-cert-file</literal> and <literal moreinfo=\"none\">ssl-client-cert-password</literal> variables, the Subversion client can automatically respond to a client certificate challenge without prompting you. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:14298(title) 
msgid "Authorization Options"
msgstr ""

#: ./build/en/book.xml:14300(para) 
msgid "At this point, you've configured authentication, but not authorization. Apache is able to challenge clients and confirm identities, but it has not been told how to allow or restrict access to the clients bearing those identities. This section describes two strategies for controlling access to your repositories."
msgstr ""

#: ./build/en/book.xml:14309(title) 
msgid "Blanket Access Control"
msgstr ""

#: ./build/en/book.xml:14311(para) 
msgid "The simplest form of access control is to authorize certain users for either read-only access to a repository, or read/write access to a repository."
msgstr ""

#: ./build/en/book.xml:14315(para) 
msgid "You can restrict access on all repository operations by adding the <literal moreinfo=\"none\">Require valid-user</literal> directive to your <literal moreinfo=\"none\">&lt;Location&gt;</literal> block. Using our previous example, this would mean that only clients that claimed to be either <literal moreinfo=\"none\">harry</literal> or <literal moreinfo=\"none\">sally</literal>, and provided the correct password for their respective username, would be allowed to do anything with the Subversion repository:"
msgstr ""

#: ./build/en/book.xml:14324(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  # how to authenticate a user\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /path/to/users/file\n\n  # only authenticated users may access the repository\n  Require valid-user\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14339(para) 
msgid "Sometimes you don't need to run such a tight ship. For example, Subversion's own source code repository at <ulink url=\"http://svn.collab.net/repos/svn\"/> allows anyone in the world to perform read-only repository tasks (like checking out working copies and browsing the repository with a web browser), but restricts all write operations to authenticated users. To do this type of selective restriction, you can use the <literal moreinfo=\"none\">Limit</literal> and <literal moreinfo=\"none\">LimitExcept</literal> configuration directives. Like the <literal moreinfo=\"none\">Location</literal> directive, these blocks have starting and ending tags, and you would nest them inside your <literal moreinfo=\"none\">&lt;Location&gt;</literal> block."
msgstr ""

#: ./build/en/book.xml:14353(para) 
msgid "The parameters present on the <literal moreinfo=\"none\">Limit</literal> and <literal moreinfo=\"none\">LimitExcept</literal> directives are HTTP request types that are affected by that block. For example, if you wanted to disallow all access to your repository except the currently supported read-only operations, you would use the <literal moreinfo=\"none\">LimitExcept</literal> directive, passing the <literal moreinfo=\"none\">GET</literal>, <literal moreinfo=\"none\">PROPFIND</literal>, <literal moreinfo=\"none\">OPTIONS</literal>, and <literal moreinfo=\"none\">REPORT</literal> request type parameters. Then the previously mentioned <literal moreinfo=\"none\">Require valid-user</literal> directive would be placed inside the <literal moreinfo=\"none\">&lt;LimitExcept&gt;</literal> block instead of just inside the <literal moreinfo=\"none\">&lt;Location&gt;</literal> block."
msgstr ""

#: ./build/en/book.xml:14367(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  # how to authenticate a user\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /path/to/users/file\n\n  # For any operations other than these, require an authenticated user.\n  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;\n    Require valid-user\n  &lt;/LimitExcept&gt;\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14384(para) 
msgid "These are only a few simple examples. For more in-depth information about Apache access control and the <literal moreinfo=\"none\">Require</literal> directive, take a look at the <literal moreinfo=\"none\">Security</literal> section of the Apache documentation's tutorials collection at <ulink url=\"http://httpd.apache.org/docs-2.0/misc/tutorials.html\"/>."
msgstr ""

#: ./build/en/book.xml:14395(title) 
msgid "Per-Directory Access Control"
msgstr ""

#: ./build/en/book.xml:14397(para) 
msgid "It's possible to set up finer-grained permissions using a second Apache httpd module, <command moreinfo=\"none\">mod_authz_svn</command>. This module grabs the various opaque URLs passing from client to server, asks <command moreinfo=\"none\">mod_dav_svn</command> to decode them, and then possibly vetoes requests based on access policies defined in a configuration file."
msgstr ""

#: ./build/en/book.xml:14405(para) 
msgid "If you've built Subversion from source code, <command moreinfo=\"none\">mod_authz_svn</command> is automatically built and installed alongside <command moreinfo=\"none\">mod_dav_svn</command>. Many binary distributions install it automatically as well. To verify that it's installed correctly, make sure it comes right after <command moreinfo=\"none\">mod_dav_svn</command>'s <literal moreinfo=\"none\">LoadModule</literal> directive in <filename moreinfo=\"none\">httpd.conf</filename>:"
msgstr ""

#: ./build/en/book.xml:14414(screen) 
#, no-wrap
msgid "\nLoadModule dav_module         modules/mod_dav.so\nLoadModule dav_svn_module     modules/mod_dav_svn.so\nLoadModule authz_svn_module   modules/mod_authz_svn.so\n"
msgstr ""

#: ./build/en/book.xml:14420(para) 
msgid "To activate this module, you need to configure your <literal moreinfo=\"none\">Location</literal> block to use the <literal moreinfo=\"none\">AuthzSVNAccessFile</literal> directive, which specifies a file containing the permissions policy for paths within your repositories. (In a moment, we'll discuss the format of that file.)"
msgstr ""

#: ./build/en/book.xml:14427(para) 
msgid "Apache is flexible, so you have the option to configure your block in one of three general patterns. To begin, choose one of these basic configuration patterns. (The examples below are very simple; look at Apache's own documentation for much more detail on Apache authentication and authorization options.)"
msgstr ""

#: ./build/en/book.xml:14434(para) 
msgid "The simplest block is to allow open access to everyone. In this scenario, Apache never sends authentication challenges, so all users are treated as <quote>anonymous</quote>."
msgstr ""

#: ./build/en/book.xml:14440(title) 
msgid "A sample configuration for anonymous access."
msgstr ""

#: ./build/en/book.xml:14441(programlisting) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  # our access control policy\n  AuthzSVNAccessFile /path/to/access/file\n&lt;/Location&gt;\n          "
msgstr ""

#: ./build/en/book.xml:14452(para) 
msgid "On the opposite end of the paranoia scale, you can configure your block to demand authentication from everyone. All clients must supply credentials to identify themselves. Your block unconditionally requires authentication via the <literal moreinfo=\"none\">Require valid-user</literal> directive, and defines a means to authenticate."
msgstr ""

#: ./build/en/book.xml:14460(title) 
msgid "A sample configuration for authenticated access."
msgstr ""

#: ./build/en/book.xml:14461(programlisting) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  # our access control policy\n  AuthzSVNAccessFile /path/to/access/file\n\n  # only authenticated users may access the repository\n  Require valid-user\n\n  # how to authenticate a user\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /path/to/users/file\n&lt;/Location&gt;\n          "
msgstr ""

#: ./build/en/book.xml:14480(para) 
msgid "A third very popular pattern is to allow a combination of authenticated and anonymous access. For example, many administrators want to allow anonymous users to read certain repository directories, but want only authenticated users to read (or write) more sensitive areas. In this setup, all users start out accessing the repository anonymously. If your access control policy demands a real username at any point, Apache will demand authentication from the client. To do this, you use both the <literal moreinfo=\"none\">Satisfy Any</literal> and <literal moreinfo=\"none\">Require valid-user</literal> directives together."
msgstr ""

#: ./build/en/book.xml:14493(title) 
msgid "A sample configuration for mixed authenticated/anonymous access."
msgstr ""

#: ./build/en/book.xml:14495(programlisting) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  # our access control policy\n  AuthzSVNAccessFile /path/to/access/file\n\n  # try anonymous access first, resort to real\n  # authentication if necessary.\n  Satisfy Any\n  Require valid-user\n\n  # how to authenticate a user\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthUserFile /path/to/users/file\n&lt;/Location&gt;\n          "
msgstr ""

#: ./build/en/book.xml:14516(para) 
msgid "Once you've settled on one of these three basic <filename moreinfo=\"none\">httpd.conf</filename> templates, you need to create your file containing access rules for particular paths within the repository. This is described in <xref linkend=\"svn.serverconfig.pathbasedauthz\"/>."
msgstr ""

#: ./build/en/book.xml:14526(title) 
msgid "Disabling Path-based Checks"
msgstr ""

#: ./build/en/book.xml:14528(para) 
msgid "The <command moreinfo=\"none\">mod_dav_svn</command> module goes through a lot of work to make sure that data you've marked <quote>unreadable</quote> doesn't get accidentally leaked. This means that it needs to closely monitor all of the paths and file-contents returned by commands like <command moreinfo=\"none\">svn checkout</command> or <command moreinfo=\"none\">svn update</command> commands. If these commands encounter a path that isn't readable according to some authorization policy, then the path is typically omitted altogether. In the case of history or rename tracing—e.g. running a command like <command moreinfo=\"none\">svn cat -r OLD foo.c</command> on a file that was renamed long ago—the rename tracking will simply halt if one of the object's former names is determined to be read-restricted."
msgstr ""

#: ./build/en/book.xml:14543(para) 
msgid "All of this path-checking can sometimes be quite expensive, especially in the case of <command moreinfo=\"none\">svn log</command>. When retrieving a list of revisions, the server looks at every changed path in each revision and checks it for readability. If an unreadable path is discovered, then it's omitted from the list of the revision's changed paths (normally seen with the <option>--verbose</option> option), and the whole log message is suppressed. Needless to say, this can be time-consuming on revisions that affect a large number of files. This is the cost of security: even if you haven't configured a module like <command moreinfo=\"none\">mod_authz_svn</command> at all, the <command moreinfo=\"none\">mod_dav_svn</command> module is still asking Apache <command moreinfo=\"none\">httpd</command> to run authorization checks on every path. The <command moreinfo=\"none\">mod_dav_svn</command> module has no idea what authorization modules have been installed, so all it can do is ask Apache to invoke whatever might be present."
msgstr ""

#: ./build/en/book.xml:14562(para) 
msgid "On the other hand, there's also an escape-hatch of sorts, one which allows you to trade security features for speed. If you're not enforcing any sort of per-directory authorization (i.e. not using <command moreinfo=\"none\">mod_authz_svn</command> or similar module), then you can disable all of this path-checking. In your <filename moreinfo=\"none\">httpd.conf</filename> file, use the <literal moreinfo=\"none\">SVNPathAuthz</literal> directive:"
msgstr ""

#: ./build/en/book.xml:14572(title) 
msgid "Disabling path checks altogether"
msgstr ""

#: ./build/en/book.xml:14573(programlisting) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n\n  SVNPathAuthz off\n&lt;/Location&gt;\n          "
msgstr ""

#: ./build/en/book.xml:14583(para) 
msgid "The <literal moreinfo=\"none\">SVNPathAuthz</literal> directive is <quote>on</quote> by default. When set <quote>off</quote>, all path-based authorization checking is disabled; <command moreinfo=\"none\">mod_dav_svn</command> stops invoking authorization checks on every path it discovers."
msgstr ""

#: ./build/en/book.xml:14595(title) 
msgid "Extra Goodies"
msgstr ""

#: ./build/en/book.xml:14597(para) 
msgid "We've covered most of the authentication and authorization options for Apache and mod_dav_svn. But there are a few other nice features that Apache provides."
msgstr ""

#: ./build/en/book.xml:14603(title) 
msgid "Repository Browsing"
msgstr ""

#: ./build/en/book.xml:14605(para) 
msgid "One of the most useful benefits of an Apache/WebDAV configuration for your Subversion repository is that the youngest revisions of your versioned files and directories are immediately available for viewing via a regular web browser. Since Subversion uses URLs to identify versioned resources, those URLs used for HTTP-based repository access can be typed directly into a Web browser. Your browser will issue an HTTP <literal moreinfo=\"none\">GET</literal> request for that URL, and based on whether that URL represents a versioned directory or file, mod_dav_svn will respond with a directory listing or with file contents."
msgstr ""

#: ./build/en/book.xml:14617(para) 
msgid "Since the URLs do not contain any information about which version of the resource you wish to see, mod_dav_svn will always answer with the youngest version. This functionality has the wonderful side-effect that you can pass around Subversion URLs to your peers as references to documents, and those URLs will always point at the latest manifestation of that document. Of course, you can even use the URLs as hyperlinks from other web sites, too."
msgstr ""

#: ./build/en/book.xml:14627(title) 
msgid "Can I view older revisions?"
msgstr ""

#: ./build/en/book.xml:14629(para) 
msgid "With an ordinary web browser? In one word: nope. At least, not with <command moreinfo=\"none\">mod_dav_svn</command> as your only tool."
msgstr ""

#: ./build/en/book.xml:14633(para) 
msgid "Your web browser only speaks ordinary HTTP. That means it only knows how to GET public URLs, which represent the latest versions of files and directories. According to the WebDAV/DeltaV specification, each server defines a private URL syntax for older versions of resources, and that syntax is opaque to clients. To find an older version of a file, a client must follow a specific procedure to <quote>discover</quote> the proper URL; the procedure involves issuing a series of WebDAV PROPFIND requests and understanding DeltaV concepts. This is something your web browser simply can't do."
msgstr ""

#: ./build/en/book.xml:14656(para) 
msgid "Back then, it was called <quote>ViewCVS</quote>."
msgstr ""

#: ./build/en/book.xml:14645(para) 
msgid "So to answer the question, one obvious way to see older revisions of files and directories is by passing the <option>--revision (-r)</option> argument to the <command moreinfo=\"none\">svn list</command> and <command moreinfo=\"none\">svn cat</command> commands. To browse old revisions with your web browser, however, you can use third-party software. A good example of this is ViewVC (<ulink url=\"http://viewvc.tigris.org/\"/>). ViewVC was originally written to display CVS repositories through the web, <placeholder-1/> and the latest releases are able to understand Subversion repositories as well."
msgstr ""

#: ./build/en/book.xml:14663(title) 
msgid "Proper MIME Type"
msgstr ""

#: ./build/en/book.xml:14665(para) 
msgid "When browsing a Subversion repository, the web browser gets a clue about how to render a file's contents by looking at the <literal moreinfo=\"none\">Content-Type:</literal> header returned in Apache's response to the HTTP <literal moreinfo=\"none\">GET</literal> request. The value of this header is some sort of MIME type. By default, Apache will tell the web browsers that all repository files are of the <quote>default</quote> MIME type, typically <literal moreinfo=\"none\">text/plain</literal>. This can be frustrating, however, if a user wishes repository files to render as something more meaningful — for example, it might be nice to have a <filename moreinfo=\"none\">foo.html</filename> file in the repository actually render as HTML when browsing."
msgstr ""

#: ./build/en/book.xml:14680(para) 
msgid "To make this happen, you only need to make sure that your files have the proper <literal moreinfo=\"none\">svn:mime-type</literal> set. This is discussed in more detail in <xref linkend=\"svn.advanced.props.special.mime-type\"/>, and you can even configure your client to automatically attach proper <literal moreinfo=\"none\">svn:mime-type</literal> properties to files entering the repository for the first time; see <xref linkend=\"svn.advanced.props.auto\"/>."
msgstr ""

#: ./build/en/book.xml:14690(para) 
msgid "So in our example, if one were to set the <literal moreinfo=\"none\">svn:mime-type</literal> property to <literal moreinfo=\"none\">text/html</literal> on file <filename moreinfo=\"none\">foo.html</filename>, then Apache would properly tell your web browser to render the file as HTML. One could also attach proper <literal moreinfo=\"none\">image/*</literal> mime-type properties to images, and by doing this, ultimately get an entire web site to be viewable directly from a repository! There's generalyl no problem with doing this, as long as the website doesn't contain any dynamically-generated content."
msgstr ""

#: ./build/en/book.xml:14706(title) 
msgid "Customizing the Look"
msgstr ""

#: ./build/en/book.xml:14708(para) 
msgid "You generally will get more use out of URLs to versioned files—after all, that's where the interesting content tends to lie. But you might have occasion to browse a Subversion directory listing, where you'll quickly note that the generated HTML used to display that listing is very basic, and certainly not intended to be aesthetically pleasing (or even interesting). To enable customization of these directory displays, Subversion provides an XML index feature. A single <literal moreinfo=\"none\">SVNIndexXSLT</literal> directive in your repository's <literal moreinfo=\"none\">Location</literal> block of <filename moreinfo=\"none\">httpd.conf</filename> will instruct mod_dav_svn to generate XML output when displaying a directory listing, and to reference the XSLT stylesheet of your choice:"
msgstr ""

#: ./build/en/book.xml:14724(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n  SVNIndexXSLT \"/svnindex.xsl\"\n  …\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14733(para) 
msgid "Using the <literal moreinfo=\"none\">SVNIndexXSLT</literal> directive and a creative XSLT stylesheet, you can make your directory listings match the color schemes and imagery used in other parts of your website. Or, if you'd prefer, you can use the sample stylesheets provided in the Subversion source distribution's <filename moreinfo=\"none\">tools/xslt/</filename> directory. Keep in mind that the path provided to the <literal moreinfo=\"none\">SVNIndexXSLT</literal> directory is actually a URL path—browsers need to be able to read your stylesheets in order to make use of them!"
msgstr ""

#: ./build/en/book.xml:14747(title) 
msgid "Listing Repositories"
msgstr ""

#: ./build/en/book.xml:14749(para) 
msgid "If you're serving a colllection of repositories from a single URL via the <literal moreinfo=\"none\">SVNParentPath</literal> directive, then it's also possible to have Apache display all available repositories to a web browser. Just activate the <literal moreinfo=\"none\">SVNListParentPath</literal> directive:"
msgstr ""

#: ./build/en/book.xml:14756(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  SVNParentPath /usr/local/svn\n  SVNListParentPath on\n  …\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:14765(para) 
msgid "If a user now points her web browser to the URL <literal moreinfo=\"none\">http://host.example.com/svn/</literal>, she'll see list of all Subversion repositories sitting in <filename moreinfo=\"none\">/usr/local/svn</filename>. Obviously, this can be a security problem, so this feature is turned off by default."
msgstr ""

#: ./build/en/book.xml:14778(title) 
msgid "Apache Logging"
msgstr ""

#: ./build/en/book.xml:14780(para) 
msgid "Because Apache is an HTTP server at heart, it contains fantastically flexible logging feature. It's beyond the scope of this book to discuss all ways logging can be configured, but we should point out that even the most generic <filename moreinfo=\"none\">httpd.conf</filename> file will cause Apache to produce two logs: <filename moreinfo=\"none\">error_log</filename> and <filename moreinfo=\"none\">access_log</filename>. These logs may appear in different places, but are typically created in the logging area of your Apache installation. (On Unix, they often live in <filename moreinfo=\"none\">/usr/local/apache2/logs/</filename>.)"
msgstr ""

#: ./build/en/book.xml:14793(para) 
msgid "The <filename moreinfo=\"none\">error_log</filename> describes any interal errors that Apache runs into as it works. The <filename moreinfo=\"none\">access_log</filename> file records every incoming HTTP request received by Apache. This makes it easy to see, for example, which IP addresses Subversion clients are coming from, how often particular clients use the server, which users are authenticating properly, and which requests succeed or fail."
msgstr ""

#: ./build/en/book.xml:14802(para) 
msgid "Unfortunately, because HTTP is a stateless protocol, even the simplest Subversion client operation generates multiple network requests. It's very difficult to look at the <filename moreinfo=\"none\">access_log</filename> and deduce what the client was doing — most operations look like a series of cryptic <literal moreinfo=\"none\">PROPPATCH</literal>, <literal moreinfo=\"none\">GET</literal>, <literal moreinfo=\"none\">PUT</literal>, and <literal moreinfo=\"none\">REPORT</literal> requests. To make things worse, many client operations send nearly-identical series of requests, so it's even harder to tell them apart."
msgstr ""

#: ./build/en/book.xml:14813(para) 
msgid "<literal moreinfo=\"none\">mod_dav_svn</literal>, however, can come to your aid. By activating an <quote>operational logging</quote> feature, you can ask <literal moreinfo=\"none\">mod_dav_svn</literal> to create a separate log file describing what sort of high-level operations your clients are performing."
msgstr ""

#: ./build/en/book.xml:14820(para) 
msgid "To do this, you need to make use of Apache's <literal moreinfo=\"none\">CustomLog</literal> directive (which is explained in more detail in Apache's own documentation). Be sure to invoke this directive <emphasis>outside</emphasis> of your Subversion <literal moreinfo=\"none\">Location</literal> block:"
msgstr ""

#: ./build/en/book.xml:14827(screen) 
#, no-wrap
msgid "\n&lt;Location /svn&gt;\n  DAV svn\n  …\n&lt;/Location&gt;\n\nCustomLog logs/svn_logfile \"%t %u %{SVN-ACTION}e\" env=SVN-ACTION\n"
msgstr ""

#: ./build/en/book.xml:14836(para) 
msgid "In this example, we're asking Apache to create a special logfile <filename moreinfo=\"none\">svn_logfile</filename> in the standard Apache <filename moreinfo=\"none\">logs</filename> directory. The <literal moreinfo=\"none\">%t</literal> and <literal moreinfo=\"none\">%u</literal> variables are replaced by the time and username of the request, respectively. The really important part are the two instances of <literal moreinfo=\"none\">SVN-ACTION</literal>. When Apache sees that variable, it substitutes the value of the <literal moreinfo=\"none\">SVN-ACTION</literal> environment variable, which is automatically set by <literal moreinfo=\"none\">mod_dav_svn</literal> whenever it detects a high-level client action."
msgstr ""

#: ./build/en/book.xml:14848(para) 
msgid "So instead of having to interpret a traditional <filename moreinfo=\"none\">access_log</filename> like this:"
msgstr ""

#: ./build/en/book.xml:14852(screen) 
#, no-wrap
msgid "\n[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1\" 207 398\n[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1\" 207 449\n[26/Jan/2007:22:25:29 -0600] \"PROPFIND /svn/calc HTTP/1.1\" 207 647\n[26/Jan/2007:22:25:29 -0600] \"REPORT /svn/calc/!svn/vcc/default HTTP/1.1\" 200 607\n[26/Jan/2007:22:25:31 -0600] \"OPTIONS /svn/calc HTTP/1.1\" 200 188\n[26/Jan/2007:22:25:31 -0600] \"MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1\" 201 227\n…\n"
msgstr ""

#: ./build/en/book.xml:14862(para) 
msgid "… you can instead peruse a much more intelligible <filename moreinfo=\"none\">svn_logfile</filename> like this:"
msgstr ""

#: ./build/en/book.xml:14865(screen) 
#, no-wrap
msgid "\n[26/Jan/2007:22:24:20 -0600] - list-dir '/'\n[26/Jan/2007:22:24:27 -0600] - update '/'\n[26/Jan/2007:22:25:29 -0600] - remote-status '/'\n[26/Jan/2007:22:25:31 -0600] sally commit r60\n"
msgstr ""

#: ./build/en/book.xml:14876(title) 
msgid "Other Features"
msgstr ""

#: ./build/en/book.xml:14878(para) 
msgid "Several of the features already provided by Apache in its role as a robust Web server can be leveraged for increased functionality or security in Subversion as well. Subversion communicates with Apache using Neon, which is a generic HTTP/WebDAV library with support for such mechanisms as SSL (the Secure Socket Layer, discussed earlier). If your Subversion client is built to support SSL, then it can access your Apache server using <literal moreinfo=\"none\">https://</literal>."
msgstr ""

#: ./build/en/book.xml:14888(para) 
msgid "Equally useful are other features of the Apache and Subversion relationship, such as the ability to specify a custom port (instead of the default HTTP port 80) or a virtual domain name by which the Subversion repository should be accessed, or the ability to access the repository through an HTTP proxy. These things are all supported by Neon, so Subversion gets that support for free."
msgstr ""

#: ./build/en/book.xml:14896(para) 
msgid "Finally, because <command moreinfo=\"none\">mod_dav_svn</command> is speaking a subset of the WebDAV/DeltaV protocol, it's possible to access the repository via third-party DAV clients. Most modern operating systems (Win32, OS X, and Linux) have the built-in ability to mount a DAV server as a standard network share. This is a complicated topic; for details, read <xref linkend=\"svn.webdav\"/>."
msgstr ""

#: ./build/en/book.xml:14915(title) 
msgid "Path-Based Authorization"
msgstr ""

#: ./build/en/book.xml:14917(para) 
msgid "Both Apache and <command moreinfo=\"none\">svnserve</command> are capable of granting (or denying) permissions to users. Typically this is done over the entire repository: a user can read the repository (or not), and she can write to the repository (or not). It's also possible, however, to define finer-grained access rules. One set of users may have permssion to write to a certain directory in the repository, but not others; another directory might not even be readable by all but a few special people."
msgstr ""

#: ./build/en/book.xml:14927(para) 
msgid "Both servers use a common file format to describe these path-based access rules. In the case of Apache, one needs to load the <command moreinfo=\"none\">mod_authz_svn</command> module and then add the <literal moreinfo=\"none\">AuthzSVNAccessFile</literal> directive (within the <filename moreinfo=\"none\">httpd.conf</filename> file) pointing to your own rules-file. (For a full explanation, see <xref linkend=\"svn.serverconfig.httpd.authz.perdir\"/>.) If you're using <command moreinfo=\"none\">svnserve</command>, then you need to make the <literal moreinfo=\"none\">authz-db</literal> variable (within <filename moreinfo=\"none\">svnserve.conf</filename>) point to your rules-file."
msgstr ""

#: ./build/en/book.xml:14940(title) 
msgid "Do you really need path-based access control?"
msgstr ""

#: ./build/en/book.xml:14942(para) 
msgid "A lot of administrators setting up Subversion for the first time tend to jump into path-based access control without giving it a lot of thought. The administrator usually knows which teams of people are working on which projects, so it's easy to jump in and grant certain teams access to certain directories and not others. It seems like a natural thing, and it appeases the administrator's desire to maintain tight control of the repository."
msgstr ""

#: ./build/en/book.xml:14951(para) 
msgid "Note, though, that there are often invisible (and visible!) costs associated with this feature. In the visible category, the server needs to do a lot more work to ensure that the user has the right to read or write each specific path; in certain situations, there's very noticeable performance loss. In the invisible category, consider the culture you're creating. Most of the time, while certain users <emphasis>shouldn't</emphasis> be committing changes to certain parts of the repository, that social contract doesn't need to be technologically enforced. Teams can sometimes spontaneously collaborate with each other; someone may want to help someone else out by committing to an area she doesn't normally work on. By preventing this sort of thing at the server level, you're setting up barriers to unexpected collaboration. You're also creating a bunch of rules that need to be maintained as projects develop, new users are added, and so on. It's a bunch of extra work to maintain."
msgstr ""

#: ./build/en/book.xml:14970(para) 
msgid "Remember that this is a version control system! Even if somebody accidentally commits a change to something they shouldn't, it's easy to undo the change. And if a user commits to the wrong place with deliberate malice, then it's a social problem anyway, and that the problem needs to be dealt with outside of Subversion."
msgstr ""

#: ./build/en/book.xml:14983(para) 
msgid "A common theme in this book!"
msgstr ""

#: ./build/en/book.xml:14977(para) 
msgid "So before you begin restricting users' access rights, ask yourself if there's a real, honest need for this, or if it's just something that <quote>sounds good</quote> to an administrator. Decide whether it's worth sacrificing some server speed for, and remember that there's very little risk involved; it's bad to become dependent on technology as a crutch for social problems.<placeholder-1/>."
msgstr ""

#: ./build/en/book.xml:14986(para) 
msgid "As an example to ponder, consider that the Subversion project itself has always had a notion of who is allowed to commit where, but it's always been enforced socially. This is a good model of community trust, especially for open-source projects. Of course, sometimes there <emphasis>are</emphasis> truly legitimate needs for path-based access control; within corporations, for example, certain types of data really can be sensitive, and access needs to be genuinely restricted to small groups of people."
msgstr ""

#: ./build/en/book.xml:14998(para) 
msgid "Once your server knows where to find your rules-file, it's time to define the rules."
msgstr ""

#: ./build/en/book.xml:15001(para) 
msgid "The syntax of the file is the same familiar one used by <command moreinfo=\"none\">svnserve.conf</command> and the runtime configuration files. Lines that start with a hash (<literal moreinfo=\"none\">#</literal>) are ignored. In its simplest form, each section names a repository and path within it, and the authenticated usernames are the option names within each section. The value of each option describes the user's level of access to the repository path: either <literal moreinfo=\"none\">r</literal> (read-only) or <literal moreinfo=\"none\">rw</literal> (read-write). If the user is not mentioned at all, no access is allowed."
msgstr ""

#: ./build/en/book.xml:15013(para) 
msgid "To be more specific: the value of the section-names are either of the form <literal moreinfo=\"none\">[repos-name:path]</literal> or the form <literal moreinfo=\"none\">[path]</literal>. If you're using the <literal moreinfo=\"none\">SVNParentPath</literal> directive, then it's important to specify the repository names in your sections. If you omit them, then a section like <literal moreinfo=\"none\">[/some/dir]</literal> will match the path <filename moreinfo=\"none\">/some/dir</filename> in <emphasis>every</emphasis> repository. If you're using the <literal moreinfo=\"none\">SVNPath</literal> directive, however, then it's fine to only define paths in your sections—after all, there's only one repository."
msgstr ""

#: ./build/en/book.xml:15025(screen) 
#, no-wrap
msgid "\n[calc:/branches/calc/bug-142]\nharry = rw\nsally = r\n"
msgstr ""

#: ./build/en/book.xml:15031(para) 
msgid "In this first example, the user <literal moreinfo=\"none\">harry</literal> has full read and write access on the <filename moreinfo=\"none\">/branches/calc/bug-142</filename> directory in the <literal moreinfo=\"none\">calc</literal> repository, but the user <literal moreinfo=\"none\">sally</literal> has read-only access. Any other users are blocked from accessing this directory."
msgstr ""

#: ./build/en/book.xml:15038(para) 
msgid "Of course, permissions are inherited from parent to child directory. That means that we can specify a subdirectory with a different access policy for Sally:"
msgstr ""

#: ./build/en/book.xml:15042(screen) 
#, no-wrap
msgid "\n[calc:/branches/calc/bug-142]\nharry = rw\nsally = r\n\n# give sally write access only to the 'testing' subdir\n[calc:/branches/calc/bug-142/testing]\nsally = rw\n"
msgstr ""

#: ./build/en/book.xml:15052(para) 
msgid "Now Sally can write to the <filename moreinfo=\"none\">testing</filename> subdirectory of the branch, but can still only read other parts. Harry, meanwhile, continues to have complete read-write access to the whole branch."
msgstr ""

#: ./build/en/book.xml:15057(para) 
msgid "It's also possible to explicitly deny permission to someone via inheritance rules, by setting the username variable to nothing:"
msgstr ""

#: ./build/en/book.xml:15061(screen) 
#, no-wrap
msgid "\n[calc:/branches/calc/bug-142]\nharry = rw\nsally = r\n\n[calc:/branches/calc/bug-142/secret]\nharry =\n"
msgstr ""

#: ./build/en/book.xml:15070(para) 
msgid "In this example, Harry has read-write access to the entire <filename moreinfo=\"none\">bug-142</filename> tree, but has absolutely no access at all to the <filename moreinfo=\"none\">secret</filename> subdirectory within it."
msgstr ""

#: ./build/en/book.xml:15075(para) 
msgid "The thing to remember is that the most specific path always matches first. The server tries to match the path itself, and then the parent of the path, then the parent of that, and so on. The net effect is that mentioning a specific path in the accessfile will always override any permissions inherited from parent directories."
msgstr ""

#: ./build/en/book.xml:15082(para) 
msgid "By default, nobody has any access to the repository at all. That means that if you're starting with an empty file, you'll probably want to give at least read permission to all users at the root of the repository. You can do this by using the asterisk variable (<literal moreinfo=\"none\">*</literal>), which means <quote>all users</quote>:"
msgstr ""

#: ./build/en/book.xml:15089(screen) 
#, no-wrap
msgid "\n[/]\n* = r\n"
msgstr ""

#: ./build/en/book.xml:15094(para) 
msgid "This is a common setup; notice that there's no repository name mentioned in the section name. This makes all repositories world readable to all users. Once all users have read-access to the repositories, you can give explicit <literal moreinfo=\"none\">rw</literal> permission to certain users on specific subdirectories within specific repositories."
msgstr ""

#: ./build/en/book.xml:15101(para) 
msgid "The asterisk variable (<literal moreinfo=\"none\">*</literal>) is also worth special mention here: it's the <emphasis>only</emphasis> pattern which matches an anonymous user. If you've configured your server block to allow a mixture of anonymous and authenticated access, all users start out accessing anonymously. The server looks for a <literal moreinfo=\"none\">*</literal> value defined for the path being accessed; if it can't find one, then it demands real authentication from the client."
msgstr ""

#: ./build/en/book.xml:15111(para) 
msgid "The access file also allows you to define whole groups of users, much like the Unix <filename moreinfo=\"none\">/etc/group</filename> file:"
msgstr ""

#: ./build/en/book.xml:15115(screen) 
#, no-wrap
msgid "\n[groups]\ncalc-developers = harry, sally, joe\npaint-developers = frank, sally, jane\neveryone = harry, sally, joe, frank, sally, jane\n"
msgstr ""

#: ./build/en/book.xml:15122(para) 
msgid "Groups can be granted access control just like users. Distinguish them with an <quote>at</quote> (<literal moreinfo=\"none\">@</literal>) prefix:"
msgstr ""

#: ./build/en/book.xml:15126(screen) 
#, no-wrap
msgid "\n[calc:/projects/calc]\n@calc-developers = rw\n\n[paint:/projects/paint]\n@paint-developers = rw\njane = r\n"
msgstr ""

#: ./build/en/book.xml:15135(para) 
msgid "Groups can also be defined to contain other groups:"
msgstr ""

#: ./build/en/book.xml:15137(screen) 
#, no-wrap
msgid "\n[groups]\ncalc-developers = harry, sally, joe\npaint-developers = frank, sally, jane\neveryone = @calc-developers, @paint-developers\n"
msgstr ""

#: ./build/en/book.xml:15152(title) 
msgid "Supporting Multiple Repository Access Methods"
msgstr ""

#: ./build/en/book.xml:15154(para) 
msgid "You've seen how a repository can be accessed in many different ways. But is it possible—or safe—for your repository to be accessed by multiple methods simultaneously? The answer is yes, provided you use a bit of foresight."
msgstr ""

#: ./build/en/book.xml:15159(para) 
msgid "At any given time, these processes may require read and write access to your repository:"
msgstr ""

#: ./build/en/book.xml:15164(para) 
msgid "regular system users using a Subversion client (as themselves) to access the repository directly via <literal moreinfo=\"none\">file://</literal> URLs;"
msgstr ""

#: ./build/en/book.xml:15169(para) 
msgid "regular system users connecting to SSH-spawned private <command moreinfo=\"none\">svnserve</command> processes (running as themselves) which access the repository;"
msgstr ""

#: ./build/en/book.xml:15174(para) 
msgid "an <command moreinfo=\"none\">svnserve</command> process—either a daemon or one launched by <command moreinfo=\"none\">inetd</command>—running as a particular fixed user;"
msgstr ""

#: ./build/en/book.xml:15180(para) 
msgid "an Apache <command moreinfo=\"none\">httpd</command> process, running as a particular fixed user."
msgstr ""

#: ./build/en/book.xml:15185(para) 
msgid "The most common problem administrators run into is repository ownership and permissions. Does every process (or user) in the previous list have the rights to read and write the Berkeley DB files? Assuming you have a Unix-like operating system, a straightforward approach might be to place every potential repository user into a new <literal moreinfo=\"none\">svn</literal> group, and make the repository wholly owned by that group. But even that's not enough, because a process may write to the database files using an unfriendly umask—one that prevents access by other users."
msgstr ""

#: ./build/en/book.xml:15196(para) 
msgid "So the next step beyond setting up a common group for repository users is to force every repository-accessing process to use a sane umask. For users accessing the repository directly, you can make the <command moreinfo=\"none\">svn</command> program into a wrapper script that first sets <command moreinfo=\"none\">umask 002</command> and then runs the real <command moreinfo=\"none\">svn</command> client program. You can write a similar wrapper script for the <command moreinfo=\"none\">svnserve</command> program, and add a <command moreinfo=\"none\">umask 002</command> command to Apache's own startup script, <filename moreinfo=\"none\">apachectl</filename>. For example:"
msgstr ""

#: ./build/en/book.xml:15207(screen) 
#, no-wrap
msgid "\n$ cat /usr/bin/svn\n\n#!/bin/sh\n\numask 002\n/usr/bin/svn-real \"$@\"\n\n"
msgstr ""

#: ./build/en/book.xml:15217(para) 
msgid "Another common problem is often encountered on Unix-like systems. As a repository is used, Berkeley DB occasionally creates new log files to journal its actions. Even if the repository is wholly owned by the <command moreinfo=\"none\">svn</command> group, these newly created files won't necessarily be owned by that same group, which then creates more permissions problems for your users. A good workaround is to set the group SUID bit on the repository's <filename moreinfo=\"none\">db</filename> directory. This causes all newly-created log files to have the same group owner as the parent directory."
msgstr ""

#: ./build/en/book.xml:15228(para) 
msgid "Once you've jumped through these hoops, your repository should be accessible by all the necessary processes. It may seem a bit messy and complicated, but the problems of having multiple users sharing write-access to common files are classic ones that are not often elegantly solved."
msgstr ""

#: ./build/en/book.xml:15234(para) 
msgid "Fortunately, most repository administrators will never <emphasis>need</emphasis> to have such a complex configuration. Users who wish to access repositories that live on the same machine are not limited to using <literal moreinfo=\"none\">file://</literal> access URLs—they can typically contact the Apache HTTP server or <command moreinfo=\"none\">svnserve</command> using <literal moreinfo=\"none\">localhost</literal> for the server name in their <literal moreinfo=\"none\">http://</literal> or <literal moreinfo=\"none\">svn://</literal> URLs. And to maintain multiple server processes for your Subversion repositories is likely to be more of a headache than necessary. We recommend you choose the server that best meets your needs and stick with it!"
msgstr ""

#: ./build/en/book.xml:15248(title) 
msgid "The svn+ssh:// server checklist"
msgstr ""

#: ./build/en/book.xml:15250(para) 
msgid "It can be quite tricky to get a bunch of users with existing SSH accounts to share a repository without permissions problems. If you're confused about all the things that you (as an administrator) need to do on a Unix-like system, here's a quick checklist that resummarizes some of things discussed in this section:"
msgstr ""

#: ./build/en/book.xml:15259(para) 
msgid "All of your SSH users need to be able to read and write to the repository. Put all the SSH users into a single group. Make the repository wholly owned by that group, and set the group permissions to read/write."
msgstr ""

#: ./build/en/book.xml:15266(para) 
msgid "Your users need to use a sane umask when accessing the repository. Make sure that <command moreinfo=\"none\">svnserve</command> (<filename moreinfo=\"none\">/usr/bin/svnserve</filename>, or wherever it lives in <literal moreinfo=\"none\">$PATH</literal>) is actually a wrapper script which sets <command moreinfo=\"none\">umask 002</command> and executes the real <command moreinfo=\"none\">svnserve</command> binary. Take similar measures when using <command moreinfo=\"none\">svnlook</command> and <command moreinfo=\"none\">svnadmin</command>. Either run them with a sane umask, or wrap them as described above."
msgstr ""

#: ./build/en/book.xml:15295(title) 
msgid "Customizing Your Subversion Experience"
msgstr ""

#: ./build/en/book.xml:15297(para) 
msgid "### TODO: Chapter opening ###"
msgstr ""

#: ./build/en/book.xml:15299(para) 
msgid "### TODO: Gut the runtime config stuff like I did the property stuff, making larger topical sections to which the runtime config stuff generally refers. Like already exists for external diff/diff3, add, for example, a section on external editors. ###"
msgstr ""

#: ./build/en/book.xml:15309(title) 
msgid "Runtime Configuration Area"
msgstr ""

#: ./build/en/book.xml:15311(para) 
msgid "Subversion provides many optional behaviors that can be controlled by the user. Many of these options are of the kind that a user would wish to apply to all Subversion operations. So, rather than forcing users to remember command-line arguments for specifying these options, and to use them for each and every operation they perform, Subversion uses configuration files, segregated into a Subversion configuration area."
msgstr ""

#: ./build/en/book.xml:15319(para) 
msgid "The Subversion <firstterm>configuration area</firstterm> is a two-tiered hierarchy of option names and their values. Usually, this boils down to a special directory that contains <firstterm>configuration files</firstterm> (the first tier), which are just text files in standard INI format (with <quote>sections</quote> providing the second tier). These files can be easily edited using your favorite text editor (such as Emacs or vi), and contain directives read by the client to determine which of several optional behaviors the user prefers."
msgstr ""

#: ./build/en/book.xml:15332(title) 
msgid "Configuration Area Layout"
msgstr ""

#: ./build/en/book.xml:15346(para) 
msgid "The <literal moreinfo=\"none\">APPDATA</literal> environment variable points to the <filename moreinfo=\"none\">Application Data</filename> area, so you can always refer to this folder as <filename moreinfo=\"none\">%APPDATA%\\Subversion</filename>."
msgstr ""

#: ./build/en/book.xml:15334(para) 
msgid "The first time that the <command moreinfo=\"none\">svn</command> command-line client is executed, it creates a per-user configuration area. On Unix-like systems, this area appears as a directory named <filename moreinfo=\"none\">.subversion</filename> in the user's home directory. On Win32 systems, Subversion creates a folder named <filename moreinfo=\"none\">Subversion</filename>, typically inside the <filename moreinfo=\"none\">Application Data</filename> area of the user's profile directory (which, by the way, is usually a hidden directory). However, on this platform the exact location differs from system to system, and is dictated by the Windows registry. <placeholder-1/> We will refer to the per-user configuration area using its Unix name, <filename moreinfo=\"none\">.subversion</filename>."
msgstr ""

#: ./build/en/book.xml:15354(para) 
msgid "In addition to the per-user configuration area, Subversion also recognizes the existence of a system-wide configuration area. This gives system administrators the ability to establish defaults for all users on a given machine. Note that the system-wide configuration area does not alone dictate mandatory policy—the settings in the per-user configuration area override those in the system-wide one, and command-line arguments supplied to the <command moreinfo=\"none\">svn</command> program have the final word on behavior. On Unix-like platforms, the system-wide configuration area is expected to be the <filename moreinfo=\"none\">/etc/subversion</filename> directory; on Windows machines, it looks for a <filename moreinfo=\"none\">Subversion</filename> directory inside the common <filename moreinfo=\"none\">Application Data</filename> location (again, as specified by the Windows Registry). Unlike the per-user case, the <command moreinfo=\"none\">svn</command> program does not attempt to create the system-wide configuration area."
msgstr ""

#: ./build/en/book.xml:15372(para) 
msgid "The per-user configuration area currently contains three files—two configuration files (<filename moreinfo=\"none\">config</filename> and <filename moreinfo=\"none\">servers</filename>), and a <filename moreinfo=\"none\">README.txt</filename> file which describes the INI format. At the time of their creation, the files contain default values for each of the supported Subversion options, mostly commented out and grouped with textual descriptions about how the values for the key affect Subversion's behavior. To change a certain behavior, you need only to load the appropriate configuration file into a text editor, and modify the desired option's value. If at any time you wish to have the default configuration settings restored, you can simply remove (or rename) your configuration directory and then run some innocuous <command moreinfo=\"none\">svn</command> command, such as <command moreinfo=\"none\">svn --version</command>. A new configuration directory with the default contents will be created."
msgstr ""

#: ./build/en/book.xml:15389(para) 
msgid "The per-user configuration area also contains a cache of authentication data. The <filename moreinfo=\"none\">auth</filename> directory holds a set of subdirectories that contain pieces of cached information used by Subversion's various supported authentication methods. This directory is created in such a way that only the user herself has permission to read its contents."
msgstr ""

#: ./build/en/book.xml:15401(title) 
msgid "Configuration and the Windows Registry"
msgstr ""

#: ./build/en/book.xml:15403(para) 
msgid "In addition to the usual INI-based configuration area, Subversion clients running on Windows platforms may also use the Windows registry to hold the configuration data. The option names and their values are the same as in the INI files. The <quote>file/section</quote> hierarchy is preserved as well, though addressed in a slightly different fashion—in this schema, files and sections are just levels in the registry key tree."
msgstr ""

#: ./build/en/book.xml:15412(para) 
msgid "Subversion looks for system-wide configuration values under the <literal moreinfo=\"none\">HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion</literal> key. For example, the <literal moreinfo=\"none\">global-ignores</literal> option, which is in the <literal moreinfo=\"none\">miscellany</literal> section of the <filename moreinfo=\"none\">config</filename> file, would be found at <literal moreinfo=\"none\">HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Config\\Miscellany\\global-ignores</literal>. Per-user configuration values should be stored under <literal moreinfo=\"none\">HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion</literal>."
msgstr ""

#: ./build/en/book.xml:15423(para) 
msgid "Registry-based configuration options are parsed <emphasis>before</emphasis> their file-based counterparts, so are overridden by values found in the configuration files. In other words, configuration priority is granted in the following order on a Windows system:"
msgstr ""

#: ./build/en/book.xml:15431(para) 
msgid "Command-line options"
msgstr ""

#: ./build/en/book.xml:15434(para) 
msgid "The per-user INI files"
msgstr ""

#: ./build/en/book.xml:15437(para) 
msgid "The per-user Registry values"
msgstr ""

#: ./build/en/book.xml:15440(para) 
msgid "The system-wide INI files"
msgstr ""

#: ./build/en/book.xml:15443(para) 
msgid "The system-wide Registry values"
msgstr ""

#: ./build/en/book.xml:15447(para) 
msgid "Also, the Windows Registry doesn't really support the notion of something being <quote>commented out</quote>. However, Subversion will ignore any option key whose name begins with a hash (<literal moreinfo=\"none\">#</literal>) character. This allows you to effectively comment out a Subversion option without deleting the entire key from the Registry, obviously simplifying the process of restoring that option."
msgstr ""

#: ./build/en/book.xml:15455(para) 
msgid "The <command moreinfo=\"none\">svn</command> command-line client never attempts to write to the Windows Registry, and will not attempt to create a default configuration area there. You can create the keys you need using the <command moreinfo=\"none\">REGEDIT</command> program. Alternatively, you can create a <filename moreinfo=\"none\">.reg</filename> file, and then double-click on that file from the Explorer shell, which will cause the data to be merged into your registry."
msgstr ""

#: ./build/en/book.xml:15465(title) 
msgid "Sample Registration Entries (.reg) File."
msgstr ""

#: ./build/en/book.xml:15467(programlisting) 
#, no-wrap
msgid "\nREGEDIT4\n\n[HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Servers\\groups]\n\n[HKEY_LOCAL_MACHINE\\Software\\Tigris.org\\Subversion\\Servers\\global]\n\"#http-proxy-host\"=\"\"\n\"#http-proxy-port\"=\"\"\n\"#http-proxy-username\"=\"\"\n\"#http-proxy-password\"=\"\"\n\"#http-proxy-exceptions\"=\"\"\n\"#http-timeout\"=\"0\"\n\"#http-compression\"=\"yes\"\n\"#neon-debug-mask\"=\"\"\n\"#ssl-authority-files\"=\"\"\n\"#ssl-trust-default-ca\"=\"\"\n\"#ssl-client-cert-file\"=\"\"\n\"#ssl-client-cert-password\"=\"\"\n\n[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\auth]\n\"#store-passwords\"=\"yes\"\n\"#store-auth-creds\"=\"yes\"\n\n[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\helpers]\n\"#editor-cmd\"=\"notepad\"\n\"#diff-cmd\"=\"\"\n\"#diff3-cmd\"=\"\"\n\"#diff3-has-program-arg\"=\"\"\n\n[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\tunnels]\n\n[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\miscellany]\n\"#global-ignores\"=\"*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store\"\n\"#log-encoding\"=\"\"\n\"#use-commit-times\"=\"\"\n\"#no-unlock\"=\"\"\n\"#enable-auto-props\"=\"\"\n\n[HKEY_CURRENT_USER\\Software\\Tigris.org\\Subversion\\Config\\auto-props]\n\n"
msgstr ""

#: ./build/en/book.xml:15510(para) 
msgid "The previous example shows the contents of a <filename moreinfo=\"none\">.reg</filename> file which contains some of the most commonly used configuration options and their default values. Note the presence of both system-wide (for network proxy-related options) and per-user settings (editor programs and password storage, among others). Also note that all the options are effectively commented out. You need only to remove the hash (<literal moreinfo=\"none\">#</literal>) character from the beginning of the option names, and set the values as you desire."
msgstr ""

#: ./build/en/book.xml:15525(title) 
msgid "Configuration Options"
msgstr ""

#: ./build/en/book.xml:15527(para) 
msgid "### TODO: Rework and move this section to the Reference ###"
msgstr ""

#: ./build/en/book.xml:15529(para) 
msgid "In this section, we will discuss the specific run-time configuration options that are currently supported by Subversion."
msgstr ""

#: ./build/en/book.xml:15535(title) 
msgid "Servers"
msgstr ""

#: ./build/en/book.xml:15537(para) 
msgid "The <filename moreinfo=\"none\">servers</filename> file contains Subversion configuration options related to the network layers. There are two special section names in this file—<literal moreinfo=\"none\">groups</literal> and <literal moreinfo=\"none\">global</literal>. The <literal moreinfo=\"none\">groups</literal> section is essentially a cross-reference table. The keys in this section are the names of other sections in the file; their values are <firstterm>globs</firstterm>—textual tokens which possibly contain wildcard characters—that are compared against the hostnames of the machine to which Subversion requests are sent."
msgstr ""

#: ./build/en/book.xml:15549(programlisting) 
#, no-wrap
msgid "\n[groups]\nbeanie-babies = *.red-bean.com\ncollabnet = svn.collab.net\n\n[beanie-babies]\n…\n\n[collabnet]\n…\n"
msgstr ""

#: ./build/en/book.xml:15561(para) 
msgid "When Subversion is used over a network, it attempts to match the name of the server it is trying to reach with a group name under the <literal moreinfo=\"none\">groups</literal> section. If a match is made, Subversion then looks for a section in the <filename moreinfo=\"none\">servers</filename> file whose name is the matched group's name. From that section it reads the actual network configuration settings."
msgstr ""

#: ./build/en/book.xml:15569(para) 
msgid "The <literal moreinfo=\"none\">global</literal> section contains the settings that are meant for all of the servers not matched by one of the globs under the <literal moreinfo=\"none\">groups</literal> section. The options available in this section are exactly the same as those valid for the other server sections in the file (except, of course, the special <literal moreinfo=\"none\">groups</literal> section), and are as follows:"
msgstr ""

#: ./build/en/book.xml:15580(literal) 
msgid "http-proxy-host"
msgstr ""

#: ./build/en/book.xml:15582(para) 
msgid "This specifies the hostname of the proxy computer through which your HTTP-based Subversion requests must pass. It defaults to an empty value, which means that Subversion will not attempt to route HTTP requests through a proxy computer, and will instead attempt to contact the destination machine directly."
msgstr ""

#: ./build/en/book.xml:15591(literal) 
msgid "http-proxy-port"
msgstr ""

#: ./build/en/book.xml:15593(para) 
msgid "This specifies the port number on the proxy host to use. It defaults to an empty value."
msgstr ""

#: ./build/en/book.xml:15598(literal) 
msgid "http-proxy-username"
msgstr ""

#: ./build/en/book.xml:15600(para) 
msgid "This specifies the username to supply to the proxy machine. It defaults to an empty value."
msgstr ""

#: ./build/en/book.xml:15605(literal) 
msgid "http-proxy-password"
msgstr ""

#: ./build/en/book.xml:15607(para) 
msgid "This specifies the password to supply to the proxy machine. It defaults to an empty value."
msgstr ""

#: ./build/en/book.xml:15612(literal) 
msgid "http-timeout"
msgstr ""

#: ./build/en/book.xml:15614(para) 
msgid "This specifies the amount of time, in seconds, to wait for a server response. If you experience problems with a slow network connection causing Subversion operations to timeout, you should increase the value of this option. The default value is <literal moreinfo=\"none\">0</literal>, which instructs the underlying HTTP library, Neon, to use its default timeout setting."
msgstr ""

#: ./build/en/book.xml:15625(literal) 
msgid "http-compression"
msgstr ""

#: ./build/en/book.xml:15627(para) 
msgid "This specifies whether or not Subversion should attempt to compress network requests made to DAV-ready servers. The default value is <literal moreinfo=\"none\">yes</literal> (though compression will only occur if that capability is compiled into the network layer). Set this to <literal moreinfo=\"none\">no</literal> to disable compression, such as when debugging network transmissions."
msgstr ""

#: ./build/en/book.xml:15637(literal) 
msgid "neon-debug-mask"
msgstr ""

#: ./build/en/book.xml:15639(para) 
msgid "This is an integer mask that the underlying HTTP library, Neon, uses for choosing what type of debugging output to yield. The default value is <literal moreinfo=\"none\">0</literal>, which will silence all debugging output. For more information about how Subversion makes use of Neon, see <xref linkend=\"svn.developer\"/>."
msgstr ""

#: ./build/en/book.xml:15648(literal) 
msgid "ssl-authority-files"
msgstr ""

#: ./build/en/book.xml:15650(para) 
msgid "This is a semicolon-delimited list of paths to files containing certificates of the certificate authorities (or CAs) that are accepted by the Subversion client when accessing the repository over HTTPS."
msgstr ""

#: ./build/en/book.xml:15658(literal) 
msgid "ssl-trust-default-ca"
msgstr ""

#: ./build/en/book.xml:15660(para) 
msgid "Set this variable to <literal moreinfo=\"none\">yes</literal> if you want Subversion to automatically trust the set of default CAs that ship with OpenSSL."
msgstr ""

#: ./build/en/book.xml:15666(literal) 
msgid "ssl-client-cert-file"
msgstr ""

#: ./build/en/book.xml:15668(para) 
msgid "If a host (or set of hosts) requires an SSL client certificate, you'll normally be prompted for a path to your certificate. By setting this variable to that same path, Subversion will be able to find your client certificate automatically without prompting you. There's no standard place to store your certificate on disk; Subversion will grab it from any path you specify."
msgstr ""

#: ./build/en/book.xml:15679(literal) 
msgid "ssl-client-cert-password"
msgstr ""

#: ./build/en/book.xml:15681(para) 
msgid "If your SSL client certificate file is encrypted by a passphrase, Subversion will prompt you for the passphrase whenever the certificate is used. If you find this annoying (and don't mind storing the password in the <filename moreinfo=\"none\">servers</filename> file), then you can set this variable to the certificate's passphrase. You won't be prompted anymore."
msgstr ""

#: ./build/en/book.xml:15696(title) 
msgid "Config"
msgstr ""

#: ./build/en/book.xml:15698(para) 
msgid "The <filename moreinfo=\"none\">config</filename> file contains the rest of the currently available Subversion run-time options, those not related to networking. There are only a few options in use at this time, but they are again grouped into sections in expectation of future additions."
msgstr ""

#: ./build/en/book.xml:15704(para) 
msgid "The <literal moreinfo=\"none\">auth</literal> section contains settings related to Subversion's authentication and authorization against the repository. It contains:"
msgstr ""

#: ./build/en/book.xml:15710(literal) 
msgid "store-passwords"
msgstr ""

#: ./build/en/book.xml:15712(para) 
msgid "This instructs Subversion to cache, or not to cache, passwords that are supplied by the user in response to server authentication challenges. The default value is <literal moreinfo=\"none\">yes</literal>. Set this to <literal moreinfo=\"none\">no</literal> to disable this on-disk password caching. You can override this option for a single instance of the <command moreinfo=\"none\">svn</command> command using the <option>--no-auth-cache</option> command-line parameter (for those subcommands that support it). For more information, see <xref linkend=\"svn.serverconfig.netmodel.credcache\"/>."
msgstr ""

#: ./build/en/book.xml:15725(literal) 
msgid "store-auth-creds"
msgstr ""

#: ./build/en/book.xml:15727(para) 
msgid "This setting is the same as <literal moreinfo=\"none\">store-passwords</literal>, except that it enables or disables disk-caching of <emphasis>all</emphasis> authentication information: usernames, passwords, server certificates, and any other types of cacheable credentials."
msgstr ""

#: ./build/en/book.xml:15737(para) 
msgid "The <literal moreinfo=\"none\">helpers</literal> section controls which external applications Subversion uses to accomplish its tasks. Valid options in this section are:"
msgstr ""

#: ./build/en/book.xml:15743(literal) 
msgid "editor-cmd"
msgstr ""

#: ./build/en/book.xml:15745(para) 
msgid "This specifies the program Subversion will use to query the user for a log message during a commit operation, such as when using <command moreinfo=\"none\">svn commit</command> without either the <option>--message</option> (<option>-m</option>) or <option>--file</option> (<option>-F</option>) options. This program is also used with the <command moreinfo=\"none\">svn propedit</command> command—a temporary file is populated with the current value of the property the user wishes to edit, and the edits take place right in the editor program (see <xref linkend=\"svn.advanced.props\"/>). This option's default value is empty. The order of priority for determining the editor command is:"
msgstr ""

#: ./build/en/book.xml:15760(para) 
msgid "Command-line option <literal moreinfo=\"none\">--editor-cmd</literal>"
msgstr ""

#: ./build/en/book.xml:15763(para) 
msgid "Environment variable <literal moreinfo=\"none\">SVN_EDITOR</literal>"
msgstr ""

#: ./build/en/book.xml:15766(para) 
msgid "Configuration option <literal moreinfo=\"none\">editor-cmd</literal>"
msgstr ""

#: ./build/en/book.xml:15769(para) 
msgid "Environment variable <literal moreinfo=\"none\">VISUAL</literal>"
msgstr ""

#: ./build/en/book.xml:15772(para) 
msgid "Environment variable <literal moreinfo=\"none\">EDITOR</literal>"
msgstr ""

#: ./build/en/book.xml:15775(para) 
msgid "Possibly, a default value built in to Subversion (not present in the official builds)"
msgstr ""

#: ./build/en/book.xml:15779(para) 
msgid "The value of any of these options or variables is (unlike <literal moreinfo=\"none\">diff-cmd</literal>) the beginning of a command line to be executed by the shell. Subversion appends a space and the pathname of the temporary file to be edited. The editor should modify the temporary file and return a zero exit code to indicate success."
msgstr ""

#: ./build/en/book.xml:15788(literal) 
msgid "diff-cmd"
msgstr ""

#: ./build/en/book.xml:15790(para) 
msgid "This specifies the absolute path of a differencing program, used when Subversion generates <quote>diff</quote> output (such as when using the <command moreinfo=\"none\">svn diff</command> command). By default Subversion uses an internal differencing library—setting this option will cause it to perform this task using an external program. See <xref linkend=\"svn.advanced.externaldifftools\"/> for more details on using such programs."
msgstr ""

#: ./build/en/book.xml:15802(literal) 
msgid "diff3-cmd"
msgstr ""

#: ./build/en/book.xml:15804(para) 
msgid "This specifies the absolute path of a three-way differencing program. Subversion uses this program to merge changes made by the user with those received from the repository. By default Subversion uses an internal differencing library—setting this option will cause it to perform this task using an external program. See <xref linkend=\"svn.advanced.externaldifftools\"/> for more details on using such programs."
msgstr ""

#: ./build/en/book.xml:15815(literal) 
msgid "diff3-has-program-arg"
msgstr ""

#: ./build/en/book.xml:15817(para) 
msgid "This flag should be set to <literal moreinfo=\"none\">true</literal> if the program specified by the <literal moreinfo=\"none\">diff3-cmd</literal> option accepts a <option>--diff-program</option> command-line parameter."
msgstr ""

#: ./build/en/book.xml:15826(para) 
msgid "The <literal moreinfo=\"none\">tunnels</literal> section allows you to define new tunnel schemes for use with <command moreinfo=\"none\">svnserve</command> and <literal moreinfo=\"none\">svn://</literal> client connections. For more details, see <xref linkend=\"svn.serverconfig.svnserve.sshauth\"/>."
msgstr ""

#: ./build/en/book.xml:15834(para) 
msgid "Anyone for potluck dinner?"
msgstr ""

#: ./build/en/book.xml:15831(para) 
msgid "The <literal moreinfo=\"none\">miscellany</literal> section is where everything that doesn't belong elsewhere winds up. <placeholder-1/> In this section, you can find:"
msgstr ""

#: ./build/en/book.xml:15840(literal) 
msgid "global-ignores"
msgstr ""

#: ./build/en/book.xml:15842(para) 
msgid "When running the <command moreinfo=\"none\">svn status</command> command, Subversion lists unversioned files and directories along with the versioned ones, annotating them with a <literal moreinfo=\"none\">?</literal> character (see <xref linkend=\"svn.tour.cycle.examine.status\"/>). Sometimes, it can be annoying to see uninteresting, unversioned items—for example, object files that result from a program's compilation—in this display. The <literal moreinfo=\"none\">global-ignores</literal> option is a list of whitespace-delimited globs which describe the names of files and directories that Subversion should not display unless they are versioned. The default value is <literal moreinfo=\"none\">*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store</literal>."
msgstr ""

#: ./build/en/book.xml:15856(para) 
msgid "As well as <command moreinfo=\"none\">svn status</command>, the <command moreinfo=\"none\">svn add</command> and <command moreinfo=\"none\">svn import</command> commands also ignore files that match the list when they are scanning a directory. You can override this behaviour for a single instance of any of these commands by explicitly specifying the file name, or by using the <option>--no-ignore</option> command-line flag."
msgstr ""

#: ./build/en/book.xml:15864(para) 
msgid "For information on more fine-grained control of ignored items, see <xref linkend=\"svn.advanced.props.special.ignore\"/>."
msgstr ""

#: ./build/en/book.xml:15870(literal) 
msgid "enable-auto-props"
msgstr ""

#: ./build/en/book.xml:15872(para) 
msgid "This instructs Subversion to automatically set properties on newly added or imported files. The default value is <literal moreinfo=\"none\">no</literal>, so set this to <literal moreinfo=\"none\">yes</literal> to enable Auto-props. The <literal moreinfo=\"none\">auto-props</literal> section of this file specifies which properties are to be set on which files."
msgstr ""

#: ./build/en/book.xml:15882(literal) 
msgid "log-encoding"
msgstr ""

#: ./build/en/book.xml:15884(para) 
msgid "This variable sets the default character set encoding for commit log messages. It's a permanent form of the <option>--encoding</option> option (see <xref linkend=\"svn.ref.svn.sw\"/>). The Subversion repository stores log messages in UTF-8, and assumes that your log message is written using your operating system's native locale. You should specify a different encoding if your commit messages are written in any other encoding."
msgstr ""

#: ./build/en/book.xml:15897(literal) 
msgid "use-commit-times"
msgstr ""

#: ./build/en/book.xml:15899(para) 
msgid "Normally your working copy files have timestamps that reflect the last time they were touched by any process, whether that be your own editor or by some <command moreinfo=\"none\">svn</command> subcommand. This is generally convenient for people developing software, because build systems often look at timestamps as a way of deciding which files need to be recompiled."
msgstr ""

#: ./build/en/book.xml:15907(para) 
msgid "In other situations, however, it's sometimes nice for the working copy files to have timestamps that reflect the last time they were changed in the repository. The <command moreinfo=\"none\">svn export</command> command always places these <quote>last-commit timestamps</quote> on trees that it produces. By setting this config variable to <literal moreinfo=\"none\">yes</literal>, the <command moreinfo=\"none\">svn checkout</command>, <command moreinfo=\"none\">svn update</command>, <command moreinfo=\"none\">svn switch</command>, and <command moreinfo=\"none\">svn revert</command> commands will also set last-commit timestamps on files that they touch."
msgstr ""

#: ./build/en/book.xml:15926(para) 
msgid "The <literal moreinfo=\"none\">auto-props</literal> section controls the Subversion client's ability to automatically set properties on files when they are added or imported. It contains any number of key-value pairs in the format <literal moreinfo=\"none\">PATTERN = PROPNAME=PROPVALUE</literal> where <literal moreinfo=\"none\">PATTERN</literal> is a file pattern that matches a set of filenames and the rest of the line is the property and its value. Multiple matches on a file will result in multiple propsets for that file; however, there is no guarantee that auto-props will be applied in the order in which they are listed in the config file, so you can't have one rule <quote>override</quote> another. You can find several examples of auto-props usage in the <filename moreinfo=\"none\">config</filename> file. Lastly, don't forget to set <literal moreinfo=\"none\">enable-auto-props</literal> to <literal moreinfo=\"none\">yes</literal> in the <literal moreinfo=\"none\">miscellany</literal> section if you want to enable auto-props."
msgstr ""

#: ./build/en/book.xml:15954(title) 
msgid "Localization"
msgstr ""

#: ./build/en/book.xml:15956(para) 
msgid "<firstterm>Localization</firstterm> is the act of making programs behave in a region-specific way. When a program formats numbers or dates in a way specific to your part of the world, or prints messages (or accepts input) in your native language, the program is said to be <firstterm>localized</firstterm>. This section describes steps Subversion has made towards localization."
msgstr ""

#: ./build/en/book.xml:15966(title) 
msgid "Understanding locales"
msgstr ""

#: ./build/en/book.xml:15968(para) 
msgid "Most modern operating systems have a notion of the <quote>current locale</quote>—that is, the region or country whose localization conventions are honored. These conventions—typically chosen by some runtime configuration mechanism on the computer—affect the way in which programs present data to the user, as well as the way in which they accept user input."
msgstr ""

#: ./build/en/book.xml:15976(para) 
msgid "On Unix-like systems, you can check the values of the locale-related runtime configuration options by running the <command moreinfo=\"none\">locale</command> command:"
msgstr ""

#: ./build/en/book.xml:15980(screen) 
#, no-wrap
msgid "\n$ locale\nLANG=\nLC_COLLATE=\"C\"\nLC_CTYPE=\"C\"\nLC_MESSAGES=\"C\"\nLC_MONETARY=\"C\"\nLC_NUMERIC=\"C\"\nLC_TIME=\"C\"\nLC_ALL=\"C\"\n"
msgstr ""

#: ./build/en/book.xml:15992(para) 
msgid "The output is a list of locale-related environment variables and their current values. In this example, the variables are all set to the default <literal moreinfo=\"none\">C</literal> locale, but users can set these variables to specific country/language code combinations. For example, if one were to set the <literal moreinfo=\"none\">LC_TIME</literal> variable to <literal moreinfo=\"none\">fr_CA</literal>, then programs would know to present time and date information formatted according a French-speaking Canadian's expectations. And if one were to set the <literal moreinfo=\"none\">LC_MESSAGES</literal> variable to <literal moreinfo=\"none\">zh_TW</literal>, then programs would know to present human-readable messages in Traditional Chinese. Setting the <literal moreinfo=\"none\">LC_ALL</literal> variable has the effect of changing every locale variable to the same value. The value of <literal moreinfo=\"none\">LANG</literal> is used as a default value for any locale variable that is unset. To see the list of available locales on a Unix system, run the command <command moreinfo=\"none\">locale -a</command>."
msgstr ""

#: ./build/en/book.xml:16011(para) 
msgid "On Windows, locale configuration is done via the <quote>Regional and Language Options</quote> control panel item. There you can view and select the values of individual settings from the available locales, and even customize (at a sickening level of detail) several of the display formatting conventions."
msgstr ""

#: ./build/en/book.xml:16022(title) 
msgid "Subversion's use of locales"
msgstr ""

#: ./build/en/book.xml:16024(para) 
msgid "The Subversion client, <command moreinfo=\"none\">svn</command>, honors the current locale configuration in two ways. First, it notices the value of the <literal moreinfo=\"none\">LC_MESSAGES</literal> variable and attempts to print all messages in the specified language. For example:"
msgstr ""

#: ./build/en/book.xml:16030(screen) 
#, no-wrap
msgid "\n$ export LC_MESSAGES=de_DE\n$ svn help cat\ncat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.\nAufruf: cat ZIEL[@REV]...\n…\n"
msgstr ""

#: ./build/en/book.xml:16038(para) 
msgid "This behavior works identically on both Unix and Windows systems. Note, though, that while your operating system might have support for a certain locale, the Subversion client still may not be able to speak the particular language. In order to produce localized messages, human volunteers must provide translations for each language. The translations are written using the GNU gettext package, which results in translation modules that end with the <filename moreinfo=\"none\">.mo</filename> filename extension. For example, the German translation file is named <filename moreinfo=\"none\">de.mo</filename>. These translation files are installed somewhere on your system. On Unix, they typically live in <filename moreinfo=\"none\">/usr/share/locale/</filename>, while on Windows they're often found in the <filename moreinfo=\"none\">\\share\\locale\\</filename> folder in Subversion's installation area. Once installed, a module is named after the program it provides translations for. For example, the <filename moreinfo=\"none\">de.mo</filename> file may ultimately end up installed as <filename moreinfo=\"none\">/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>. By browsing the installed <filename moreinfo=\"none\">.mo</filename> files, you can see which languages the Subversion client is able to speak."
msgstr ""

#: ./build/en/book.xml:16061(para) 
msgid "The second way in which the locale is honored involves how <command moreinfo=\"none\">svn</command> interprets your input. The repository stores all paths, filenames, and log messages in Unicode, encoded as UTF-8. In that sense, the repository is <firstterm>internationalized</firstterm>—that is, the repository is ready to accept input in any human language. This means, however, that the Subversion client is responsible for sending only UTF-8 filenames and log messages into the repository. In order to do this, it must convert the data from the native locale into UTF-8."
msgstr ""

#: ./build/en/book.xml:16072(para) 
msgid "For example, suppose you create a file named <filename moreinfo=\"none\">caffè.txt</filename>, and then when committing the file, you write the log message as <quote>Adesso il caffè è più forte</quote>. Both the filename and log message contain non-ASCII characters, but because your locale is set to <literal moreinfo=\"none\">it_IT</literal>, the Subversion client knows to interpret them as Italian. It uses an Italian character set to convert the data to UTF-8 before sending them off to the repository."
msgstr ""

#: ./build/en/book.xml:16082(para) 
msgid "Note that while the repository demands UTF-8 filenames and log messages, it <emphasis>does not</emphasis> pay attention to file contents. Subversion treats file contents as opaque strings of bytes, and neither client nor server makes an attempt to understand the character set or encoding of the contents."
msgstr ""

#: ./build/en/book.xml:16090(title) 
msgid "Character set conversion errors"
msgstr ""

#: ./build/en/book.xml:16092(para) 
msgid "While using Subversion, you might get hit with an error related to character set conversions:"
msgstr ""

#: ./build/en/book.xml:16095(screen) 
#, no-wrap
msgid "\nsvn: Can't convert string from native encoding to 'UTF-8':\n…\nsvn: Can't convert string from 'UTF-8' to native encoding:\n…\n"
msgstr ""

#: ./build/en/book.xml:16102(para) 
msgid "Errors like this typically occur when the Subversion client has received a UTF-8 string from the repository, but not all of the characters in that string can be represented using the encoding of the current locale. For example, if your locale is <literal moreinfo=\"none\">en_US</literal> but a collaborator has committed a Japanese filename, you're likely to see this error when you receive the file during an <command moreinfo=\"none\">svn update</command>."
msgstr ""

#: ./build/en/book.xml:16111(para) 
msgid "The solution is either to set your locale to something which <emphasis>can</emphasis> represent the incoming UTF-8 data, or to change the filename or log message in the repository. (And don't forget to slap your collaborator's hand—projects should decide on common languages ahead of time, so that all participants are using the same locale.)"
msgstr ""

#: ./build/en/book.xml:16128(title) 
msgid "Using External Differencing Tools"
msgstr ""

#: ./build/en/book.xml:16130(para) 
msgid "The presence of <option>--diff-cmd</option> and <option>--diff3-cmd</option> options, and similarly named runtime configuration parameters (see <xref linkend=\"svn.advanced.confarea.opts.config\"/>), can lead to a false notion of how easy it is to use external differencing (or <quote>diff</quote>) and merge tools with Subversion. While Subversion can use most of popular such tools available, the effort invested in setting this up often turns out to be non-trivial."
msgstr ""

#: ./build/en/book.xml:16150(para) 
msgid "Subversion developers are good, but even the best make mistakes."
msgstr ""

#: ./build/en/book.xml:16139(para) 
msgid "The interface between Subversion and external diff and merge tools harkens back to a time when Subversion's only contextual differencing capabilities were built around invocations of the GNU diffutils toolchain, specifically the <command moreinfo=\"none\">diff</command> and <command moreinfo=\"none\">diff3</command> utilities. To get the kind of behavior Subversion needed, it called these utilities with more than a handful of options and parameters, most of which were quite specific to the utilities. Some time later, Subversion grew its own internal differencing library, and as a failover mechanism, <placeholder-1/> the <option>--diff-cmd</option> and <option>--diff3-cmd</option> options were added to the Subversion command-line client so users could more easily indicate that they preferred to use the GNU diff and diff3 utilities instead of the newfangled internal diff library. If those options were used, Subversion would simply ignore the internal diff library, and fall back to running those external programs, lengthy argument lists and all. And that's where things remain today."
msgstr ""

#: ./build/en/book.xml:16162(para) 
msgid "It didn't take long for folks to realize that having such easy configuration mechanisms for specifying that Subversion should use the external GNU diff and diff3 utilities located at a particular place on the system could be applied toward the use of other diff and merge tools, too. After all, Subversion didn't actually verify that the things it was being told to run were members of the GNU diffutils toolchain. But the only configurable aspect of using those external tools is their location on the system—not the option set, parameter order, etc. Subversion continues throwing all those GNU utility options at your external diff tool regardless of whether or not that program can understand those options. And that's where things get unintuitive for most users."
msgstr ""

#: ./build/en/book.xml:16176(para) 
msgid "The key to using external diff and merge tools (other than GNU diff and diff3, of course) with Subversion is to use wrapper scripts which convert the input from Subversion into something that your differencing tool can understand, and then to convert the output of your tool back into a format which Subversion expects—the format that the GNU tools would have used. The following sections cover the specifics of those expectations."
msgstr ""

#: ./build/en/book.xml:16186(para) 
msgid "The decision on when to fire off a contextual diff or merge as part of a larger Subversion operation is made entirely by Subversion, and is affected by, among other things, whether or not the files being operated on are human-readable as determined by their <literal moreinfo=\"none\">svn:mime-type</literal> property. This means, for example, that even if you had the niftiest Microsoft Word-aware differencing or merging tool in the Universe, it would never be invoked by Subversion so long as your versioned Word documents had a configured MIME type that denoted that they were not human-readable (such as <literal moreinfo=\"none\">application/msword</literal>). For more about MIME type settings, see <xref linkend=\"svn.advanced.props.special.mime-type\"/>"
msgstr ""

#: ./build/en/book.xml:16203(title) 
msgid "External diff"
msgstr ""

#: ./build/en/book.xml:16220(para) 
msgid "The GNU diff manual page puts it this way: <quote>An exit status of 0 means no differences were found, 1 means some differences were found, and 2 means trouble.</quote>"
msgstr ""

#: ./build/en/book.xml:16205(para) 
msgid "Subversion calls external diff programs with parameters suitable for the GNU diff utility, and expects only that the external program return with a successful error code. For most alternative diff program, only the sixth and seventh arguments, the paths of the files which represent the left and right sides of the diff, respectively, are of interest. Note that Subversion runs the diff program once per modified file covered by the Subversion operation, so if your program runs in an asynchronous fashion (or <quote>backgrounded</quote>), you might have several instances of it all running simultaneously. Finally, Subversion expects that your program return an errorcode of 1 if your program detected differences, or 0 if it did not—any other errorcode is considered a fatal error. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:16226(para) 
msgid "<xref linkend=\"svn.advanced.externaldifftools.diff.ex-1\"/> and <xref linkend=\"svn.advanced.externaldifftools.diff.ex-2\"/> are templates for external diff tool wrappers in the Bourne shell and Windows batch scripting languages, respectively."
msgstr ""

#: ./build/en/book.xml:16233(title) 
msgid "diffwrap.sh"
msgstr ""

#: ./build/en/book.xml:16234(programlisting) 
#, no-wrap
msgid "\n#!/bin/sh\n\n# Configure your favorite diff program here.\nDIFF=\"/usr/local/bin/my-diff-tool\"\n\n# Subversion provides the paths we need as the sixth and seventh \n# parameters.\nLEFT=${6}\nRIGHT=${7}\n\n# Call the diff command (change the following line to make sense for\n# your merge program).\n$DIFF --left $LEFT --right $RIGHT\n\n# Return an errorcode of 0 if no differences were detected, 1 if some were.\n# Any other errorcode will be treated as fatal.\n"
msgstr ""

#: ./build/en/book.xml:16255(title) 
msgid "diffwrap.bat"
msgstr ""

#: ./build/en/book.xml:16256(programlisting) 
#, no-wrap
msgid "\n@ECHO OFF\n\nREM Configure your favorite diff program here.\nSET DIFF=\"C:\\Program Files\\Funky Stuff\\My Diff Tool.exe\"\n\nREM Subversion provides the paths we need as the sixth and seventh \nREM parameters.\nSET LEFT=%6\nSET RIGHT=%7\n\nREM Call the diff command (change the following line to make sense for\nREM your merge program).\n%DIFF% --left %LEFT% --right %RIGHT%\n\nREM Return an errorcode of 0 if no differences were detected, 1 if some were.\nREM Any other errorcode will be treated as fatal.\n"
msgstr ""

#: ./build/en/book.xml:16279(title) 
msgid "External diff3"
msgstr ""

#: ./build/en/book.xml:16281(para) 
msgid "Subversion calls external merge programs with parameters suitable for the GNU diff3 utility, expecting that the external program return with a successful error code and that the full file contents which result from the completed merge operation are printed on the standard output stream (so that Subversion can redirect them into the appropriate version controlled file). For most alternative merge programs, only the ninth, tenth, and eleventh arguments, the paths of the files which represent the <quote>mine</quote>, <quote>older</quote>, and <quote>yours</quote> inputs, respectively, are of interest. Note that because Subversion depends on the output of your merge program, you wrapper script must not exit before that output has been delivered to Subversion. When it finally does exit, it should return an errorcode of 0 if the merge was successful, or 1 if unresolved conflicts remain in the output—any other errorcode is considered a fatal error."
msgstr ""

#: ./build/en/book.xml:16299(para) 
msgid "<xref linkend=\"svn.advanced.externaldifftools.diff3.ex-1\"/> and <xref linkend=\"svn.advanced.externaldifftools.diff3.ex-2\"/> are templates for external merge tool wrappers in the Bourne shell and Windows batch scripting languages, respectively."
msgstr ""

#: ./build/en/book.xml:16305(title) 
msgid "diff3wrap.sh"
msgstr ""

#: ./build/en/book.xml:16306(programlisting) 
#, no-wrap
msgid "\n#!/bin/sh\n\n# Configure your favorite diff3/merge program here.\nDIFF3=\"/usr/local/bin/my-merge-tool\"\n\n# Subversion provides the paths we need as the ninth, tenth, and eleventh \n# parameters.\nMINE=${9}\nOLDER=${10}\nYOURS=${11}\n\n# Call the merge command (change the following line to make sense for\n# your merge program).\n$DIFF3 --older $OLDER --mine $MINE --yours $YOURS\n\n# After performing the merge, this script needs to print the contents\n# of the merged file to stdout.  Do that in whatever way you see fit.\n# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts\n# remain in the result.  Any other errorcode will be treated as fatal.\n"
msgstr ""

#: ./build/en/book.xml:16330(title) 
msgid "diff3wrap.bat"
msgstr ""

#: ./build/en/book.xml:16331(programlisting) 
#, no-wrap
msgid "\n@ECHO OFF\n\nREM Configure your favorite diff3/merge program here.\nSET DIFF3=\"C:\\Program Files\\Funky Stuff\\My Merge Tool.exe\"\n\nREM Subversion provides the paths we need as the ninth, tenth, and eleventh \nREM parameters.  But we only have access to nine parameters at a time, so we\nREM shift our nine-parameter window twice to let us get to what we need.\nSHIFT\nSHIFT\nSET MINE=%7\nSET OLDER=%8\nSET YOURS=%9\n\nREM Call the merge command (change the following line to make sense for\nREM your merge program).\n%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%\n\nREM After performing the merge, this script needs to print the contents\nREM of the merged file to stdout.  Do that in whatever way you see fit.\nREM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts\nREM remain in the result.  Any other errorcode will be treated as fatal.\n"
msgstr ""

#: ./build/en/book.xml:16369(title) 
msgid "Embedding Subversion"
msgstr ""

#: ./build/en/book.xml:16371(para) 
msgid "Subversion has a modular design, written in C and implemented as a collection of libraries. Each library has a well-defined purpose and Application Programming Interface (API), and that interface is available not only for Subversion itself to use, but for any software that wishes to embed or otherwise programmatically control Subversion. Additionally, Subversion's API is available not only to other C programs, but also to programs written in higher-level languages such as Python, Perl, Java, or Ruby."
msgstr ""

#: ./build/en/book.xml:16381(para) 
msgid "This chapter is for those who wish to interact with Subversion through its public API or its various language bindings. If you wish to write robust wrapper scripts around Subversion functionality to simplify your own life, are trying to develop more complex integrations between Subversion and other pieces of software, or just have an interest in Subversion's various library modules and what they offer, this chapter is for you. If, however, you don't foresee yourself participating with Subversion at such a level, feel free to skip this chapter with the confidence that your experience as a Subversion user will not be affected."
msgstr ""

#: ./build/en/book.xml:16397(title) 
msgid "Layered Library Design"
msgstr ""

#: ./build/en/book.xml:16399(para) 
msgid "Each of Subversion's core libraries can be said to exist in one of three main layers—the Repository Layer, the Repository Access (RA) Layer, or the Client Layer. We will examine these layers shortly, but first, let's briefly summarize Subversion's various libraries. For the sake of consistency, we will refer to the libraries by their extensionless Unix library names (libsvn_fs, libsvn_wc, mod_dav_svn, etc.)."
msgstr ""

#: ./build/en/book.xml:16409(term) 
msgid "libsvn_client"
msgstr ""

#: ./build/en/book.xml:16410(para) 
msgid "Primary interface for client programs"
msgstr ""

#: ./build/en/book.xml:16414(term) 
msgid "libsvn_delta"
msgstr ""

#: ./build/en/book.xml:16415(para) 
msgid "Tree and byte-stream differencing routines"
msgstr ""

#: ./build/en/book.xml:16419(term) 
msgid "libsvn_diff"
msgstr ""

#: ./build/en/book.xml:16420(para) 
msgid "Contextual differencing and merging routines"
msgstr ""

#: ./build/en/book.xml:16424(term) 
msgid "libsvn_fs"
msgstr ""

#: ./build/en/book.xml:16425(para) 
msgid "Filesystem commons and module loader"
msgstr ""

#: ./build/en/book.xml:16429(term) 
msgid "libsvn_fs_base"
msgstr ""

#: ./build/en/book.xml:16430(para) 
msgid "The Berkeley DB filesystem back-end"
msgstr ""

#: ./build/en/book.xml:16434(term) 
msgid "libsvn_fs_fs"
msgstr ""

#: ./build/en/book.xml:16435(para) 
msgid "The native filesystem (FSFS) back-end"
msgstr ""

#: ./build/en/book.xml:16439(term) 
msgid "libsvn_ra"
msgstr ""

#: ./build/en/book.xml:16440(para) 
msgid "Repository Access commons and module loader"
msgstr ""

#: ./build/en/book.xml:16444(term) 
msgid "libsvn_ra_dav"
msgstr ""

#: ./build/en/book.xml:16445(para) 
msgid "The WebDAV Repository Access module"
msgstr ""

#: ./build/en/book.xml:16449(term) 
msgid "libsvn_ra_local"
msgstr ""

#: ./build/en/book.xml:16450(para) 
msgid "The local Repository Access module"
msgstr ""

#: ./build/en/book.xml:16454(term) 
msgid "libsvn_ra_serf"
msgstr ""

#: ./build/en/book.xml:16455(para) 
msgid "Another (experimental) WebDAV Repository Access module"
msgstr ""

#: ./build/en/book.xml:16459(term) 
msgid "libsvn_ra_svn"
msgstr ""

#: ./build/en/book.xml:16460(para) 
msgid "The custom protocol Repository Access module"
msgstr ""

#: ./build/en/book.xml:16464(term) 
msgid "libsvn_repos"
msgstr ""

#: ./build/en/book.xml:16465(para) 
msgid "Repository interface"
msgstr ""

#: ./build/en/book.xml:16468(term) 
msgid "libsvn_subr"
msgstr ""

#: ./build/en/book.xml:16469(para) 
msgid "Miscellaneous helpful subroutines"
msgstr ""

#: ./build/en/book.xml:16473(term) 
msgid "libsvn_wc"
msgstr ""

#: ./build/en/book.xml:16474(para) 
msgid "The working copy management library"
msgstr ""

#: ./build/en/book.xml:16478(term) 
msgid "mod_authz_svn"
msgstr ""

#: ./build/en/book.xml:16479(para) 
msgid "Apache authorization module for Subversion repositories access via WebDAV"
msgstr ""

#: ./build/en/book.xml:16484(para) 
msgid "Apache module for mapping WebDAV operations to Subversion ones"
msgstr ""

#: ./build/en/book.xml:16489(para) 
msgid "The fact that the word <quote>miscellaneous</quote> only appears once in the previous list is a good sign. The Subversion development team is serious about making sure that functionality lives in the right layer and libraries. Perhaps the greatest advantage of the modular design is its lack of complexity from a developer's point of view. As a developer, you can quickly formulate that kind of <quote>big picture</quote> that allows you to pinpoint the location of certain pieces of functionality with relative ease."
msgstr ""

#: ./build/en/book.xml:16499(para) 
msgid "Another benefit of modularity is the ability to replace a given module with a whole new library that implements the same API without affecting the rest of the code base. In some sense, this happens within Subversion already. The libsvn_ra_dav, libsvn_ra_local, libsvn_ra_serf, and libsvn_ra_svn libraries each implement the same interface, all working as plugins to libsvn_ra. And all four communicate with the Repository Layer—libsvn_ra_local connects to the repository directly; the other three do so over a network. The libsvn_fs_base and libsvn_fs_fs libraries are another pair of libraries that implement the same functionality in different ways—both are plugins to the common libsvn_fs library."
msgstr ""

#: ./build/en/book.xml:16512(para) 
msgid "The client itself also highlights the benefits of modularity in the Subversion design. Subversion's libsvn_client library is a one-stop shop for most of the functionality necessary for designing a working Subversion client (see <xref linkend=\"svn.developer.layerlib.client\"/>). So while the Subversion distribution provides only the <command moreinfo=\"none\">svn</command> command-line client program, there are several third-party programs which provide various forms of graphical client UI. These GUIs use the same APIs that the stock command-line client does. This type of modularity has played a large role in the proliferation of available Subversion clients and IDE integrations and, by extension, to the tremendous adoption rate of Subversion itself."
msgstr ""

#: ./build/en/book.xml:16527(title) 
msgid "Repository Layer"
msgstr ""

#: ./build/en/book.xml:16529(para) 
msgid "When referring to Subversion's Repository Layer, we're generally talking about two basic concepts—the versioned filesystem implementation (accessed via libsvn_fs, and supported by its libsvn_fs_base and libsvn_fs_fs plugins), and the repository logic that wraps it (as implemented in libsvn_repos). These libraries provide the storage and reporting mechanisms for the various revisions of your version-controlled data. This layer is connected to the Client Layer via the Repository Access Layer, and is, from the perspective of the Subversion user, the stuff at the <quote>other end of the line.</quote>"
msgstr ""

#: ./build/en/book.xml:16541(para) 
msgid "The Subversion Filesystem is not a kernel-level filesystem that one would install in an operating system (like the Linux ext2 or NTFS), but a virtual filesystem. Rather than storing <quote>files</quote> and <quote>directories</quote> as real files and directories (as in, the kind you can navigate through using your favorite shell program), it uses one of two available abstract storage backends—either a Berkeley DB database environment, or a flat-file representation. (To learn more about the two repository back-ends, see <xref linkend=\"svn.reposadmin.basics.backends\"/>.) There has even been considerable interest by the development community in giving future releases of Subversion the ability to use other back-end database systems, perhaps through a mechanism such as Open Database Connectivity (ODBC). In fact, Google did something similar to this before launching the Google Code Project Hosting service, announcing in mid-2006 that members of its Open Source team had written a new proprietary Subversion filesystem plugin which used their ultra-scalable Bigtable database for its storage."
msgstr ""

#: ./build/en/book.xml:16560(para) 
msgid "The filesystem API exported by libsvn_fs contains the kinds of functionality you would expect from any other filesystem API—you can create and remove files and directories, copy and move them around, modify file contents, and so on. It also has features that are not quite as common, such as the ability to add, modify, and remove metadata (<quote>properties</quote>) on each file or directory. Furthermore, the Subversion Filesystem is a versioning filesystem, which means that as you make changes to your directory tree, Subversion remembers what your tree looked like before those changes. And before the previous changes. And the previous ones. And so on, all the way back through versioning time to (and just beyond) the moment you first started adding things to the filesystem."
msgstr ""

#: ./build/en/book.xml:16575(para) 
msgid "All the modifications you make to your tree are done within the context of a Subversion commit transaction. The following is a simplified general routine for modifying your filesystem:"
msgstr ""

#: ./build/en/book.xml:16582(para) 
msgid "Begin a Subversion commit transaction."
msgstr ""

#: ./build/en/book.xml:16585(para) 
msgid "Make your changes (adds, deletes, property modifications, etc.)."
msgstr ""

#: ./build/en/book.xml:16589(para) 
msgid "Commit your transaction."
msgstr ""

#: ./build/en/book.xml:16593(para) 
msgid "Once you have committed your transaction, your filesystem modifications are permanently stored as historical artifacts. Each of these cycles generates a single new revision of your tree, and each revision is forever accessible as an immutable snapshot of <quote>the way things were.</quote>"
msgstr ""

#: ./build/en/book.xml:16600(title) 
msgid "The Transaction Distraction"
msgstr ""

#: ./build/en/book.xml:16602(para) 
msgid "The notion of a Subversion transaction can become easily confused with the transaction support provided by the underlying database itself, especially given the former's close proximity to the Berkeley DB database code in libsvn_fs_base. Both types of transaction exist to provide atomicity and isolation. In other words, transactions give you the ability to perform a set of actions in an all-or-nothing fashion—either all the actions in the set complete with success, or they all get treated as if <emphasis>none</emphasis> of them ever happened—and in a way that does not interfere with other processes acting on the data."
msgstr ""

#: ./build/en/book.xml:16615(para) 
msgid "Database transactions generally encompass small operations related specifically to the modification of data in the database itself (such as changing the contents of a table row). Subversion transactions are larger in scope, encompassing higher-level operations like making modifications to a set of files and directories which are intended to be stored as the next revision of the filesystem tree. If that isn't confusing enough, consider the fact that Subversion uses a database transaction during the creation of a Subversion transaction (so that if the creation of Subversion transaction fails, the database will look as if we had never attempted that creation in the first place)!"
msgstr ""

#: ./build/en/book.xml:16629(para) 
msgid "Fortunately for users of the filesystem API, the transaction support provided by the database system itself is hidden almost entirely from view (as should be expected from a properly modularized library scheme). It is only when you start digging into the implementation of the filesystem itself that such things become visible (or interesting)."
msgstr ""

#: ./build/en/book.xml:16639(para) 
msgid "Most of the functionality provided by the filesystem interface is the result of an action that occurs on a filesystem path. That is, from outside of the filesystem, the primary mechanism for describing and accessing the individual revisions of files and directories comes through the use of path strings like <filename moreinfo=\"none\">/foo/bar</filename>, just as if you were addressing files and directories through your favorite shell program. You add new files and directories by passing their paths-to-be to the right API functions. You query for information about them by the same mechanism."
msgstr ""

#: ./build/en/book.xml:16650(para) 
msgid "Unlike most filesystems, though, a path alone is not enough information to identify a file or directory in Subversion. Think of a directory tree as a two-dimensional system, where a node's siblings represent a sort of left-and-right motion, and descending into subdirectories a downward motion. <xref linkend=\"svn.developer.layerlib.repos.dia-1\"/> shows a typical representation of a tree as exactly that."
msgstr ""

#: ./build/en/book.xml:16659(title) 
msgid "Files and directories in two dimensions"
msgstr ""

#: ./build/en/book.xml:16667(para) 
msgid "We understand that this may come as a shock to sci-fi fans who have long been under the impression that Time was actually the <emphasis>fourth</emphasis> dimension, and we apologize for any emotional trauma induced by our assertion of a different theory."
msgstr ""

#: ./build/en/book.xml:16663(para) 
msgid "The different here is that the Subversion filesystem has a nifty third dimension that most filesystems do not have—Time! <placeholder-1/> In the filesystem interface, nearly every function that has a <parameter moreinfo=\"none\">path</parameter> argument also expects a <parameter moreinfo=\"none\">root</parameter> argument. This <structname>svn_fs_root_t</structname> argument describes either a revision or a Subversion transaction (which is simply a revision-in-the-making), and provides that third-dimensional context needed to understand the difference between <filename moreinfo=\"none\">/foo/bar</filename> in revision 32, and the same path as it exists in revision 98. <xref linkend=\"svn.developer.layerlib.repos.dia-2\"/> shows revision history as an added dimension to the Subversion filesystem universe."
msgstr ""

#: ./build/en/book.xml:16686(title) 
msgid "Versioning time—the third dimension!"
msgstr ""

#: ./build/en/book.xml:16690(para) 
msgid "As we mentioned earlier, the libsvn_fs API looks and feels like any other filesystem, except that it has this wonderful versioning capability. It was designed to be usable by any program interested in a versioning filesystem. Not coincidentally, Subversion itself is interested in that functionality. But while the filesystem API should be sufficient for basic file and directory versioning support, Subversion wants more—and that is where libsvn_repos comes in."
msgstr ""

#: ./build/en/book.xml:16700(para) 
msgid "The Subversion repository library (libsvn_repos) sits (logically speaking) atop the libsvn_fs API, providing additional functionality beyond that of the underlying versioned filesystem logic. It does not completely wrap each and every filesystem function—only certain major steps in the general cycle of filesystem activity are wrapped by the repository interface. Some of these include the creation and commit of Subversion transactions, and the modification of revision properties. These particular events are wrapped by the repository layer because they have hooks associated with them. A repository hook system is not strictly related to implementing a versioning filesystem, so it lives in the repository wrapper library."
msgstr ""

#: ./build/en/book.xml:16714(para) 
msgid "The hooks mechanism is but one of the reasons for the abstraction of a separate repository library from the rest of the filesystem code. The libsvn_repos API provides several other important utilities to Subversion. These include the abilities to:"
msgstr ""

#: ./build/en/book.xml:16722(para) 
msgid "create, open, destroy, and perform recovery steps on a Subversion repository and the filesystem included in that repository."
msgstr ""

#: ./build/en/book.xml:16727(para) 
msgid "describe the differences between two filesystem trees."
msgstr ""

#: ./build/en/book.xml:16731(para) 
msgid "query for the commit log messages associated with all (or some) of the revisions in which a set of files was modified in the filesystem."
msgstr ""

#: ./build/en/book.xml:16736(para) 
msgid "generate a human-readable <quote>dump</quote> of the filesystem, a complete representation of the revisions in the filesystem."
msgstr ""

#: ./build/en/book.xml:16741(para) 
msgid "parse that dump format, loading the dumped revisions into a different Subversion repository."
msgstr ""

#: ./build/en/book.xml:16746(para) 
msgid "As Subversion continues to evolve, the repository library will grow with the filesystem library to offer increased functionality and configurable option support."
msgstr ""

#: ./build/en/book.xml:16754(title) 
msgid "Repository Access Layer"
msgstr ""

#: ./build/en/book.xml:16756(para) 
msgid "If the Subversion Repository Layer is at <quote>the other end of the line</quote>, the Repository Access (RA) Layer is the line itself. Charged with marshaling data between the client libraries and the repository, this layer includes the libsvn_ra module loader library, the RA modules themselves (which currently includes libsvn_ra_dav, libsvn_ra_local, libsvn_ra_serf, and libsvn_ra_svn), and any additional libraries needed by one or more of those RA modules, such as the mod_dav_svn Apache module with which libsvn_ra_dav communicates or libsvn_ra_svn's server, <command moreinfo=\"none\">svnserve</command>."
msgstr ""

#: ./build/en/book.xml:16768(para) 
msgid "Since Subversion uses URLs to identify its repository resources, the protocol portion of the URL schema (usually <literal moreinfo=\"none\">file://</literal>, <literal moreinfo=\"none\">http://</literal>, <literal moreinfo=\"none\">https://</literal>, or <literal moreinfo=\"none\">svn://</literal>) is used to determine which RA module will handle the communications. Each module registers a list of the protocols it knows how to <quote>speak</quote> so that the RA loader can, at runtime, determine which module to use for the task at hand. You can determine which RA modules are available to the Subversion command-line client, and what protocols they claim to support, by running <command moreinfo=\"none\">svn --version</command>:"
msgstr ""

#: ./build/en/book.xml:16780(screen) 
#, no-wrap
msgid "\n$ svn --version\nsvn, version 1.4.3 (r23084)\n   compiled Jan 18 2007, 07:47:40\n\nCopyright (C) 2000-2006 CollabNet.\nSubversion is open source software, see http://subversion.tigris.org/\nThis product includes software developed by CollabNet (http://www.Collab.Net/).\n\nThe following repository access (RA) modules are available:\n\n* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.\n  - handles 'http' scheme\n  - handles 'https' scheme\n* ra_svn : Module for accessing a repository using the svn network protocol.\n  - handles 'svn' scheme\n* ra_local : Module for accessing a repository on local disk.\n  - handles 'file' scheme\n\n$\n"
msgstr ""

#: ./build/en/book.xml:16802(para) 
msgid "The public API exported by the RA Layer contains functionality necessary for sending and recieving versioned data to and from the repository. And each of the available RA plugins is able to perform that task using a specific protocol—libsvn_ra_dav speaks HTTP/WebDAV (optionally using SSL encryption) with an Apache HTTP Server that is running the mod_dav_svn Subversion server module; libsvn_ra_svn speaks a custom network protocol with the <command moreinfo=\"none\">svnserve</command> program; and so on."
msgstr ""

#: ./build/en/book.xml:16812(para) 
msgid "And for those who wish to access a Subversion repository using still another protocol, that is precisely why the Repository Access Layer is modularized! Developers can simply write a new library that implements the RA interface on one side and communicates with the repository on the other. Your new library can use existing network protocols, or you can invent your own. You could use inter-process communication (IPC) calls, or—let's get crazy, shall we?—you could even implement an email-based protocol. Subversion supplies the APIs; you supply the creativity."
msgstr ""

#: ./build/en/book.xml:16827(title) 
msgid "Client Layer"
msgstr ""

#: ./build/en/book.xml:16829(para) 
msgid "On the client side, the Subversion working copy is where all the action takes place. The bulk of functionality implemented by the client-side libraries exists for the sole purpose of managing working copies—directories full of files and other subdirectories which serve as a sort of local, editable <quote>reflection</quote> of one or more repository locations—and propagating changes to and from the Repository Access layer."
msgstr ""

#: ./build/en/book.xml:16838(para) 
msgid "Subversion's working copy library, libsvn_wc, is directly responsible for managing the data in the working copies. To accomplish this, the library stores administrative information about each working copy directory within a special subdirectory. This subdirectory, named <filename moreinfo=\"none\">.svn</filename>, is present in each working copy directory and contains various other files and directories which record state and provide a private workspace for administrative action. For those familiar with CVS, this <filename moreinfo=\"none\">.svn</filename> subdirectory is similar in purpose to the <filename moreinfo=\"none\">CVS</filename> administrative directories found in CVS working copies. For more information about the <filename moreinfo=\"none\">.svn</filename> administrative area, see <xref linkend=\"svn.developer.insidewc\"/>in this chapter."
msgstr ""

#: ./build/en/book.xml:16852(para) 
msgid "The Subversion client library, libsvn_client, has the broadest responsibility; its job is to mingle the functionality of the working copy library with that of the Repository Access Layer, and then to provide the highest-level API to any application that wishes to perform general revision control actions. For example, the function <function moreinfo=\"none\">svn_client_checkout()</function> takes a URL as an argument. It passes this URL to the RA layer and opens an authenticated session with a particular repository. It then asks the repository for a certain tree, and sends this tree into the working copy library, which then writes a full working copy to disk (<filename moreinfo=\"none\">.svn</filename> directories and all)."
msgstr ""

#: ./build/en/book.xml:16866(para) 
msgid "The client library is designed to be used by any application. While the Subversion source code includes a standard command-line client, it should be very easy to write any number of GUI clients on top of the client library. New GUIs (or any new client, really) for Subversion need not be clunky wrappers around the included command-line client—they have full access via the libsvn_client API to same functionality, data, and callback mechanisms that the command-line client uses. In fact, the Subversion source code tree contains a small C program (which can be found at <filename moreinfo=\"none\">tools/examples/minimal_client.c</filename> that exemplifies how to wield the Subversion API to create a simple client program"
msgstr ""

#: ./build/en/book.xml:16881(title) 
msgid "Binding Directly—A Word About Correctness"
msgstr ""

#: ./build/en/book.xml:16883(para) 
msgid "Why should your GUI program bind directly with a libsvn_client instead of acting as a wrapper around a command-line program? Besides simply being more efficient, this can address potential correctness issues as well. A command-line program (like the one supplied with Subversion) that binds to the client library needs to effectively translate feedback and requested data bits from C types to some form of human-readable output. This type of translation can be lossy. That is, the program may not display all of the information harvested from the API, or may combine bits of information for compact representation."
msgstr ""

#: ./build/en/book.xml:16895(para) 
msgid "If you wrap such a command-line program with yet another program, the second program has access only to already-interpreted (and as we mentioned, likely incomplete) information, which it must <emphasis>again</emphasis> translate into <emphasis>its</emphasis> representation format. With each layer of wrapping, the integrity of the original data is potentially tainted more and more, much like the result of making a copy of a copy (of a copy …) of a favorite audio or video cassette."
msgstr ""

#: ./build/en/book.xml:16905(para) 
msgid "But the most compelling argument for binding directly to the APIs instead of wrapping other programs is that the Subversion project makes compatibility promises regarding its APIs. Across minor versions of those APIs (such as between 1.3 and 1.4), no function's prototype will change. In other words, you aren't forced to update your program's source code simply because you've upgraded to a new version of Subversion. Certain functions might be deprecated, but they still work, and this gives you a buffer of time to eventually embrace the newer APIs. These kinds of compatibility promises do not exist for Subversion command-line program output, which is subject to change from release to release."
msgstr ""

#: ./build/en/book.xml:16928(title) 
msgid "Inside the Working Copy Administration Area"
msgstr ""

#: ./build/en/book.xml:16930(para) 
msgid "As we mentioned earlier, each directory of a Subversion working copy contains a special subdirectory called <filename moreinfo=\"none\">.svn</filename> which houses administrative data about that working copy directory. Subversion uses the information in <filename moreinfo=\"none\">.svn</filename> to keep track of things like:"
msgstr ""

#: ./build/en/book.xml:16938(para) 
msgid "Which repository location(s) are represented by the files and subdirectories in the working copy directory."
msgstr ""

#: ./build/en/book.xml:16943(para) 
msgid "What revision of each of those files and directories are currently present in the working copy."
msgstr ""

#: ./build/en/book.xml:16947(para) 
msgid "Any user-defined properties that might be attached to those files and directories."
msgstr ""

#: ./build/en/book.xml:16951(para) 
msgid "Pristine (un-edited) copies of the working copy files."
msgstr ""

#: ./build/en/book.xml:16956(para) 
msgid "The Subversion working copy administration area's layout and contents are considered implementation details not really intended for human consumption. Developers are encouraged to use Subversion's public APIs or provided tools to access and manipulate the working copy data, as opposed to directly reading or modifying the files of which the working copy administrative area is comprised. The file formats employed by the working copy library for its administrative data do change from time to time—a fact that the public APIs do a great job of successfully hiding from the average user. In this section, we expose some of these implementation details sheerly to appease your overwhelming curiousity."
msgstr ""

#: ./build/en/book.xml:16971(title) 
msgid "The Entries File"
msgstr ""

#: ./build/en/book.xml:16973(para) 
msgid "Perhaps the single most important file in the <filename moreinfo=\"none\">.svn</filename> directory is the <filename moreinfo=\"none\">entries</filename> file. The entries file is a single file which contains the bulk of the administrative information about a versioned item in a working copy directory. It is this one file which tracks the repository URLs, pristine revision, file checksums, pristine text and property timestamps, scheduling and conflict state information, last-known commit information (author, revision, timestamp), local copy history—practically everything that a Subversion client is interested in knowing about a versioned (or to-be-versioned) resource!"
msgstr ""

#: ./build/en/book.xml:16986(para) 
msgid "Folks familiar with CVS's administrative directories will have recognized at this point that Subversion's <filename moreinfo=\"none\">.svn/entries</filename> file serves the purposes of, among other things, CVS's <filename moreinfo=\"none\">CVS/Entries</filename>, <filename moreinfo=\"none\">CVS/Root</filename>, and <filename moreinfo=\"none\">CVS/Repository</filename> files combined."
msgstr ""

#: ./build/en/book.xml:16993(para) 
msgid "The format of the <filename moreinfo=\"none\">.svn/entries</filename> file has changed over time. Originally an XML file, it now uses a custom—though still human-readable—file format. While XML was a great choice for early developers of Subversion who were frequently debugging the file's contents (and Subversion's behavior in light of them), the need for easy developer debugging has diminished as Subversion has matured, and has been replaced by the user's need for snappier performance. Of course, Subversion's working copy library makes upgrading from one working copy format to another a breeze—it reads the old formats, and writes the new."
msgstr ""

#: ./build/en/book.xml:17010(title) 
msgid "Pristine Copies and Property Files"
msgstr ""

#: ./build/en/book.xml:17012(para) 
msgid "As mentioned before, the <filename moreinfo=\"none\">.svn</filename> directory also holds the pristine <quote>text-base</quote> versions of files. Those can be found in <filename moreinfo=\"none\">.svn/text-base</filename>. The benefits of these pristine copies are multiple—network-free checks for local modifications and difference reporting, network-free reversion of modified or missing files, smaller transmission of changes to the server—but comes at the cost of having each versioned file stored at least twice on disk. These days, this seems to be a negligible penalty for most files. However, the situation gets uglier as the size of your versioned files grows. Some attention is being given to making the presence of the <quote>text-base</quote> an option. Ironically though, it is as your versioned files' sizes get larger that the existence of the <quote>text-base</quote> becomes more crucial—who wants to transmit a huge file across a network just because they want to commit a tiny change to it?"
msgstr ""

#: ./build/en/book.xml:17031(para) 
msgid "Similar in purpose to the <quote>text-base</quote> files are the property files and their pristine <quote>prop-base</quote> copies, located in <filename moreinfo=\"none\">.svn/props</filename> and <filename moreinfo=\"none\">.svn/prop-base</filename> respectively. Since directories can have properties, too, there are also <filename moreinfo=\"none\">.svn/dir-props</filename> and <filename moreinfo=\"none\">.svn/dir-prop-base</filename> files. Each of these property files (<quote>working</quote> and <quote>base</quote> versions) uses a simple <quote>hash-on-disk</quote> file format for storing the property names and values."
msgstr ""

#: ./build/en/book.xml:17051(title) 
msgid "Using the APIs"
msgstr ""

#: ./build/en/book.xml:17053(para) 
msgid "Developing applications against the Subversion library APIs is fairly straightforward. All of the public header files live in the <filename moreinfo=\"none\">subversion/include</filename> directory of the source tree. These headers are copied into your system locations when you build and install Subversion itself from source. These headers represent the entirety of the functions and types meant to be accessible by users of the Subversion libraries. The Subversion developer community is meticulous about ensuring that the public API is well-documented—refer directly to the header files for that documentation."
msgstr ""

#: ./build/en/book.xml:17065(para) 
msgid "When examining the public header files, the first thing you might notice is that Subversion's datatypes and functions are namespace protected. Every public Subversion symbol name begins with <literal moreinfo=\"none\">svn_</literal>, followed by a short code for the library in which the symbol is defined (such as <literal moreinfo=\"none\">wc</literal>, <literal moreinfo=\"none\">client</literal>, <literal moreinfo=\"none\">fs</literal>, etc.), followed by a single underscore (<literal moreinfo=\"none\">_</literal>) and then the rest of the symbol name. Semi-public functions (used among source files of a given library but not by code outside that library, and found inside the library directories themselves) differ from this naming scheme in that instead of a single underscore after the library code, they use a double underscore (<literal moreinfo=\"none\">__</literal>). Functions that are private to a given source file have no special prefixing, and are declared <literal moreinfo=\"none\">static</literal>. Of course, a compiler isn't interested in these naming conventions, but they help to clarify the scope of a given function or datatype."
msgstr ""

#: ./build/en/book.xml:17092(para) 
msgid "After all, Subversion uses Subversion's APIs, too."
msgstr ""

#: ./build/en/book.xml:17084(para) 
msgid "Another good source of information about programming against the Subversion APIs is the project's own hacking guidelines, which can be found at <ulink url=\"http://subversion.tigris.org/hacking.html\"/>. This document contains useful information which, while aimed at developers and would-be developers of Subversion itself, is equally applicable to folks developing against Subversion as a set of third-party libraries. <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:17099(title) 
msgid "The Apache Portable Runtime Library"
msgstr ""

#: ./build/en/book.xml:17101(para) 
msgid "Along with Subversion's own datatypes, you will see many references to datatypes that begin with <literal moreinfo=\"none\">apr_</literal>—symbols from the Apache Portable Runtime (APR) library. APR is Apache's portability library, originally carved out of its server code as an attempt to separate the OS-specific bits from the OS-independent portions of the code. The result was a library that provides a generic API for performing operations that differ mildly—or wildly—from OS to OS. While the Apache HTTP Server was obviously the first user of the APR library, the Subversion developers immediately recognized the value of using APR as well. This means that there are practically no OS-specific code portions in Subversion itself. Also, it means that the Subversion client compiles and runs anywhere that the server does. Currently this list includes all flavors of Unix, Win32, BeOS, OS/2, and Mac OS X."
msgstr ""

#: ./build/en/book.xml:17121(para) 
msgid "Subversion uses ANSI system calls and datatypes as much as possible."
msgstr ""

#: ./build/en/book.xml:17134(para) 
msgid "Neon and Berkeley DB are examples of such libraries."
msgstr ""

#: ./build/en/book.xml:17118(para) 
msgid "In addition to providing consistent implementations of system calls that differ across operating systems, <placeholder-1/> APR gives Subversion immediate access to many custom datatypes, such as dynamic arrays and hash tables. Subversion uses these types extensively throughout the codebase. But perhaps the most pervasive APR datatype, found in nearly every Subversion API prototype, is the <structname>apr_pool_t</structname>—the APR memory pool. Subversion uses pools internally for all its memory allocation needs (unless an external library requires a different memory management schema for data passed through its API), <placeholder-2/> and while a person coding against the Subversion APIs is not required to do the same, they are required to provide pools to the API functions that need them. This means that users of the Subversion API must also link against APR, must call <function moreinfo=\"none\">apr_initialize()</function> to initialize the APR subsystem, and then must create and manage pools for use with Subversion API calls, typically by using <function moreinfo=\"none\">svn_pool_create()</function>, <function moreinfo=\"none\">svn_pool_clear()</function>, and <function moreinfo=\"none\">svn_pool_destroy()</function>."
msgstr ""

#: ./build/en/book.xml:17148(title) 
msgid "Programming with Memory Pools"
msgstr ""

#: ./build/en/book.xml:17150(para) 
msgid "Almost every developer who has used the C programming language has at some point sighed at the daunting task of managing memory usage. Allocating enough memory to use, keeping track of those allocations, freeing the memory when you no longer need it—these tasks can be quite complex. And of course, failure to do those things properly can result in a program that crashes itself, or worse, crashes the computer."
msgstr ""

#: ./build/en/book.xml:17162(para) 
msgid "Or at least make it something you only toy with when doing extremely tight program optimization."
msgstr ""

#: ./build/en/book.xml:17159(para) 
msgid "Higher-level languages, on the other hand, take the job of memory management away from the developer completely. <placeholder-1/> Languages like Java and Python use <firstterm>garbage collection</firstterm> principles, allocating memory for objects when needed, and automatically freeing that memory when the object is no longer in use."
msgstr ""

#: ./build/en/book.xml:17170(para) 
msgid "APR provides a middle-ground approach called pool-based memory management. It allows the developer to control memory usage at a lower resolution—per chunk (or <quote>pool</quote>) of memory, instead of per allocated object. Rather than using <function moreinfo=\"none\">malloc()</function> and friends to allocate enough memory for a given object, you ask APR to allocate the memory from a memory pool. When you're finished using the objects you've created in the pool, you destroy the pool, effectively de-allocating the memory consumed by the objects you allocated from it. Rather than keeping track of individual objects which need to be de-allocated, your program simply considers the general lifetimes of those objects, and allocates the objects in a pool whose lifetime (the time between the pool's creation and its deletion) matches the object's needs."
msgstr ""

#: ./build/en/book.xml:17192(title) 
msgid "URL and Path Requirements"
msgstr ""

#: ./build/en/book.xml:17194(para) 
msgid "With remote version control operation as the whole point of Subversion's existence, it makes sense that some attention has been paid to internationalization (i18n) support. After all, while <quote>remote</quote> might mean <quote>across the office</quote>, it could just as well mean <quote>across the globe.</quote> To facilitate this, all of Subversion's public interfaces that accept path arguments expect those paths to be canonicalized, and encoded in UTF-8. This means, for example, that any new client binary that drives the libsvn_client interface needs to first convert paths from the locale-specific encoding to UTF-8 before passing those paths to the Subversion libraries, and then re-convert any resultant output paths from Subversion back into the locale's encoding before using those paths for non-Subversion purposes. Fortunately, Subversion provides a suite of functions (see <filename moreinfo=\"none\">subversion/include/svn_utf.h</filename>) that can be used by any program to do these conversions."
msgstr ""

#: ./build/en/book.xml:17212(para) 
msgid "Also, Subversion APIs require all URL parameters to be properly URI-encoded. So, instead of passing <uri>file:///home/username/My File.txt</uri> as the URL of a file named <literal moreinfo=\"none\">My File.txt</literal>, you need to pass <uri>file:///home/username/My%20File.txt</uri>. Again, Subversion supplies helper functions that your application can use—<function moreinfo=\"none\">svn_path_uri_encode()</function> and <function moreinfo=\"none\">svn_path_uri_decode()</function>, for URI encoding and decoding, respectively."
msgstr ""

#: ./build/en/book.xml:17224(title) 
msgid "Using Languages Other than C and C++"
msgstr ""

#: ./build/en/book.xml:17226(para) 
msgid "If you are interested in using the Subversion libraries in conjunction with something other than a C program—say a Python or Perl script—Subversion has some support for this via the Simplified Wrapper and Interface Generator (SWIG). The SWIG bindings for Subversion are located in <filename moreinfo=\"none\">subversion/bindings/swig</filename> and whilst still maturing, they are in a usable state. These bindings allow you to call Subversion API functions indirectly, using wrappers that translate the datatypes native to your scripting language into the datatypes needed by Subversion's C libraries."
msgstr ""

#: ./build/en/book.xml:17237(para) 
msgid "There is an obvious benefit to accessing the Subversion APIs via a language binding—simplicity. Generally speaking, languages such as Python and Perl are much more flexible and easy to use than C or C++. The sort of high-level datatypes and context-driven type checking provided by these languages are often better at handling information that comes from users. As you know, humans are proficient at botching up input to a program, and scripting languages tend to handle that misinformation more gracefully. Of course, often that flexibility comes at the cost of performance. That is why using a tightly-optimized, C-based interface and library suite, combined with a powerful, flexible binding language, is so appealing."
msgstr ""

#: ./build/en/book.xml:17251(para) 
msgid "Unfortunately, Subversion's language bindings tend to lack the level of developer attention given to the core Subversion modules. However, there have been significant efforts towards creating functional bindings for Python, Perl, and Ruby. To some extent, the work done preparing the SWIG interface files for these languages is reusable in efforts to generate bindings for other languages supported by SWIG (which include versions of C#, Guile, Java, MzScheme, OCaml, PHP, and Tcl, among others). However, some extra programming is required to compensate for complex APIs that SWIG needs some help translating between languages. For more information on SWIG itself, see the project's website at <ulink url=\"http://www.swig.org/\"/>."
msgstr ""

#: ./build/en/book.xml:17268(title) 
msgid "Code Samples"
msgstr ""

#: ./build/en/book.xml:17270(para) 
msgid "<xref linkend=\"svn.developer.layerlib.repos.ex-1\"/> contains a code segment (written in C) that illustrates some of the concepts we've been discussing. It uses both the repository and filesystem interfaces (as can be determined by the prefixes <literal moreinfo=\"none\">svn_repos_</literal> and <literal moreinfo=\"none\">svn_fs_</literal> of the function names, respectively) to create a new revision in which a directory is added. You can see the use of an APR pool, which is passed around for memory allocation purposes. Also, the code reveals a somewhat obscure fact about Subversion error handling—all Subversion errors must be explicitly handled to avoid memory leakage (and in some cases, application failure)."
msgstr ""

#: ./build/en/book.xml:17285(title) 
msgid "Using the Repository Layer"
msgstr ""

#: ./build/en/book.xml:17287(programlisting) 
#, no-wrap
msgid "\n/* Convert a Subversion error into a simple boolean error code.\n *\n * NOTE:  Subversion errors must be consumed because they are allocated\n *        from the global pool, else memory leaking occurs.\n */\n#define INT_ERR(expr)                           \\\n  do {                                          \\\n    svn_error_t *__temperr = (expr);            \\\n    if (__temperr)                              \\\n      {                                         \\\n        svn_error_clear(__temperr);             \\\n        return 1;                               \\\n      }                                         \\\n    return 0;                                   \\\n  } while (0)\n\n/* Create a new directory at the path NEW_DIRECTORY in the Subversion\n * repository located at REPOS_PATH.  Perform all memory allocation in\n * POOL.  This function will create a new revision for the addition of\n * NEW_DIRECTORY.  Return zero if the operation completes\n * successfully, non-zero otherwise.\n */\nstatic int\nmake_new_directory(const char *repos_path,\n                   const char *new_directory,\n                   apr_pool_t *pool)\n{\n  svn_error_t *err;\n  svn_repos_t *repos;\n  svn_fs_t *fs;\n  svn_revnum_t youngest_rev;\n  svn_fs_txn_t *txn;\n  svn_fs_root_t *txn_root;\n  const char *conflict_str;\n\n  /* Open the repository located at REPOS_PATH. \n   */\n  INT_ERR(svn_repos_open(&amp;repos, repos_path, pool));\n\n  /* Get a pointer to the filesystem object that is stored in REPOS. \n   */\n  fs = svn_repos_fs(repos);\n\n  /* Ask the filesystem to tell us the youngest revision that\n   * currently exists. \n   */\n  INT_ERR(svn_fs_youngest_rev(&amp;youngest_rev, fs, pool));\n\n  /* Begin a new transaction that is based on YOUNGEST_REV.  We are\n   * less likely to have our later commit rejected as conflicting if we\n   * always try to make our changes against a copy of the latest snapshot\n   * of the filesystem tree. \n   */\n  INT_ERR(svn_fs_begin_txn(&amp;txn, fs, youngest_rev, pool));\n\n  /* Now that we have started a new Subversion transaction, get a root\n   * object that represents that transaction. \n   */\n  INT_ERR(svn_fs_txn_root(&amp;txn_root, txn, pool));\n  \n  /* Create our new directory under the transaction root, at the path\n   * NEW_DIRECTORY. \n   */\n  INT_ERR(svn_fs_make_dir(txn_root, new_directory, pool));\n\n  /* Commit the transaction, creating a new revision of the filesystem\n   * which includes our added directory path.\n   */\n  err = svn_repos_fs_commit_txn(&amp;conflict_str, repos, \n                                &amp;youngest_rev, txn, pool);\n  if (! err)\n    {\n      /* No error?  Excellent!  Print a brief report of our success.\n       */\n      printf(\"Directory '%s' was successfully added as new revision \"\n             \"'%ld'.\\n\", new_directory, youngest_rev);\n    }\n  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)\n    {\n      /* Uh-oh.  Our commit failed as the result of a conflict\n       * (someone else seems to have made changes to the same area \n       * of the filesystem that we tried to modify).  Print an error\n       * message.\n       */\n      printf(\"A conflict occurred at path '%s' while attempting \"\n             \"to add directory '%s' to the repository at '%s'.\\n\", \n             conflict_str, new_directory, repos_path);\n    }\n  else\n    {\n      /* Some other error has occurred.  Print an error message.\n       */\n      printf(\"An error occurred while attempting to add directory '%s' \"\n             \"to the repository at '%s'.\\n\", \n             new_directory, repos_path);\n    }\n\n  INT_ERR(err);\n} \n"
msgstr ""

#: ./build/en/book.xml:17390(para) 
msgid "Note that in <xref linkend=\"svn.developer.layerlib.repos.ex-1\"/>, the code could just as easily have committed the transaction using <function moreinfo=\"none\">svn_fs_commit_txn()</function>. But the filesystem API knows nothing about the repository library's hook mechanism. If you want your Subversion repository to automatically perform some set of non-Subversion tasks every time you commit a transaction (like, for example, sending an email that describes all the changes made in that transaction to your developer mailing list), you need to use the libsvn_repos-wrapped version of that function was adds the hook triggering functionality—in this case, <function moreinfo=\"none\">svn_repos_fs_commit_txn()</function>. (For more information regarding Subversion's repository hooks, see <xref linkend=\"svn.reposadmin.create.hooks\"/>.)"
msgstr ""

#: ./build/en/book.xml:17404(para) 
msgid "Now let's switch languages. <xref linkend=\"svn.developer.usingapi.otherlangs.ex-1\"/> is a sample program that uses Subversion's SWIG Python bindings to recursively crawl the youngest repository revision, and print the various paths reached during the crawl."
msgstr ""

#: ./build/en/book.xml:17410(title) 
msgid "Using the Repository Layer with Python"
msgstr ""

#: ./build/en/book.xml:17412(programlisting) 
#, no-wrap
msgid "\n#!/usr/bin/python\n\n\"\"\"Crawl a repository, printing versioned object path names.\"\"\"\n\nimport sys\nimport os.path\nimport svn.fs, svn.core, svn.repos\n\ndef crawl_filesystem_dir(root, directory):\n    \"\"\"Recursively crawl DIRECTORY under ROOT in the filesystem, and return\n    a list of all the paths at or below DIRECTORY.\"\"\"\n\n    # Print the name of this path.\n    print directory + \"/\"\n    \n    # Get the directory entries for DIRECTORY.\n    entries = svn.fs.svn_fs_dir_entries(root, directory)\n\n    # Loop over the entries.\n    names = entries.keys()\n    for name in names:\n        # Calculate the entry's full path.\n        full_path = directory + '/' + name\n\n        # If the entry is a directory, recurse.  The recursion will return\n        # a list with the entry and all its children, which we will add to\n        # our running list of paths.\n        if svn.fs.svn_fs_is_dir(root, full_path):\n            crawl_filesystem_dir(root, full_path)\n        else:\n            # Else it's a file, so print its path here.\n            print full_path\n\ndef crawl_youngest(repos_path):\n    \"\"\"Open the repository at REPOS_PATH, and recursively crawl its\n    youngest revision.\"\"\"\n    \n    # Open the repository at REPOS_PATH, and get a reference to its\n    # versioning filesystem.\n    repos_obj = svn.repos.svn_repos_open(repos_path)\n    fs_obj = svn.repos.svn_repos_fs(repos_obj)\n\n    # Query the current youngest revision.\n    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj)\n    \n    # Open a root object representing the youngest (HEAD) revision.\n    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev)\n\n    # Do the recursive crawl.\n    crawl_filesystem_dir(root_obj, \"\")\n    \nif __name__ == \"__main__\":\n    # Check for sane usage.\n    if len(sys.argv) != 2:\n        sys.stderr.write(\"Usage: %s REPOS_PATH\\n\"\n                         % (os.path.basename(sys.argv[0])))\n        sys.exit(1)\n\n    # Canonicalize the repository path.\n    repos_path = svn.core.svn_path_canonicalize(sys.argv[1])\n\n    # Do the real work.\n    crawl_youngest(repos_path)\n"
msgstr ""

#: ./build/en/book.xml:17479(para) 
msgid "This same program in C would need to deal with APR's memory pool system. But Python handles memory usage automatically, and Subversion's Python bindings adhere to that convention. In C, you'd be working with custom datatypes (such as those provided by the APR library) for representing the hash of entries and the list of paths, but Python has hashes (called <quote>dictionaries</quote>) and lists as built-in datatypes, and provides a rich collection of functions for operating on those types. So SWIG (with the help of some customizations in Subversion's language bindings layer) takes care of mapping those custom datatypes into the native datatypes of the target language. This provides a more intuitive interface for users of that language."
msgstr ""

#: ./build/en/book.xml:17493(para) 
msgid "The Subversion Python bindings can be used for working copy operations, too. In the previous section of this chapter, we mentioned the <filename moreinfo=\"none\">libsvn_client</filename> interface, and how it exists for the sole purpose of simplifying the process of writing a Subversion client. <xref linkend=\"svn.developer.usingapi.otherlangs.ex-2\"/> is a brief example of how that library can be accessed via the SWIG Python bindings to recreate a scaled-down version of the <command moreinfo=\"none\">svn status</command> command."
msgstr ""

#: ./build/en/book.xml:17503(title) 
msgid "A Python Status Crawler"
msgstr ""

#: ./build/en/book.xml:17505(programlisting) 
#, no-wrap
msgid "\n#!/usr/bin/env python\n\n\"\"\"Crawl a working copy directory, printing status information.\"\"\"\n\nimport sys\nimport os.path\nimport getopt\nimport svn.core, svn.client, svn.wc\n\ndef generate_status_code(status):\n    \"\"\"Translate a status value into a single-character status code,\n    using the same logic as the Subversion command-line client.\"\"\"\n    code_map = { svn.wc.svn_wc_status_none        : ' ',\n                 svn.wc.svn_wc_status_normal      : ' ',\n                 svn.wc.svn_wc_status_added       : 'A',\n                 svn.wc.svn_wc_status_missing     : '!',\n                 svn.wc.svn_wc_status_incomplete  : '!',\n                 svn.wc.svn_wc_status_deleted     : 'D',\n                 svn.wc.svn_wc_status_replaced    : 'R',\n                 svn.wc.svn_wc_status_modified    : 'M',\n                 svn.wc.svn_wc_status_merged      : 'G',\n                 svn.wc.svn_wc_status_conflicted  : 'C',\n                 svn.wc.svn_wc_status_obstructed  : '~',\n                 svn.wc.svn_wc_status_ignored     : 'I',\n                 svn.wc.svn_wc_status_external    : 'X',\n                 svn.wc.svn_wc_status_unversioned : '?',\n               }\n    return code_map.get(status, '?')\n\ndef do_status(wc_path, verbose):\n    # Calculate the length of the input working copy path.\n    wc_path_len = len(wc_path)\n\n    # Build a client context baton.\n    ctx = svn.client.svn_client_ctx_t()\n\n    def _status_callback(path, status, root_path_len=wc_path_len):\n        \"\"\"A callback function for svn_client_status.\"\"\"\n\n        # Print the path, minus the bit that overlaps with the root of\n        # the status crawl\n        text_status = generate_status_code(status.text_status)\n        prop_status = generate_status_code(status.prop_status)\n        print '%s%s  %s' % (text_status, prop_status, path[wc_path_len + 1:])\n        \n    # Do the status crawl, using _status_callback() as our callback function.\n    svn.client.svn_client_status(wc_path, None, _status_callback,\n                                 1, verbose, 0, 0, ctx)\n\ndef usage_and_exit(errorcode):\n    \"\"\"Print usage message, and exit with ERRORCODE.\"\"\"\n    stream = errorcode and sys.stderr or sys.stdout\n    stream.write(\"\"\"Usage: %s OPTIONS WC-PATH\nOptions:\n  --help, -h    : Show this usage message\n  --verbose, -v : Show all statuses, even uninteresting ones\n\"\"\" % (os.path.basename(sys.argv[0])))\n    sys.exit(errorcode)\n    \nif __name__ == '__main__':\n    # Parse command-line options.\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], \"hv\", [\"help\", \"verbose\"])\n    except getopt.GetoptError:\n        usage_and_exit(1)\n    verbose = 0\n    for opt, arg in opts:\n        if opt in (\"-h\", \"--help\"):\n            usage_and_exit(0)\n        if opt in (\"-v\", \"--verbose\"):\n            verbose = 1\n    if len(args) != 1:\n        usage_and_exit(2)\n            \n    # Canonicalize the repository path.\n    wc_path = svn.core.svn_path_canonicalize(args[0])\n\n    # Do the real work.\n    try:\n        do_status(wc_path, verbose)\n    except svn.core.SubversionException, e:\n        sys.stderr.write(\"Error (%d): %s\\n\" % (e[1], e[0]))\n        sys.exit(1)\n"
msgstr ""

#: ./build/en/book.xml:17592(para) 
msgid "As was the case in <xref linkend=\"svn.developer.usingapi.otherlangs.ex-1\"/>, this program is pool-free and uses, for the most part, normal Python data types. The call to <function moreinfo=\"none\">svn_client_ctx_t()</function> is deceiving because the public Subversion API has no such function—this just happens to be a case where SWIG's automatic language generation bleeds through a little bit (the function is a sort of factory function for Python's version of the corresponding complex C structure). Also note that the path passed to this program (like the last one) gets run through <function moreinfo=\"none\">svn_path_canonicalize()</function>, because to <emphasis>not</emphasis> do so runs the risk of triggering the underlying Subversion C library's assertions about such things, which translate into rather immediate and unceremonious program abortion."
msgstr ""

#: ./build/en/book.xml:17620(title) 
msgid "Subversion Complete Reference"
msgstr ""

#: ./build/en/book.xml:17622(para) 
msgid "This chapter is intended to be a complete reference to using Subversion. This includes the command line client (<command moreinfo=\"none\">svn</command>) and all its subcommands, as well as the repository administration programs (<command moreinfo=\"none\">svnadmin</command> and <command moreinfo=\"none\">svnlook</command>) and their respective subcommands."
msgstr ""

#: ./build/en/book.xml:17634(title) 
msgid "The Subversion Command Line Client: <command moreinfo=\"none\">svn</command>"
msgstr ""

#: ./build/en/book.xml:17638(para) 
msgid "Yes, yes, you don't need a subcommand to use the <option>--version</option> switch, but we'll get to that in just a minute."
msgstr ""

#: ./build/en/book.xml:17636(para) 
msgid "To use the command line client, you type <command moreinfo=\"none\">svn</command>, the subcommand you wish to use <placeholder-1/>, and any switches or targets that you wish to operate on—there is no specific order that the subcommand and the switches must appear in. For example, all of the following are valid ways to use <command moreinfo=\"none\">svn status</command>:"
msgstr ""

#: ./build/en/book.xml:17646(screen) 
#, no-wrap
msgid "\n$ svn -v status\n$ svn status -v \n$ svn status -v myfile\n"
msgstr ""

#: ./build/en/book.xml:17652(para) 
msgid "You can find many more examples of how to use most client commands in <xref linkend=\"svn.tour\"/> and commands for managing properties in <xref linkend=\"svn.advanced.props\"/>."
msgstr ""

#: ./build/en/book.xml:17658(title) 
msgid "<command moreinfo=\"none\">svn</command> Switches"
msgstr ""

#: ./build/en/book.xml:17660(para) 
msgid "While Subversion has different switches for its subcommands, all switches are global—that is, each switch is guaranteed to mean the same thing regardless of the subcommand you use it with. For example, <option>--verbose</option> (<option>-v</option>) always means <quote>verbose output</quote>, regardless of the subcommand you use it with."
msgstr ""

#: ./build/en/book.xml:17671(option) 
msgid "--auto-props"
msgstr ""

#: ./build/en/book.xml:17673(para) 
msgid "Enables auto-props, overriding the <literal moreinfo=\"none\">enable-auto-props</literal> directive in the <filename moreinfo=\"none\">config</filename> file."
msgstr ""

#: ./build/en/book.xml:17680(option) 
msgid "--config-dir"
msgstr ""

#: ./build/en/book.xml:17681(replaceable) ./build/en/book.xml:22048(replaceable) 
msgid "DIR"
msgstr ""

#: ./build/en/book.xml:17683(para) 
msgid "Instructs Subversion to read configuration information from the specified directory instead of the default location (<filename moreinfo=\"none\">.subversion</filename> in the user's home directory)."
msgstr ""

#: ./build/en/book.xml:17691(option) 
msgid "--diff-cmd"
msgstr ""

#: ./build/en/book.xml:17692(replaceable) ./build/en/book.xml:17707(replaceable) ./build/en/book.xml:17724(replaceable) 
msgid "CMD"
msgstr ""

#: ./build/en/book.xml:17694(para) 
msgid "Specifies an external program to use to show differences between files. When <command moreinfo=\"none\">svn diff</command> is invoked, it uses Subversion's internal diff engine, which provides unified diffs by default. If you want to use an external diff program, use <option>--diff-cmd</option>. You can pass switches to the diff program with the <option>--extensions</option> switch (more on that later in this section)."
msgstr ""

#: ./build/en/book.xml:17706(option) 
msgid "--diff3-cmd"
msgstr ""

#: ./build/en/book.xml:17709(para) 
msgid "Specifies an external program to use to merge files."
msgstr ""

#: ./build/en/book.xml:17714(option) 
msgid "--dry-run"
msgstr ""

#: ./build/en/book.xml:17716(para) 
msgid "Goes through all the motions of running a command, but makes no actual changes—either on disk or in the repository."
msgstr ""

#: ./build/en/book.xml:17723(option) 
msgid "--editor-cmd"
msgstr ""

#: ./build/en/book.xml:17726(para) 
msgid "Specifies an external program to use to edit a log message or a property value. See the <literal moreinfo=\"none\">editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/> for ways to specify a default editor."
msgstr ""

#: ./build/en/book.xml:17734(option) 
msgid "--encoding"
msgstr ""

#: ./build/en/book.xml:17734(replaceable) 
msgid "ENC"
msgstr ""

#: ./build/en/book.xml:17736(para) 
msgid "Tells Subversion that your commit message is encoded in the charset provided. The default is your operating system's native locale, and you should specify the encoding if your commit message is in any other encoding."
msgstr ""

#: ./build/en/book.xml:17745(term) 
msgid "<option>--extensions</option> (<option>-x</option>) <replaceable>ARGS</replaceable>"
msgstr ""

#: ./build/en/book.xml:17748(para) 
msgid "Specifies an argument or arguments that Subversion should pass to an external diff command when providing differences between files. If you wish to pass multiple arguments, you must enclose all of them in quotes (for example, <command moreinfo=\"none\">svn diff --diff-cmd /usr/bin/diff -x \"-b -E\"</command>). This switch can <emphasis>only</emphasis> be used if you also pass the <option>--diff-cmd</option> switch."
msgstr ""

#: ./build/en/book.xml:17760(term) 
msgid "<option>--file</option> (<option>-F</option>) <replaceable>FILENAME</replaceable>"
msgstr ""

#: ./build/en/book.xml:17764(para) 
msgid "Uses the contents of the file passed as an argument to this switch for the specified subcommand."
msgstr ""

#: ./build/en/book.xml:17770(option) 
msgid "--force"
msgstr ""

#: ./build/en/book.xml:17772(para) 
msgid "Forces a particular command or operation to run. There are some operations that Subversion will prevent you from doing in normal usage, but you can pass the force switch to tell Subversion <quote>I know what I'm doing as well as the possible repercussions of doing it, so let me at 'em</quote>. This switch is the programmatic equivalent of doing your own electrical work with the power on—if you don't know what you're doing, you're likely to get a nasty shock."
msgstr ""

#: ./build/en/book.xml:17785(option) 
msgid "--force-log"
msgstr ""

#: ./build/en/book.xml:17787(para) 
msgid "Forces a suspicious parameter passed to the <option>--message</option> (<option>-m</option>) or <option>--file</option> (<option>-F</option>) options to be accepted as valid. By default, Subversion will produce an error if parameters to these options look like they might instead be targets of the subcommand. For example, if you pass a versioned file's path to the <option>--file</option> (<option>-F</option>) option, Subversion will assume you've made a mistake, that the path was instead intended as the target of the operation, and that you simply failed to provide some other—unversioned—file as the source of your log message. To assert your intent and override these types of errors, pass the <option>--force-log</option> option to subcommands that accept log messages."
msgstr ""

#: ./build/en/book.xml:17806(term) 
msgid "<option>--help</option> (<option>-h</option> or <option>-?</option>)"
msgstr ""

#: ./build/en/book.xml:17810(para) 
msgid "If used with one or more subcommands, shows the built-in help text for each subcommand. If used alone, it displays the general client help text."
msgstr ""

#: ./build/en/book.xml:17817(option) 
msgid "--ignore-ancestry"
msgstr ""

#: ./build/en/book.xml:17819(para) 
msgid "Tells Subversion to ignore ancestry when calculating differences (rely on path contents alone)."
msgstr ""

#: ./build/en/book.xml:17825(option) 
msgid "--ignore-externals"
msgstr ""

#: ./build/en/book.xml:17827(para) 
msgid "Tells Subversion to ignore external definitions and the external working copies managed by them."
msgstr ""

#: ./build/en/book.xml:17833(option) ./build/en/book.xml:22038(option) 
msgid "--incremental"
msgstr ""

#: ./build/en/book.xml:17835(para) 
msgid "Prints output in a format suitable for concatenation."
msgstr ""

#: ./build/en/book.xml:17841(option) 
msgid "--limit"
msgstr ""

#: ./build/en/book.xml:17842(replaceable) 
msgid "NUM"
msgstr ""

#: ./build/en/book.xml:17844(para) 
msgid "Show only the first <replaceable>NUM</replaceable> log messages."
msgstr ""

#: ./build/en/book.xml:17850(term) 
msgid "<option>--message</option> (<option>-m</option>) <replaceable>MESSAGE</replaceable>"
msgstr ""

#: ./build/en/book.xml:17854(para) 
msgid "Indicates that you will specify a commit message on the command line, following this switch. For example:"
msgstr ""

#: ./build/en/book.xml:17858(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"They don't make Sunday.\"\n"
msgstr ""

#: ./build/en/book.xml:17865(option) 
msgid "--new"
msgstr ""

#: ./build/en/book.xml:17865(replaceable) ./build/en/book.xml:17965(replaceable) 
msgid "ARG"
msgstr ""

#: ./build/en/book.xml:17867(para) 
msgid "Uses <replaceable>ARG</replaceable> as the newer target."
msgstr ""

#: ./build/en/book.xml:17873(option) 
msgid "--no-auth-cache"
msgstr ""

#: ./build/en/book.xml:17875(para) 
msgid "Prevents caching of authentication information (e.g. username and password) in the Subversion administrative directories."
msgstr ""

#: ./build/en/book.xml:17882(option) 
msgid "--no-auto-props"
msgstr ""

#: ./build/en/book.xml:17884(para) 
msgid "Disables auto-props, overriding the <literal moreinfo=\"none\">enable-auto-props</literal> directive in the <filename moreinfo=\"none\">config</filename> file."
msgstr ""

#: ./build/en/book.xml:17891(option) 
msgid "--no-diff-added"
msgstr ""

#: ./build/en/book.xml:17893(para) 
msgid "Prevents Subversion from printing differences for added files. The default behavior when you add a file is for <command moreinfo=\"none\">svn diff</command> to print the same differences that you would see if you had added the entire contents of an existing (empty) file."
msgstr ""

#: ./build/en/book.xml:17902(option) ./build/en/book.xml:22940(option) 
msgid "--no-diff-deleted"
msgstr ""

#: ./build/en/book.xml:17904(para) 
msgid "Prevents Subversion from printing differences for deleted files. The default behavior when you remove a file is for <command moreinfo=\"none\">svn diff</command> to print the same differences that you would see if you had left the file but removed all the content."
msgstr ""

#: ./build/en/book.xml:17913(option) 
msgid "--no-ignore"
msgstr ""

#: ./build/en/book.xml:17915(para) 
msgid "Shows files in the status listing that would normally be omitted since they match a pattern in the <literal moreinfo=\"none\">global-ignores</literal> configuration option or the <literal moreinfo=\"none\">svn:ignore</literal> property. See <xref linkend=\"svn.advanced.confarea.opts.config\"/> and <xref linkend=\"svn.advanced.props.special.ignore\"/> for more information."
msgstr ""

#: ./build/en/book.xml:17924(option) 
msgid "--no-unlock"
msgstr ""

#: ./build/en/book.xml:17926(para) 
msgid "Don't automatically unlock files (the default commit behavior is to unlock all files listed as part of the commit). See <xref linkend=\"svn.advanced.locking\"/> for more information."
msgstr ""

#: ./build/en/book.xml:17934(option) 
msgid "--non-interactive"
msgstr ""

#: ./build/en/book.xml:17936(para) 
msgid "In the case of an authentication failure, or insufficient credentials, prevents prompting for credentials (e.g. username or password). This is useful if you're running Subversion inside of an automated script and it's more appropriate to have Subversion fail than to prompt for more information."
msgstr ""

#: ./build/en/book.xml:17946(term) 
msgid "<option>--non-recursive</option> (<option>-N</option>)"
msgstr ""

#: ./build/en/book.xml:17948(para) 
msgid "Stops a subcommand from recursing into subdirectories. Most subcommands recurse by default, but some subcommands—usually those that have the potential to remove or undo your local modifications—do not."
msgstr ""

#: ./build/en/book.xml:17957(option) 
msgid "--notice-ancestry"
msgstr ""

#: ./build/en/book.xml:17959(para) 
msgid "Pay attention to ancestry when calculating differences."
msgstr ""

#: ./build/en/book.xml:17965(option) 
msgid "--old"
msgstr ""

#: ./build/en/book.xml:17967(para) 
msgid "Uses <replaceable>ARG</replaceable> as the older target."
msgstr ""

#: ./build/en/book.xml:17973(option) 
msgid "--password"
msgstr ""

#: ./build/en/book.xml:17974(replaceable) 
msgid "PASS"
msgstr ""

#: ./build/en/book.xml:17976(para) 
msgid "Indicates that you are providing your password for authentication on the command line—otherwise, if it is needed, Subversion will prompt you for it."
msgstr ""

#: ./build/en/book.xml:17984(term) 
msgid "<option>--quiet</option> (<option>-q</option>)"
msgstr ""

#: ./build/en/book.xml:17986(para) 
msgid "Requests that the client print only essential information while performing an operation."
msgstr ""

#: ./build/en/book.xml:17992(term) 
msgid "<option>--recursive</option> (<option>-R</option>)"
msgstr ""

#: ./build/en/book.xml:17994(para) 
msgid "Makes a subcommand recurse into subdirectories. Most subcommands recurse by default."
msgstr ""

#: ./build/en/book.xml:18000(option) 
msgid "--relocate"
msgstr ""

#: ./build/en/book.xml:18000(replaceable) 
msgid "FROM TO [PATH...]"
msgstr ""

#: ./build/en/book.xml:18003(para) 
msgid "Used with the <command moreinfo=\"none\">svn switch</command> subcommand, changes the location of the repository that your working copy references. This is useful if the location of your repository changes and you have an existing working copy that you'd like to continue to use. See <command moreinfo=\"none\">svn switch</command> for an example."
msgstr ""

#: ./build/en/book.xml:18014(term) 
msgid "<option>--revision</option> (<option>-r</option>) <replaceable>REV</replaceable>"
msgstr ""

#: ./build/en/book.xml:18018(para) 
msgid "Indicates that you're going to supply a revision (or range of revisions) for a particular operation. You can provide revision numbers, revision keywords or dates (in curly braces), as arguments to the revision switch. If you wish to provide a range of revisions, you can provide two revisions separated by a colon. For example:"
msgstr ""

#: ./build/en/book.xml:18026(screen) 
#, no-wrap
msgid "\n$ svn log -r 1729\n$ svn log -r 1729:HEAD\n$ svn log -r 1729:1744\n$ svn log -r {2001-12-04}:{2002-02-17}\n$ svn log -r 1729:{2002-02-17}\n"
msgstr ""

#: ./build/en/book.xml:18034(para) 
msgid "See <xref linkend=\"svn.tour.revs.keywords\"/> for more information."
msgstr ""

#: ./build/en/book.xml:18040(option) ./build/en/book.xml:22960(option) 
msgid "--revprop"
msgstr ""

#: ./build/en/book.xml:18042(para) ./build/en/book.xml:22962(para) 
msgid "Operates on a revision property instead of a property specific to a file or directory. This switch requires that you also pass a revision with the <option>--revision</option> (<option>-r</option>) switch."
msgstr ""

#: ./build/en/book.xml:18051(term) 
msgid "<option>--show-updates</option> (<option>-u</option>)"
msgstr ""

#: ./build/en/book.xml:18053(para) 
msgid "Causes the client to display information about which files in your working copy are out-of-date. This doesn't actually update any of your files—it just shows you which files will be updated if you run <command moreinfo=\"none\">svn update</command>."
msgstr ""

#: ./build/en/book.xml:18063(option) 
msgid "--stop-on-copy"
msgstr ""

#: ./build/en/book.xml:18065(para) 
msgid "Causes a Subversion subcommand which is traversing the history of a versioned resource to stop harvesting that historical information when a copy—that is, a location in history where that resource was copied from another location in the repository—is encountered."
msgstr ""

#: ./build/en/book.xml:18075(option) 
msgid "--strict"
msgstr ""

#: ./build/en/book.xml:18077(para) 
msgid "Causes Subversion to use strict semantics, a notion which is rather vague unless talking about specific subcommands."
msgstr ""

#: ./build/en/book.xml:18084(option) 
msgid "--targets"
msgstr ""

#: ./build/en/book.xml:18085(replaceable) 
msgid "FILENAME"
msgstr ""

#: ./build/en/book.xml:18087(para) 
msgid "Tells Subversion to get the list of files that you wish to operate on from the filename you provide instead of listing all the files on the command line."
msgstr ""

#: ./build/en/book.xml:18095(option) 
msgid "--username"
msgstr ""

#: ./build/en/book.xml:18096(replaceable) 
msgid "NAME"
msgstr ""

#: ./build/en/book.xml:18098(para) 
msgid "Indicates that you are providing your username for authentication on the command line—otherwise, if it is needed, Subversion will prompt you for it."
msgstr ""

#: ./build/en/book.xml:18106(term) 
msgid "<option>--verbose</option> (<option>-v</option>)"
msgstr ""

#: ./build/en/book.xml:18108(para) 
msgid "Requests that the client print out as much information as it can while running any subcommand. This may result in Subversion printing out additional fields, detailed information about every file, or additional information regarding its actions."
msgstr ""

#: ./build/en/book.xml:18117(option) ./build/en/book.xml:23947(option) ./build/en/book.xml:24096(option) 
msgid "--version"
msgstr ""

#: ./build/en/book.xml:18119(para) 
msgid "Prints the client version info. This information not only includes the version number of the client, but also a listing of all repository access modules that the client can use to access a Subversion repository. With <option>--quiet</option> (<option>-q</option>) it prints only the version number in a compact form."
msgstr ""

#: ./build/en/book.xml:18130(option) 
msgid "--xml"
msgstr ""

#: ./build/en/book.xml:18132(para) 
msgid "Prints output in XML format."
msgstr ""

#: ./build/en/book.xml:18142(title) 
msgid "<command moreinfo=\"none\">svn</command> Subcommands"
msgstr ""

#: ./build/en/book.xml:18148(secondary) ./build/en/book.xml:18254(secondary) ./build/en/book.xml:18324(secondary) ./build/en/book.xml:18409(secondary) ./build/en/book.xml:18546(secondary) ./build/en/book.xml:18624(secondary) ./build/en/book.xml:18762(secondary) ./build/en/book.xml:18937(secondary) ./build/en/book.xml:19050(secondary) ./build/en/book.xml:19302(secondary) ./build/en/book.xml:19416(secondary) ./build/en/book.xml:19468(secondary) ./build/en/book.xml:19570(secondary) ./build/en/book.xml:19731(secondary) ./build/en/book.xml:19843(secondary) ./build/en/book.xml:19943(secondary) ./build/en/book.xml:20187(secondary) ./build/en/book.xml:20308(secondary) ./build/en/book.xml:20394(secondary) ./build/en/book.xml:20508(secondary) ./build/en/book.xml:20586(secondary) ./build/en/book.xml:20662(secondary) ./build/en/book.xml:20744(secondary) ./build/en/book.xml:20831(secondary) ./build/en/book.xml:20966(secondary) ./build/en/book.xml:21055(secondary) ./build/en/book.xml:21159(secondary) ./build/en/book.xml:21564(secondary) ./build/en/book.xml:21724(secondary) ./build/en/book.xml:21817(secondary) ./build/en/book.xml:22103(secondary) ./build/en/book.xml:22166(secondary) ./build/en/book.xml:22206(secondary) ./build/en/book.xml:22316(secondary) ./build/en/book.xml:22348(secondary) ./build/en/book.xml:22390(secondary) ./build/en/book.xml:22422(secondary) ./build/en/book.xml:22470(secondary) ./build/en/book.xml:22536(secondary) ./build/en/book.xml:22584(secondary) ./build/en/book.xml:22624(secondary) ./build/en/book.xml:22706(secondary) ./build/en/book.xml:22752(secondary) ./build/en/book.xml:22806(secondary) ./build/en/book.xml:22866(secondary) ./build/en/book.xml:22999(secondary) ./build/en/book.xml:23045(secondary) ./build/en/book.xml:23103(secondary) ./build/en/book.xml:23202(secondary) ./build/en/book.xml:23248(secondary) ./build/en/book.xml:23319(secondary) ./build/en/book.xml:23366(secondary) ./build/en/book.xml:23397(secondary) ./build/en/book.xml:23462(secondary) ./build/en/book.xml:23513(secondary) ./build/en/book.xml:23565(secondary) ./build/en/book.xml:23610(secondary) ./build/en/book.xml:23665(secondary) ./build/en/book.xml:23731(secondary) ./build/en/book.xml:23785(secondary) ./build/en/book.xml:23824(secondary) 
msgid "subcommands"
msgstr ""

#: ./build/en/book.xml:18149(tertiary) 
msgid "add"
msgstr ""

#: ./build/en/book.xml:18154(refpurpose) 
msgid "Add files, directories, or symbolic links."
msgstr ""

#: ./build/en/book.xml:18158(title) ./build/en/book.xml:18264(title) ./build/en/book.xml:18334(title) ./build/en/book.xml:18418(title) ./build/en/book.xml:18555(title) ./build/en/book.xml:18633(title) ./build/en/book.xml:18773(title) ./build/en/book.xml:18947(title) ./build/en/book.xml:19059(title) ./build/en/book.xml:19311(title) ./build/en/book.xml:19425(title) ./build/en/book.xml:19478(title) ./build/en/book.xml:19580(title) ./build/en/book.xml:19740(title) ./build/en/book.xml:19854(title) ./build/en/book.xml:19952(title) ./build/en/book.xml:20197(title) ./build/en/book.xml:20317(title) ./build/en/book.xml:20403(title) ./build/en/book.xml:20517(title) ./build/en/book.xml:20596(title) ./build/en/book.xml:20671(title) ./build/en/book.xml:20753(title) ./build/en/book.xml:20840(title) ./build/en/book.xml:20976(title) ./build/en/book.xml:21064(title) ./build/en/book.xml:21168(title) ./build/en/book.xml:21573(title) ./build/en/book.xml:21733(title) ./build/en/book.xml:21826(title) ./build/en/book.xml:22112(title) ./build/en/book.xml:22175(title) ./build/en/book.xml:22215(title) ./build/en/book.xml:22324(title) ./build/en/book.xml:22357(title) ./build/en/book.xml:22401(title) ./build/en/book.xml:22433(title) ./build/en/book.xml:22480(title) ./build/en/book.xml:22545(title) ./build/en/book.xml:22593(title) ./build/en/book.xml:22639(title) ./build/en/book.xml:22716(title) ./build/en/book.xml:22761(title) ./build/en/book.xml:22815(title) ./build/en/book.xml:22875(title) ./build/en/book.xml:23008(title) ./build/en/book.xml:23054(title) ./build/en/book.xml:23112(title) ./build/en/book.xml:23211(title) ./build/en/book.xml:23257(title) ./build/en/book.xml:23328(title) ./build/en/book.xml:23374(title) ./build/en/book.xml:23408(title) ./build/en/book.xml:23472(title) ./build/en/book.xml:23523(title) ./build/en/book.xml:23574(title) ./build/en/book.xml:23620(title) ./build/en/book.xml:23675(title) ./build/en/book.xml:23740(title) ./build/en/book.xml:23795(title) ./build/en/book.xml:23833(title) ./build/en/book.xml:24039(title) 
msgid "Synopsis"
msgstr ""

#: ./build/en/book.xml:18159(programlisting) 
#, no-wrap
msgid "svn add PATH..."
msgstr ""

#: ./build/en/book.xml:18162(title) ./build/en/book.xml:18268(title) ./build/en/book.xml:18338(title) ./build/en/book.xml:18422(title) ./build/en/book.xml:18559(title) ./build/en/book.xml:18637(title) ./build/en/book.xml:18778(title) ./build/en/book.xml:18952(title) ./build/en/book.xml:19065(title) ./build/en/book.xml:19316(title) ./build/en/book.xml:19429(title) ./build/en/book.xml:19482(title) ./build/en/book.xml:19584(title) ./build/en/book.xml:19744(title) ./build/en/book.xml:19858(title) ./build/en/book.xml:19957(title) ./build/en/book.xml:20203(title) ./build/en/book.xml:20322(title) ./build/en/book.xml:20407(title) ./build/en/book.xml:20522(title) ./build/en/book.xml:20601(title) ./build/en/book.xml:20676(title) ./build/en/book.xml:20758(title) ./build/en/book.xml:20846(title) ./build/en/book.xml:20980(title) ./build/en/book.xml:21068(title) ./build/en/book.xml:21172(title) ./build/en/book.xml:21581(title) ./build/en/book.xml:21737(title) ./build/en/book.xml:21830(title) ./build/en/book.xml:22116(title) ./build/en/book.xml:22179(title) ./build/en/book.xml:22219(title) ./build/en/book.xml:22329(title) ./build/en/book.xml:22362(title) ./build/en/book.xml:22405(title) ./build/en/book.xml:22437(title) ./build/en/book.xml:22484(title) ./build/en/book.xml:22549(title) ./build/en/book.xml:22597(title) ./build/en/book.xml:22643(title) ./build/en/book.xml:22720(title) ./build/en/book.xml:22765(title) ./build/en/book.xml:22819(title) ./build/en/book.xml:22879(title) ./build/en/book.xml:23012(title) ./build/en/book.xml:23058(title) ./build/en/book.xml:23116(title) ./build/en/book.xml:23215(title) ./build/en/book.xml:23261(title) ./build/en/book.xml:23332(title) ./build/en/book.xml:23378(title) ./build/en/book.xml:23412(title) ./build/en/book.xml:23476(title) ./build/en/book.xml:23527(title) ./build/en/book.xml:23578(title) ./build/en/book.xml:23624(title) ./build/en/book.xml:23679(title) ./build/en/book.xml:23744(title) ./build/en/book.xml:23799(title) ./build/en/book.xml:23837(title) ./build/en/book.xml:24044(title) ./build/en/book.xml:24191(title) ./build/en/book.xml:24516(title) ./build/en/book.xml:24568(title) ./build/en/book.xml:24623(title) ./build/en/book.xml:24676(title) ./build/en/book.xml:24744(title) ./build/en/book.xml:24813(title) ./build/en/book.xml:24870(title) ./build/en/book.xml:24924(title) ./build/en/book.xml:24983(title) ./build/en/book.xml:26095(entry) 
msgid "Description"
msgstr ""

#: ./build/en/book.xml:18164(para) 
msgid "Add files, directories, or symbolic links to your working copy and schedule them for addition to the repository. They will be uploaded and added to the repository on your next commit. If you add something and change your mind before committing, you can unschedule the addition using <command moreinfo=\"none\">svn revert</command>."
msgstr ""

#: ./build/en/book.xml:18173(title) ./build/en/book.xml:18277(title) ./build/en/book.xml:18346(title) ./build/en/book.xml:18435(title) ./build/en/book.xml:18579(title) ./build/en/book.xml:18667(title) ./build/en/book.xml:18828(title) ./build/en/book.xml:18968(title) ./build/en/book.xml:19168(title) ./build/en/book.xml:19336(title) ./build/en/book.xml:19436(title) ./build/en/book.xml:19494(title) ./build/en/book.xml:19625(title) ./build/en/book.xml:19776(title) ./build/en/book.xml:19870(title) ./build/en/book.xml:19989(title) ./build/en/book.xml:20235(title) ./build/en/book.xml:20336(title) ./build/en/book.xml:20446(title) ./build/en/book.xml:20531(title) ./build/en/book.xml:20610(title) ./build/en/book.xml:20687(title) ./build/en/book.xml:20767(title) ./build/en/book.xml:20863(title) ./build/en/book.xml:20992(title) ./build/en/book.xml:21081(title) ./build/en/book.xml:21471(title) ./build/en/book.xml:21592(title) ./build/en/book.xml:21750(title) ./build/en/book.xml:21891(title) ./build/en/book.xml:22338(title) ./build/en/book.xml:23387(title) ./build/en/book.xml:23632(title) ./build/en/book.xml:23687(title) 
msgid "Alternate Names"
msgstr ""

#: ./build/en/book.xml:18174(para) ./build/en/book.xml:18347(para) ./build/en/book.xml:18580(para) ./build/en/book.xml:19337(para) ./build/en/book.xml:19495(para) ./build/en/book.xml:19626(para) ./build/en/book.xml:19871(para) ./build/en/book.xml:19990(para) ./build/en/book.xml:20236(para) ./build/en/book.xml:20337(para) ./build/en/book.xml:20993(para) ./build/en/book.xml:21082(para) ./build/en/book.xml:21751(para) ./build/en/book.xml:22557(para) ./build/en/book.xml:22728(para) ./build/en/book.xml:23538(para) 
msgid "None"
msgstr ""

#: ./build/en/book.xml:18178(title) ./build/en/book.xml:18282(title) ./build/en/book.xml:18351(title) ./build/en/book.xml:18440(title) ./build/en/book.xml:18584(title) ./build/en/book.xml:18674(title) ./build/en/book.xml:18833(title) ./build/en/book.xml:18973(title) ./build/en/book.xml:19173(title) ./build/en/book.xml:19341(title) ./build/en/book.xml:19444(title) ./build/en/book.xml:19499(title) ./build/en/book.xml:19630(title) ./build/en/book.xml:19781(title) ./build/en/book.xml:19875(title) ./build/en/book.xml:19994(title) ./build/en/book.xml:20240(title) ./build/en/book.xml:20341(title) ./build/en/book.xml:20451(title) ./build/en/book.xml:20536(title) ./build/en/book.xml:20615(title) ./build/en/book.xml:20692(title) ./build/en/book.xml:20772(title) ./build/en/book.xml:20868(title) ./build/en/book.xml:20997(title) ./build/en/book.xml:21086(title) ./build/en/book.xml:21476(title) ./build/en/book.xml:21597(title) ./build/en/book.xml:21755(title) ./build/en/book.xml:21896(title) 
msgid "Changes"
msgstr ""

#: ./build/en/book.xml:18179(para) 
msgid "Working Copy"
msgstr ""

#: ./build/en/book.xml:18183(title) ./build/en/book.xml:18287(title) ./build/en/book.xml:18356(title) ./build/en/book.xml:18445(title) ./build/en/book.xml:18589(title) ./build/en/book.xml:18679(title) ./build/en/book.xml:18839(title) ./build/en/book.xml:18979(title) ./build/en/book.xml:19178(title) ./build/en/book.xml:19346(title) ./build/en/book.xml:19449(title) ./build/en/book.xml:19504(title) ./build/en/book.xml:19635(title) ./build/en/book.xml:19786(title) ./build/en/book.xml:19880(title) ./build/en/book.xml:19999(title) ./build/en/book.xml:20245(title) ./build/en/book.xml:20346(title) ./build/en/book.xml:20456(title) ./build/en/book.xml:20541(title) ./build/en/book.xml:20620(title) ./build/en/book.xml:20697(title) ./build/en/book.xml:20777(title) ./build/en/book.xml:20873(title) ./build/en/book.xml:21002(title) ./build/en/book.xml:21091(title) ./build/en/book.xml:21481(title) ./build/en/book.xml:21602(title) ./build/en/book.xml:21760(title) ./build/en/book.xml:21901(title) 
msgid "Accesses Repository"
msgstr ""

#: ./build/en/book.xml:18184(para) ./build/en/book.xml:18590(para) ./build/en/book.xml:19450(para) ./build/en/book.xml:21003(para) ./build/en/book.xml:21092(para) 
msgid "No"
msgstr ""

#: ./build/en/book.xml:18188(title) ./build/en/book.xml:18292(title) ./build/en/book.xml:18361(title) ./build/en/book.xml:18450(title) ./build/en/book.xml:18594(title) ./build/en/book.xml:18684(title) ./build/en/book.xml:18845(title) ./build/en/book.xml:18984(title) ./build/en/book.xml:19184(title) ./build/en/book.xml:19351(title) ./build/en/book.xml:19454(title) ./build/en/book.xml:19509(title) ./build/en/book.xml:19640(title) ./build/en/book.xml:19791(title) ./build/en/book.xml:19885(title) ./build/en/book.xml:20004(title) ./build/en/book.xml:20250(title) ./build/en/book.xml:20351(title) ./build/en/book.xml:20461(title) ./build/en/book.xml:20546(title) ./build/en/book.xml:20625(title) ./build/en/book.xml:20702(title) ./build/en/book.xml:20782(title) ./build/en/book.xml:20878(title) ./build/en/book.xml:21007(title) ./build/en/book.xml:21096(title) ./build/en/book.xml:21486(title) ./build/en/book.xml:21607(title) ./build/en/book.xml:21765(title) ./build/en/book.xml:21906(title) ./build/en/book.xml:22130(title) ./build/en/book.xml:22193(title) ./build/en/book.xml:22271(title) ./build/en/book.xml:22377(title) ./build/en/book.xml:22492(title) ./build/en/book.xml:22555(title) ./build/en/book.xml:22649(title) ./build/en/book.xml:22726(title) ./build/en/book.xml:22772(title) ./build/en/book.xml:22841(title) ./build/en/book.xml:23019(title) ./build/en/book.xml:23065(title) ./build/en/book.xml:23169(title) ./build/en/book.xml:23222(title) ./build/en/book.xml:23268(title) ./build/en/book.xml:23340(title) ./build/en/book.xml:23420(title) ./build/en/book.xml:23483(title) ./build/en/book.xml:23536(title) ./build/en/book.xml:23584(title) ./build/en/book.xml:23637(title) ./build/en/book.xml:23692(title) ./build/en/book.xml:23752(title) ./build/en/book.xml:24065(title) 
msgid "Switches"
msgstr ""

#: ./build/en/book.xml:18190(screen) 
#, no-wrap
msgid "\n--targets FILENAME\n--non-recursive (-N)\n--quiet (-q)\n--config-dir DIR\n--auto-props\n--no-auto-props\n--force\n"
msgstr ""

#: ./build/en/book.xml:18202(title) ./build/en/book.xml:18306(title) ./build/en/book.xml:18374(title) ./build/en/book.xml:18466(title) ./build/en/book.xml:18604(title) ./build/en/book.xml:18704(title) ./build/en/book.xml:18864(title) ./build/en/book.xml:19004(title) ./build/en/book.xml:19204(title) ./build/en/book.xml:19369(title) ./build/en/book.xml:19531(title) ./build/en/book.xml:19657(title) ./build/en/book.xml:19808(title) ./build/en/book.xml:19903(title) ./build/en/book.xml:20024(title) ./build/en/book.xml:20269(title) ./build/en/book.xml:20369(title) ./build/en/book.xml:20481(title) ./build/en/book.xml:20562(title) ./build/en/book.xml:20641(title) ./build/en/book.xml:20718(title) ./build/en/book.xml:20799(title) ./build/en/book.xml:20898(title) ./build/en/book.xml:21018(title) ./build/en/book.xml:21107(title) ./build/en/book.xml:21504(title) ./build/en/book.xml:21624(title) ./build/en/book.xml:21779(title) ./build/en/book.xml:21923(title) ./build/en/book.xml:22141(title) ./build/en/book.xml:22282(title) ./build/en/book.xml:22449(title) ./build/en/book.xml:22606(title) ./build/en/book.xml:22655(title) ./build/en/book.xml:22780(title) ./build/en/book.xml:22850(title) ./build/en/book.xml:22888(title) ./build/en/book.xml:23028(title) ./build/en/book.xml:23074(title) ./build/en/book.xml:23178(title) ./build/en/book.xml:23231(title) ./build/en/book.xml:23279(title) ./build/en/book.xml:23349(title) ./build/en/book.xml:23429(title) ./build/en/book.xml:23492(title) ./build/en/book.xml:23542(title) ./build/en/book.xml:23593(title) ./build/en/book.xml:23647(title) ./build/en/book.xml:23703(title) ./build/en/book.xml:23762(title) ./build/en/book.xml:23810(title) ./build/en/book.xml:23843(title) ./build/en/book.xml:24107(title) 
msgid "Examples"
msgstr ""

#: ./build/en/book.xml:18204(para) 
msgid "To add a file to your working copy:"
msgstr ""

#: ./build/en/book.xml:18206(screen) 
#, no-wrap
msgid "\n$ svn add foo.c \nA         foo.c\n"
msgstr ""

#: ./build/en/book.xml:18211(para) 
msgid "When adding a directory, the default behavior of <command moreinfo=\"none\">svn add</command> is to recurse:"
msgstr ""

#: ./build/en/book.xml:18214(screen) 
#, no-wrap
msgid "\n$ svn add testdir\nA         testdir\nA         testdir/a\nA         testdir/b\nA         testdir/c\nA         testdir/d\n"
msgstr ""

#: ./build/en/book.xml:18223(para) 
msgid "You can add a directory without adding its contents:"
msgstr ""

#: ./build/en/book.xml:18226(screen) 
#, no-wrap
msgid "\n$ svn add --non-recursive otherdir\nA         otherdir\n"
msgstr ""

#: ./build/en/book.xml:18231(para) 
msgid "Normally, the command <command moreinfo=\"none\">svn add *</command> will skip over any directories that are already under version control. Sometimes, however, you may want to add every unversioned object in your working copy, including those hiding deeper down. Passing the <option>--force</option> option makes <command moreinfo=\"none\">svn add</command> recurse into versioned directories:"
msgstr ""

#: ./build/en/book.xml:18239(screen) 
#, no-wrap
msgid "\n$ svn add * --force\nA         foo.c\nA         somedir/bar.c\nA         otherdir/docs/baz.doc\n…\n"
msgstr ""

#: ./build/en/book.xml:18255(tertiary) 
msgid "blame"
msgstr ""

#: ./build/en/book.xml:18259(refname) 
msgid "svn blame"
msgstr ""

#: ./build/en/book.xml:18260(refpurpose) 
msgid "Show author and revision information in-line for the specified files or URLs."
msgstr ""

#: ./build/en/book.xml:18265(programlisting) 
#, no-wrap
msgid "svn blame TARGET[@REV]..."
msgstr ""

#: ./build/en/book.xml:18270(para) 
msgid "Show author and revision information in-line for the specified files or URLs. Each line of text is annotated at the beginning with the author (username) and the revision number for the last change to that line."
msgstr ""

#: ./build/en/book.xml:18278(para) 
msgid "praise, annotate, ann"
msgstr ""

#: ./build/en/book.xml:18283(para) ./build/en/book.xml:18352(para) ./build/en/book.xml:19174(para) ./build/en/book.xml:19445(para) ./build/en/book.xml:19631(para) ./build/en/book.xml:19782(para) ./build/en/book.xml:19995(para) ./build/en/book.xml:21477(para) 
msgid "Nothing"
msgstr ""

#: ./build/en/book.xml:18288(para) ./build/en/book.xml:18357(para) ./build/en/book.xml:18446(para) ./build/en/book.xml:18680(para) ./build/en/book.xml:19505(para) ./build/en/book.xml:19787(para) ./build/en/book.xml:19881(para) ./build/en/book.xml:20000(para) ./build/en/book.xml:21603(para) ./build/en/book.xml:21761(para) ./build/en/book.xml:21902(para) 
msgid "Yes"
msgstr ""

#: ./build/en/book.xml:18294(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n--verbose (-v)\n"
msgstr ""

#: ./build/en/book.xml:18308(para) 
msgid "If you want to see blame annotated source for <filename moreinfo=\"none\">readme.txt</filename> in your test repository:"
msgstr ""

#: ./build/en/book.xml:18311(screen) 
#, no-wrap
msgid "\n$ svn blame http://svn.red-bean.com/repos/test/readme.txt\n     3      sally This is a README file.\n     5      harry You should read this.\n"
msgstr ""

#: ./build/en/book.xml:18325(tertiary) ./build/en/book.xml:23046(tertiary) 
msgid "cat"
msgstr ""

#: ./build/en/book.xml:18330(refpurpose) 
msgid "Output the contents of the specified files or URLs."
msgstr ""

#: ./build/en/book.xml:18335(programlisting) 
#, no-wrap
msgid "svn cat TARGET[@REV]..."
msgstr ""

#: ./build/en/book.xml:18340(para) 
msgid "Output the contents of the specified files or URLs. For listing the contents of directories, see <command moreinfo=\"none\">svn list</command>."
msgstr ""

#: ./build/en/book.xml:18363(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:18376(para) 
msgid "If you want to view readme.txt in your repository without checking it out:"
msgstr ""

#: ./build/en/book.xml:18378(screen) 
#, no-wrap
msgid "\n$ svn cat http://svn.red-bean.com/repos/test/readme.txt\nThis is a README file.\nYou should read this.\n"
msgstr ""

#: ./build/en/book.xml:18385(para) 
msgid "If your working copy is out of date (or you have local modifications) and you want to see the <literal moreinfo=\"none\">HEAD</literal> revision of a file in your working copy, <command moreinfo=\"none\">svn cat</command> will automatically fetch the <literal moreinfo=\"none\">HEAD</literal> revision when you give it a path:"
msgstr ""

#: ./build/en/book.xml:18393(screen) 
#, no-wrap
msgid "\n$ cat foo.c\nThis file is in my local working copy \nand has changes that I've made.\n\n$ svn cat foo.c\nLatest revision fresh from the repository!\n"
msgstr ""

#: ./build/en/book.xml:18410(tertiary) 
msgid "checkout"
msgstr ""

#: ./build/en/book.xml:18414(refname) 
msgid "svn checkout"
msgstr ""

#: ./build/en/book.xml:18415(refpurpose) 
msgid "Check out a working copy from a repository."
msgstr ""

#: ./build/en/book.xml:18419(programlisting) 
#, no-wrap
msgid "svn checkout URL[@REV]... [PATH]"
msgstr ""

#: ./build/en/book.xml:18424(para) 
msgid "Check out a working copy from a repository. If <replaceable>PATH</replaceable> is omitted, the basename of the URL will be used as the destination. If multiple URLs are given each will be checked out into a subdirectory of <replaceable>PATH</replaceable>, with the name of the subdirectory being the basename of the URL."
msgstr ""

#: ./build/en/book.xml:18436(para) 
msgid "co"
msgstr ""

#: ./build/en/book.xml:18441(para) 
msgid "Creates a working copy."
msgstr ""

#: ./build/en/book.xml:18452(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--quiet (-q)\n--non-recursive (-N)\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--ignore-externals\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:18468(para) 
msgid "Check out a working copy into a directory called <filename moreinfo=\"none\">mine</filename>:"
msgstr ""

#: ./build/en/book.xml:18471(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///tmp/repos/test mine\nA  mine/a\nA  mine/b\nChecked out revision 2.\n$ ls\nmine\n"
msgstr ""

#: ./build/en/book.xml:18480(para) 
msgid "Check out 2 different directories into two separate working copies:"
msgstr ""

#: ./build/en/book.xml:18483(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz\nA  test/a\nA  test/b\nChecked out revision 2.\nA  quiz/l\nA  quiz/m\nChecked out revision 2.\n$ ls\nquiz  test\n"
msgstr ""

#: ./build/en/book.xml:18495(para) 
msgid "Check out 2 different directories into two separate working copies, but place both into a directory called <filename moreinfo=\"none\">working-copies</filename>:"
msgstr ""

#: ./build/en/book.xml:18499(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///tmp/repos/test  file:///tmp/repos/quiz working-copies\nA  working-copies/test/a\nA  working-copies/test/b\nChecked out revision 2.\nA  working-copies/quiz/l\nA  working-copies/quiz/m\nChecked out revision 2.\n$ ls\nworking-copies\n"
msgstr ""

#: ./build/en/book.xml:18511(para) 
msgid "If you interrupt a checkout (or something else interrupts your checkout like loss of connectivity, etc.), you can restart it either by issuing the identical checkout command again, or by updating the incomplete working copy:"
msgstr ""

#: ./build/en/book.xml:18517(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///tmp/repos/test test\nA  test/a\nA  test/b\n^C\nsvn: The operation was interrupted\nsvn: caught SIGINT\n\n$ svn checkout file:///tmp/repos/test test\nA  test/c\nA  test/d\n^C\nsvn: The operation was interrupted\nsvn: caught SIGINT\n\n$ cd test\n$ svn update\nA  test/e\nA  test/f\nUpdated to revision 3.\n"
msgstr ""

#: ./build/en/book.xml:18547(tertiary) 
msgid "cleanup"
msgstr ""

#: ./build/en/book.xml:18551(refname) 
msgid "svn cleanup"
msgstr ""

#: ./build/en/book.xml:18552(refpurpose) 
msgid "Recursively clean up the working copy."
msgstr ""

#: ./build/en/book.xml:18556(programlisting) 
#, no-wrap
msgid "svn cleanup [PATH...]"
msgstr ""

#: ./build/en/book.xml:18561(para) 
msgid "Recursively clean up the working copy, removing working copy locks and resuming unfinished operations. If you ever get a <quote>working copy locked</quote> error, run this command to remove stale locks and get your working copy into a usable state again."
msgstr ""

#: ./build/en/book.xml:18567(para) 
msgid "If, for some reason, an <command moreinfo=\"none\">svn update</command> fails due to a problem running an external diff program (e.g. user input or network failure), pass the <option>--diff3-cmd</option> to allow cleanup to complete any merging with your external diff program. You can also specify any configuration directory with the <option>--config-dir</option> switch, but you should need these switches extremely infrequently."
msgstr ""

#: ./build/en/book.xml:18585(para) ./build/en/book.xml:20241(para) ./build/en/book.xml:20998(para) ./build/en/book.xml:21087(para) ./build/en/book.xml:21598(para) ./build/en/book.xml:21897(para) 
msgid "Working copy"
msgstr ""

#: ./build/en/book.xml:18596(screen) 
#, no-wrap
msgid "\n--diff3-cmd CMD\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:18606(para) 
msgid "Well, there's not much to the examples here as <command moreinfo=\"none\">svn cleanup</command> generates no output. If you pass no <replaceable>PATH</replaceable>, <quote><filename moreinfo=\"none\">.</filename></quote> is used."
msgstr ""

#: ./build/en/book.xml:18611(screen) 
#, no-wrap
msgid "\n$ svn cleanup\n\n$ svn cleanup /path/to/working-copy\n"
msgstr ""

#: ./build/en/book.xml:18625(tertiary) 
msgid "commit"
msgstr ""

#: ./build/en/book.xml:18630(refpurpose) 
msgid "Send changes from your working copy to the repository."
msgstr ""

#: ./build/en/book.xml:18634(programlisting) 
#, no-wrap
msgid "svn commit [PATH...]"
msgstr ""

#: ./build/en/book.xml:18639(para) 
msgid "Send changes from your working copy to the repository. If you do not supply a log message with your commit by using either the <option>--file</option> or <option>--message</option> switch, <command moreinfo=\"none\">svn</command> will launch your editor for you to compose a commit message. See the <literal moreinfo=\"none\">editor-cmd</literal> section in <xref linkend=\"svn.advanced.confarea.opts.config\"/>."
msgstr ""

#: ./build/en/book.xml:18647(para) 
msgid "<command moreinfo=\"none\">svn commit</command> will send found lock tokens and release locks on all <replaceable>PATHS</replaceable> committed (recursively) unless <option>--no-unlock</option> is passed."
msgstr ""

#: ./build/en/book.xml:18653(para) 
msgid "If you begin a commit and Subversion launches your editor to compose the commit message, you can still abort without committing your changes. If you want to cancel your commit, just quit your editor without saving your commit message and Subversion will prompt you to either abort the commit, continue with no message, or edit the message again."
msgstr ""

#: ./build/en/book.xml:18668(para) 
msgid "ci (short for <quote>check in</quote>; not <quote>co</quote>, which is short for <quote>checkout</quote>)"
msgstr ""

#: ./build/en/book.xml:18675(para) 
msgid "Working copy, repository"
msgstr ""

#: ./build/en/book.xml:18686(screen) 
#, no-wrap
msgid "\n--message (-m) TEXT\n--file (-F) FILE\n--quiet (-q)\n--no-unlock\n--non-recursive (-N)\n--targets FILENAME\n--force-log\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--encoding ENC\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:18706(para) 
msgid "Commit a simple modification to a file with the commit message on the command line and an implicit target of your current directory (<quote><filename moreinfo=\"none\">.</filename></quote>):"
msgstr ""

#: ./build/en/book.xml:18711(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"added howto section.\"\nSending        a\nTransmitting file data .\nCommitted revision 3.\n"
msgstr ""

#: ./build/en/book.xml:18718(para) 
msgid "Commit a modification to the file <filename moreinfo=\"none\">foo.c</filename> (explicitly specified on the command line) with the commit message in a file named <literal moreinfo=\"none\">msg</literal>:"
msgstr ""

#: ./build/en/book.xml:18723(screen) 
#, no-wrap
msgid "\n$ svn commit -F msg foo.c\nSending        foo.c\nTransmitting file data .\nCommitted revision 5.\n"
msgstr ""

#: ./build/en/book.xml:18730(para) 
msgid "If you want to use a file that's under version control for your commit message with <option>--file</option>, you need to pass the <option>--force-log</option> switch:"
msgstr ""

#: ./build/en/book.xml:18735(screen) 
#, no-wrap
msgid "\n$ svn commit --file file_under_vc.txt foo.c\nsvn: The log message file is under version control\nsvn: Log message file is a versioned file; use '--force-log' to override\n\n$ svn commit --force-log --file file_under_vc.txt foo.c\nSending        foo.c\nTransmitting file data .\nCommitted revision 6.\n"
msgstr ""

#: ./build/en/book.xml:18746(para) 
msgid "To commit a file scheduled for deletion:"
msgstr ""

#: ./build/en/book.xml:18748(screen) 
#, no-wrap
msgid "\n$ svn commit -m \"removed file 'c'.\"\nDeleting       c\n\nCommitted revision 7.\n"
msgstr ""

#: ./build/en/book.xml:18763(tertiary) 
msgid "copy"
msgstr ""

#: ./build/en/book.xml:18768(refpurpose) 
msgid "Copy a file or directory in a working copy or in the repository."
msgstr ""

#: ./build/en/book.xml:18774(programlisting) 
#, no-wrap
msgid "svn copy SRC DST"
msgstr ""

#: ./build/en/book.xml:18780(para) 
msgid "Copy a file in a working copy or in the repository. <replaceable>SRC</replaceable> and <replaceable>DST</replaceable> can each be either a working copy (WC) path or URL:"
msgstr ""

#: ./build/en/book.xml:18788(term) ./build/en/book.xml:20428(term) 
msgid "WC -&gt; WC"
msgstr ""

#: ./build/en/book.xml:18790(para) 
msgid "Copy and schedule an item for addition (with history)."
msgstr ""

#: ./build/en/book.xml:18796(term) 
msgid "WC -&gt; URL"
msgstr ""

#: ./build/en/book.xml:18798(para) 
msgid "Immediately commit a copy of WC to URL."
msgstr ""

#: ./build/en/book.xml:18803(term) 
msgid "URL -&gt; WC"
msgstr ""

#: ./build/en/book.xml:18805(para) 
msgid "Check out URL into WC, and schedule it for addition."
msgstr ""

#: ./build/en/book.xml:18811(term) ./build/en/book.xml:20436(term) 
msgid "URL -&gt; URL"
msgstr ""

#: ./build/en/book.xml:18813(para) 
msgid "Complete server-side copy. This is usually used to branch and tag."
msgstr ""

#: ./build/en/book.xml:18821(para) 
msgid "You can only copy files within a single repository. Subversion does not support cross-repository copying."
msgstr ""

#: ./build/en/book.xml:18829(para) 
msgid "cp"
msgstr ""

#: ./build/en/book.xml:18834(para) 
msgid "Repository if destination is a URL."
msgstr ""

#: ./build/en/book.xml:18835(para) 
msgid "Working copy if destination is a WC path."
msgstr ""

#: ./build/en/book.xml:18840(para) 
msgid "If source or destination is in the repository, or if needed to look up the source revision number."
msgstr ""

#: ./build/en/book.xml:18847(screen) 
#, no-wrap
msgid "\n--message (-m) TEXT\n--file (-F) FILE\n--revision (-r) REV\n--quiet (-q)\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--force-log\n--editor-cmd EDITOR\n--encoding ENC\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:18866(para) 
msgid "Copy an item within your working copy (just schedules the copy—nothing goes into the repository until you commit):"
msgstr ""

#: ./build/en/book.xml:18870(screen) 
#, no-wrap
msgid "\n$ svn copy foo.txt bar.txt\nA         bar.txt\n$ svn status\nA  +   bar.txt\n"
msgstr ""

#: ./build/en/book.xml:18877(para) 
msgid "Copy an item in your working copy to a URL in the repository (an immediate commit, so you must supply a commit message):"
msgstr ""

#: ./build/en/book.xml:18881(screen) 
#, no-wrap
msgid "\n$ svn copy near.txt file:///tmp/repos/test/far-away.txt -m \"Remote copy.\"\n\nCommitted revision 8.\n"
msgstr ""

#: ./build/en/book.xml:18887(para) 
msgid "Copy an item from the repository to your working copy (just schedules the copy—nothing goes into the repository until you commit):"
msgstr ""

#: ./build/en/book.xml:18892(para) 
msgid "This is the recommended way to resurrect a dead file in your repository!"
msgstr ""

#: ./build/en/book.xml:18896(screen) 
#, no-wrap
msgid "\n$ svn copy file:///tmp/repos/test/far-away near-here\nA         near-here\n"
msgstr ""

#: ./build/en/book.xml:18901(para) 
msgid "And finally, copying between two URLs:"
msgstr ""

#: ./build/en/book.xml:18903(screen) 
#, no-wrap
msgid "\n$ svn copy file:///tmp/repos/test/far-away file:///tmp/repos/test/over-there -m \"remote copy.\"\n\nCommitted revision 9.\n"
msgstr ""

#: ./build/en/book.xml:18910(para) 
msgid "This is the easiest way to <quote>tag</quote> a revision in your repository—just <command moreinfo=\"none\">svn copy</command> that revision (usually <literal moreinfo=\"none\">HEAD</literal>) into your tags directory."
msgstr ""

#: ./build/en/book.xml:18916(screen) 
#, no-wrap
msgid "\n$ svn copy file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"tag tree\"\n\nCommitted revision 12.\n"
msgstr ""

#: ./build/en/book.xml:18922(para) 
msgid "And don't worry if you forgot to tag—you can always specify an older revision and tag anytime:"
msgstr ""

#: ./build/en/book.xml:18925(screen) 
#, no-wrap
msgid "\n$ svn copy -r 11 file:///tmp/repos/test/trunk file:///tmp/repos/test/tags/0.6.32-prerelease -m \"Forgot to tag at rev 11\"\n\nCommitted revision 13.\n"
msgstr ""

#: ./build/en/book.xml:18938(tertiary) 
msgid "delete"
msgstr ""

#: ./build/en/book.xml:18943(refpurpose) 
msgid "Delete an item from a working copy or the repository."
msgstr ""

#: ./build/en/book.xml:18948(programlisting) 
#, no-wrap
msgid "svn delete PATH..."
msgstr ""

#: ./build/en/book.xml:18949(programlisting) 
#, no-wrap
msgid "svn delete URL..."
msgstr ""

#: ./build/en/book.xml:18954(para) 
msgid "Items specified by <replaceable>PATH</replaceable> are scheduled for deletion upon the next commit. Files (and directories that have not been committed) are immediately removed from the working copy. The command will not remove any unversioned or modified items; use the <option>--force</option> switch to override this behavior."
msgstr ""

#: ./build/en/book.xml:18962(para) 
msgid "Items specified by URL are deleted from the repository via an immediate commit. Multiple URLs are committed atomically."
msgstr ""

#: ./build/en/book.xml:18969(para) 
msgid "del, remove, rm"
msgstr ""

#: ./build/en/book.xml:18974(para) 
msgid "Working copy if operating on files, Repository if operating on URLs"
msgstr ""

#: ./build/en/book.xml:18980(para) ./build/en/book.xml:19636(para) 
msgid "Only if operating on URLs"
msgstr ""

#: ./build/en/book.xml:18986(screen) 
#, no-wrap
msgid "\n--force\n--force-log\n--message (-m) TEXT\n--file (-F) FILE\n--quiet (-q)\n--targets FILENAME\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--editor-cmd EDITOR\n--encoding ENC\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:19006(para) 
msgid "Using <command moreinfo=\"none\">svn</command> to delete a file from your working copy merely schedules it to be deleted. When you commit, the file is deleted in the repository."
msgstr ""

#: ./build/en/book.xml:19011(screen) 
#, no-wrap
msgid "\n$ svn delete myfile\nD         myfile\n\n$ svn commit -m \"Deleted file 'myfile'.\"\nDeleting       myfile\nTransmitting file data .\nCommitted revision 14.\n"
msgstr ""

#: ./build/en/book.xml:19021(para) 
msgid "Deleting a URL, however, is immediate, so you have to supply a log message:"
msgstr ""

#: ./build/en/book.xml:19024(screen) 
#, no-wrap
msgid "\n$ svn delete -m \"Deleting file 'yourfile'\" file:///tmp/repos/test/yourfile\n\nCommitted revision 15.\n"
msgstr ""

#: ./build/en/book.xml:19030(para) 
msgid "Here's an example of how to force deletion of a file that has local mods:"
msgstr ""

#: ./build/en/book.xml:19033(screen) 
#, no-wrap
msgid "\n$ svn delete over-there \nsvn: Attempting restricted operation for modified resource\nsvn: Use --force to override this restriction\nsvn: 'over-there' has local modifications\n\n$ svn delete --force over-there \nD         over-there\n"
msgstr ""

#: ./build/en/book.xml:19051(tertiary) ./build/en/book.xml:23249(tertiary) 
msgid "diff"
msgstr ""

#: ./build/en/book.xml:19056(refpurpose) 
msgid "Display the differences between two paths."
msgstr ""

#: ./build/en/book.xml:19060(programlisting) 
#, no-wrap
msgid "diff [-r N[:M]] [TARGET[@REV]...]"
msgstr ""

#: ./build/en/book.xml:19061(programlisting) 
#, no-wrap
msgid "diff [-r N[:M]] --old OLD-TGT[@OLDREV] [--new NEW-TGT[@NEWREV]] [PATH...]"
msgstr ""

#: ./build/en/book.xml:19062(programlisting) 
#, no-wrap
msgid "diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]"
msgstr ""

#: ./build/en/book.xml:19067(para) 
msgid "Display the differences between two paths. The three different ways you can use <command moreinfo=\"none\">svn diff</command> are:"
msgstr ""

#: ./build/en/book.xml:19071(para) 
msgid "<command moreinfo=\"none\">svn diff [-r N[:M]] [--old OLD-TGT] [--new NEW-TGT] [PATH...]</command> displays the differences between <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</replaceable>. If <replaceable>PATH</replaceable>s are given, they are treated as relative to <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</replaceable> and the output is restricted to differences in only those paths. <replaceable>OLD-TGT</replaceable> and <replaceable>NEW-TGT</replaceable> may be working copy paths or <replaceable>URL</replaceable><literal moreinfo=\"none\">[@</literal><replaceable>REV</replaceable><literal moreinfo=\"none\">]</literal>. <replaceable>OLD-TGT</replaceable> defaults to the current working directory and <replaceable>NEW-TGT</replaceable> defaults to <replaceable>OLD-TGT</replaceable>. <replaceable>N</replaceable> defaults to <literal moreinfo=\"none\">BASE</literal> or, if <replaceable>OLD-TGT</replaceable> is a URL, to <literal moreinfo=\"none\">HEAD</literal>. <replaceable>M</replaceable> defaults to the current working version or, if <replaceable>NEW-TGT</replaceable> is a URL, to <literal moreinfo=\"none\">HEAD</literal>. <command moreinfo=\"none\">svn diff -r N</command> sets the revision of <replaceable>OLD-TGT</replaceable> to <replaceable>N</replaceable>, <command moreinfo=\"none\">svn diff -r N:M</command> also sets the revision of <replaceable>NEW-TGT</replaceable> to <replaceable>M</replaceable>."
msgstr ""

#: ./build/en/book.xml:19099(para) 
msgid "<command moreinfo=\"none\">svn diff -r N:M URL</command> is shorthand for <command moreinfo=\"none\">svn diff -r N:M --old=URL --new=URL</command>."
msgstr ""

#: ./build/en/book.xml:19103(para) 
msgid "<command moreinfo=\"none\">svn diff [-r N[:M]] URL1[@N] URL2[@M]</command> is shorthand for <command moreinfo=\"none\">svn diff [-r N[:M]] --old=URL1 --new=URL2</command>."
msgstr ""

#: ./build/en/book.xml:19107(para) 
msgid "If <replaceable>TARGET</replaceable> is a URL, then revs N and M can be given either via the <option>--revision</option> or by using <quote>@</quote> notation as described earlier."
msgstr ""

#: ./build/en/book.xml:19112(para) 
msgid "If <replaceable>TARGET</replaceable> is a working copy path, then the <option>--revision</option> switch means:"
msgstr ""

#: ./build/en/book.xml:19119(option) 
msgid "--revision N:M"
msgstr ""

#: ./build/en/book.xml:19121(para) 
msgid "The server compares <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> and <replaceable>TARGET</replaceable>@<replaceable>M</replaceable>."
msgstr ""

#: ./build/en/book.xml:19129(option) 
msgid "--revision N"
msgstr ""

#: ./build/en/book.xml:19131(para) 
msgid "The client compares <replaceable>TARGET</replaceable>@<replaceable>N</replaceable> against working copy."
msgstr ""

#: ./build/en/book.xml:19138(term) 
msgid "(no <option>--revision</option>)"
msgstr ""

#: ./build/en/book.xml:19140(para) 
msgid "The client compares base and working copies of <replaceable>TARGET</replaceable>."
msgstr ""

#: ./build/en/book.xml:19147(para) 
msgid "If the alternate syntax is used, the server compares <replaceable>URL1</replaceable> and <replaceable>URL2</replaceable> at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable> respectively. If either <replaceable>N</replaceable> or <replaceable>M</replaceable> are omitted, a value of <literal moreinfo=\"none\">HEAD</literal> is assumed."
msgstr ""

#: ./build/en/book.xml:19156(para) 
msgid "By default, <command moreinfo=\"none\">svn diff</command> ignores the ancestry of files and merely compares the contents of the two files being compared. If you use <option>--notice-ancestry</option>, the ancestry of the paths in question will be taken into consideration when comparing revisions (that is, if you run <command moreinfo=\"none\">svn diff</command> on two files with identical contents but different ancestry you will see the entire contents of the file as having been removed and added again)."
msgstr ""

#: ./build/en/book.xml:19169(para) 
msgid "di"
msgstr ""

#: ./build/en/book.xml:19179(para) 
msgid "For obtaining differences against anything but <literal moreinfo=\"none\">BASE</literal> revision in your working copy"
msgstr ""

#: ./build/en/book.xml:19186(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--old OLD-TARGET\n--new NEW-TARGET\n--extensions (-x) \"ARGS\"\n--non-recursive (-N)\n--diff-cmd CMD\n--notice-ancestry\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--no-diff-deleted\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:19206(para) 
msgid "Compare <literal moreinfo=\"none\">BASE</literal> and your working copy (one of the most popular uses of <command moreinfo=\"none\">svn diff</command>):"
msgstr ""

#: ./build/en/book.xml:19210(screen) 
#, no-wrap
msgid "\n$ svn diff COMMITTERS \nIndex: COMMITTERS\n===================================================================\n--- COMMITTERS\t(revision 4404)\n+++ COMMITTERS\t(working copy)\n"
msgstr ""

#: ./build/en/book.xml:19218(para) 
msgid "See how your working copy's modifications compare against an older revision:"
msgstr ""

#: ./build/en/book.xml:19221(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3900 COMMITTERS \nIndex: COMMITTERS\n===================================================================\n--- COMMITTERS\t(revision 3900)\n+++ COMMITTERS\t(working copy)\n"
msgstr ""

#: ./build/en/book.xml:19229(para) 
msgid "Compare revision 3000 to revision 3500 using <quote>@</quote> syntax:"
msgstr ""

#: ./build/en/book.xml:19232(screen) 
#, no-wrap
msgid "\n$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500\nIndex: COMMITTERS\n===================================================================\n--- COMMITTERS\t(revision 3000)\n+++ COMMITTERS\t(revision 3500)\n…\n"
msgstr ""

#: ./build/en/book.xml:19241(para) 
msgid "Compare revision 3000 to revision 3500 using range notation (you only pass the one URL in this case):"
msgstr ""

#: ./build/en/book.xml:19245(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS\nIndex: COMMITTERS\n===================================================================\n--- COMMITTERS\t(revision 3000)\n+++ COMMITTERS\t(revision 3500)\n"
msgstr ""

#: ./build/en/book.xml:19254(para) 
msgid "Compare revision 3000 to revision 3500 of all files in <filename moreinfo=\"none\">trunk</filename> using range notation:"
msgstr ""

#: ./build/en/book.xml:19257(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk\n          "
msgstr ""

#: ./build/en/book.xml:19262(para) 
msgid "Compare revision 3000 to revision 3500 of only three files in <filename moreinfo=\"none\">trunk</filename> using range notation:"
msgstr ""

#: ./build/en/book.xml:19266(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk COMMITTERS README HACKING\n          "
msgstr ""

#: ./build/en/book.xml:19270(para) 
msgid "If you have a working copy, you can obtain the differences without typing in the long URLs:"
msgstr ""

#: ./build/en/book.xml:19273(screen) 
#, no-wrap
msgid "\n$ svn diff -r 3000:3500 COMMITTERS \nIndex: COMMITTERS\n===================================================================\n--- COMMITTERS\t(revision 3000)\n+++ COMMITTERS\t(revision 3500)\n"
msgstr ""

#: ./build/en/book.xml:19281(para) 
msgid "Use <option>--diff-cmd</option><replaceable>CMD</replaceable><option>-x</option> to pass arguments directly to the external diff program"
msgstr ""

#: ./build/en/book.xml:19286(screen) 
#, no-wrap
msgid "\n$ svn diff --diff-cmd /usr/bin/diff -x \"-i -b\" COMMITTERS \nIndex: COMMITTERS\n===================================================================\n0a1,2\n&gt; This is a test\n&gt; \n"
msgstr ""

#: ./build/en/book.xml:19303(tertiary) 
msgid "export"
msgstr ""

#: ./build/en/book.xml:19307(refname) 
msgid "svn export"
msgstr ""

#: ./build/en/book.xml:19308(refpurpose) 
msgid "Export a clean directory tree."
msgstr ""

#: ./build/en/book.xml:19312(programlisting) 
#, no-wrap
msgid "svn export [-r REV] URL[@PEGREV] [PATH]"
msgstr ""

#: ./build/en/book.xml:19313(programlisting) 
#, no-wrap
msgid "svn export [-r REV] PATH1[@PEGREV] [PATH2]"
msgstr ""

#: ./build/en/book.xml:19318(para) 
msgid "The first form exports a clean directory tree from the repository specified by URL, at revision <replaceable>REV</replaceable> if it is given, otherwise at <literal moreinfo=\"none\">HEAD</literal>, into <replaceable>PATH</replaceable>. If <replaceable>PATH</replaceable> is omitted, the last component of the <replaceable>URL</replaceable> is used for the local directory name."
msgstr ""

#: ./build/en/book.xml:19327(para) 
msgid "The second form exports a clean directory tree from the working copy specified by <replaceable>PATH1</replaceable> into <replaceable>PATH2</replaceable>. All local changes will be preserved, but files not under version control will not be copied."
msgstr ""

#: ./build/en/book.xml:19342(para) 
msgid "Local disk"
msgstr ""

#: ./build/en/book.xml:19347(para) 
msgid "Only if exporting from a URL"
msgstr ""

#: ./build/en/book.xml:19353(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--quiet (-q)\n--force\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--non-recursive (-N)\n--config-dir DIR\n--native-eol EOL\n--ignore-externals\n"
msgstr ""

#: ./build/en/book.xml:19371(para) 
msgid "Export from your working copy (doesn't print every file and directory):"
msgstr ""

#: ./build/en/book.xml:19374(screen) 
#, no-wrap
msgid "\n$ svn export a-wc my-export\nExport complete.\n"
msgstr ""

#: ./build/en/book.xml:19379(para) 
msgid "Export directly from the repository (prints every file and directory):"
msgstr ""

#: ./build/en/book.xml:19382(screen) 
#, no-wrap
msgid "\n$ svn export file:///tmp/repos my-export\nA  my-export/test\nA  my-export/quiz\n…\nExported revision 15.\n"
msgstr ""

#: ./build/en/book.xml:19390(para) 
msgid "When rolling operating-system-specific release packages, it can be useful to export a tree which uses a specific EOL character for line endings. The <option>--native-eol</option> option will do this, but it only affects files that have <literal moreinfo=\"none\">svn:eol-style = native</literal> properties attached to them. For example, to export a tree with all CRLF line endings (possibly for a Windows .zip file distribution):"
msgstr ""

#: ./build/en/book.xml:19399(screen) 
#, no-wrap
msgid "\n$ svn export file:///tmp/repos my-export --native-eol CRLF\nA  my-export/test\nA  my-export/quiz\n…\nExported revision 15.\n"
msgstr ""

#: ./build/en/book.xml:19417(tertiary) ./build/en/book.xml:22317(tertiary) ./build/en/book.xml:23367(tertiary) 
msgid "help"
msgstr ""

#: ./build/en/book.xml:19421(refname) 
msgid "svn help"
msgstr ""

#: ./build/en/book.xml:19426(programlisting) 
#, no-wrap
msgid "svn help [SUBCOMMAND...]"
msgstr ""

#: ./build/en/book.xml:19431(para) 
msgid "This is your best friend when you're using Subversion and this book isn't within reach!"
msgstr ""

#: ./build/en/book.xml:19437(para) ./build/en/book.xml:22339(para) ./build/en/book.xml:23388(para) 
msgid "?, h"
msgstr ""

#: ./build/en/book.xml:19438(para) 
msgid "The options <option>-?</option>, <option>-h</option> and <option>--help</option> have the same effect as using the <command moreinfo=\"none\">help</command> subcommand."
msgstr ""

#: ./build/en/book.xml:19456(screen) 
#, no-wrap
msgid "\n--version\n--quiet (-q)\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:19469(tertiary) 
msgid "import"
msgstr ""

#: ./build/en/book.xml:19474(refpurpose) 
msgid "Commit an unversioned file or tree into the repository."
msgstr ""

#: ./build/en/book.xml:19479(programlisting) 
#, no-wrap
msgid "svn import [PATH] URL"
msgstr ""

#: ./build/en/book.xml:19484(para) 
msgid "Recursively commit a copy of <replaceable>PATH</replaceable> to <replaceable>URL</replaceable>. If <replaceable>PATH</replaceable> is omitted <quote><filename moreinfo=\"none\">.</filename></quote> is assumed. Parent directories are created in the repository as necessary."
msgstr ""

#: ./build/en/book.xml:19500(para) 
msgid "Repository"
msgstr ""

#: ./build/en/book.xml:19511(screen) 
#, no-wrap
msgid "\n--message (-m) TEXT\n--file (-F) FILE\n--quiet (-q)\n--non-recursive (-N)\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--force-log\n--editor-cmd EDITOR\n--encoding ENC\n--config-dir DIR\n--auto-props\n--no-auto-props\n--ignore-externals\n"
msgstr ""

#: ./build/en/book.xml:19533(para) 
msgid "This imports the local directory <filename moreinfo=\"none\">myproj</filename> into the root of your repository:"
msgstr ""

#: ./build/en/book.xml:19536(screen) 
#, no-wrap
msgid "\n$ svn import -m \"New import\" myproj http://svn.red-bean.com/repos/test\nAdding         myproj/sample.txt\n…\nTransmitting file data .........\nCommitted revision 16.\n"
msgstr ""

#: ./build/en/book.xml:19544(para) 
msgid "This imports the local directory <filename moreinfo=\"none\">myproj</filename> into <filename moreinfo=\"none\">trunk/misc</filename> in your repository. The directory <filename moreinfo=\"none\">trunk/misc</filename> need not exist before you import into it—<command moreinfo=\"none\">svn import</command> will recursively create directories for you:"
msgstr ""

#: ./build/en/book.xml:19549(screen) 
#, no-wrap
msgid "\n$ svn import -m \"New import\" myproj \\\n    http://svn.red-bean.com/repos/test/trunk/misc/myproj\nAdding         myproj/sample.txt\n…\nTransmitting file data .........\nCommitted revision 19.\n"
msgstr ""

#: ./build/en/book.xml:19558(para) 
msgid "After importing data, note that the original tree is <emphasis>not</emphasis> under version control. To start working, you still need to <command moreinfo=\"none\">svn checkout</command> a fresh working copy of the tree."
msgstr ""

#: ./build/en/book.xml:19571(tertiary) ./build/en/book.xml:23463(tertiary) 
msgid "info"
msgstr ""

#: ./build/en/book.xml:19575(refname) 
msgid "svn info"
msgstr ""

#: ./build/en/book.xml:19576(refpurpose) 
msgid "Display information about a local or remote item."
msgstr ""

#: ./build/en/book.xml:19581(programlisting) 
#, no-wrap
msgid "svn info [TARGET...]"
msgstr ""

#: ./build/en/book.xml:19586(para) 
msgid "Print information about the working copy paths or URLs specified. The information shown for both may include:"
msgstr ""

#: ./build/en/book.xml:19591(para) 
msgid "Path"
msgstr ""

#: ./build/en/book.xml:19592(para) 
msgid "Name"
msgstr ""

#: ./build/en/book.xml:19593(para) 
msgid "URL"
msgstr ""

#: ./build/en/book.xml:19594(para) 
msgid "Repository Root"
msgstr ""

#: ./build/en/book.xml:19595(para) 
msgid "Repository UUID"
msgstr ""

#: ./build/en/book.xml:19597(para) 
msgid "Node Kind"
msgstr ""

#: ./build/en/book.xml:19598(para) 
msgid "Last Changed Author"
msgstr ""

#: ./build/en/book.xml:19599(para) 
msgid "Last Changed Revision"
msgstr ""

#: ./build/en/book.xml:19600(para) 
msgid "Last Changed Date"
msgstr ""

#: ./build/en/book.xml:19601(para) 
msgid "Lock Token"
msgstr ""

#: ./build/en/book.xml:19602(para) 
msgid "Lock Owner"
msgstr ""

#: ./build/en/book.xml:19603(para) 
msgid "Lock Created (date)"
msgstr ""

#: ./build/en/book.xml:19604(para) 
msgid "Lock Expires (date)"
msgstr ""

#: ./build/en/book.xml:19607(para) 
msgid "Additional kinds of information available only for working copy paths are:"
msgstr ""

#: ./build/en/book.xml:19611(para) 
msgid "Schedule"
msgstr ""

#: ./build/en/book.xml:19612(para) 
msgid "Copied From URL"
msgstr ""

#: ./build/en/book.xml:19613(para) 
msgid "Copied From Rev"
msgstr ""

#: ./build/en/book.xml:19614(para) 
msgid "Text Last Updated"
msgstr ""

#: ./build/en/book.xml:19615(para) 
msgid "Properties Last Updated"
msgstr ""

#: ./build/en/book.xml:19616(para) 
msgid "Checksum"
msgstr ""

#: ./build/en/book.xml:19617(para) 
msgid "Conflict Previous Base File"
msgstr ""

#: ./build/en/book.xml:19618(para) 
msgid "Conflict Previous Working File"
msgstr ""

#: ./build/en/book.xml:19619(para) 
msgid "Conflict Current Base File"
msgstr ""

#: ./build/en/book.xml:19620(para) 
msgid "Conflict Properties File"
msgstr ""

#: ./build/en/book.xml:19642(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--recursive (-R)\n--targets FILENAME\n--incremental\n--xml\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:19659(para) 
msgid "<command moreinfo=\"none\">svn info</command> will show you all the useful information that it has for items in your working copy. It will show information for files:"
msgstr ""

#: ./build/en/book.xml:19663(screen) 
#, no-wrap
msgid "\n$ svn info foo.c\nPath: foo.c\nName: foo.c\nURL: http://svn.red-bean.com/repos/test/foo.c\nRepository Root: http://svn.red-bean.com/repos/test\nRepository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\nRevision: 4417\nNode Kind: file\nSchedule: normal\nLast Changed Author: sally\nLast Changed Rev: 20\nLast Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)\nText Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)\nProperties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)\nChecksum: d6aeb60b0662ccceb6bce4bac344cb66\n"
msgstr ""

#: ./build/en/book.xml:19681(para) 
msgid "It will also show information for directories:"
msgstr ""

#: ./build/en/book.xml:19683(screen) 
#, no-wrap
msgid "\n$ svn info vendors\nPath: vendors\nURL: http://svn.red-bean.com/repos/test/vendors\nRepository Root: http://svn.red-bean.com/repos/test\nRepository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\nRevision: 19\nNode Kind: directory\nSchedule: normal\nLast Changed Author: harry\nLast Changed Rev: 19\nLast Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)\nProperties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)\n"
msgstr ""

#: ./build/en/book.xml:19698(para) 
msgid "<command moreinfo=\"none\">svn info</command> also acts on URLs (also note that the file readme.doc in this example is locked, so lock information is also provided):"
msgstr ""

#: ./build/en/book.xml:19702(screen) 
#, no-wrap
msgid "\n$ svn info http://svn.red-bean.com/repos/test/readme.doc\nPath: readme.doc\nName: readme.doc\nURL: http://svn.red-bean.com/repos/test/readme.doc\nRepository Root: http://svn.red-bean.com/repos/test\nRepository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25\nRevision: 1\nNode Kind: file\nSchedule: normal\nLast Changed Author: sally\nLast Changed Rev: 42\nLast Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)\nLock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2\nLock Owner: harry\nLock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)\nLock Comment (1 line):\nMy test lock comment\n"
msgstr ""

#: ./build/en/book.xml:19732(tertiary) 
msgid "list"
msgstr ""

#: ./build/en/book.xml:19737(refpurpose) 
msgid "List directory entries in the repository."
msgstr ""

#: ./build/en/book.xml:19741(programlisting) 
#, no-wrap
msgid "svn list [TARGET[@REV]...]"
msgstr ""

#: ./build/en/book.xml:19746(para) 
msgid "List each <replaceable>TARGET</replaceable> file and the contents of each <replaceable>TARGET</replaceable> directory as they exist in the repository. If <replaceable>TARGET</replaceable> is a working copy path, the corresponding repository URL will be used."
msgstr ""

#: ./build/en/book.xml:19752(para) 
msgid "The default <replaceable>TARGET</replaceable> is <quote><filename moreinfo=\"none\">.</filename></quote>, meaning the repository URL of the current working copy directory."
msgstr ""

#: ./build/en/book.xml:19757(para) 
msgid "With <option>--verbose</option>, the following fields show the status of the item:"
msgstr ""

#: ./build/en/book.xml:19761(para) 
msgid "Revision number of the last commit"
msgstr ""

#: ./build/en/book.xml:19762(para) 
msgid "Author of the last commit"
msgstr ""

#: ./build/en/book.xml:19763(para) 
msgid "Size (in bytes)"
msgstr ""

#: ./build/en/book.xml:19764(para) 
msgid "Date and time of the last commit"
msgstr ""

#: ./build/en/book.xml:19768(para) 
msgid "With <option>--xml</option>, output is in XML format (with a header and an enclosing document element unless <option>--incremental</option> is also specified). All of the information is present; the <option>--verbose</option> option is not accepted."
msgstr ""

#: ./build/en/book.xml:19777(para) 
msgid "ls"
msgstr ""

#: ./build/en/book.xml:19793(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--verbose (-v)\n--recursive (-R)\n--incremental\n--xml\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:19810(para) 
msgid "<command moreinfo=\"none\">svn list</command> is most useful if you want to see what files a repository has without downloading a working copy:"
msgstr ""

#: ./build/en/book.xml:19814(screen) 
#, no-wrap
msgid "\n$ svn list http://svn.red-bean.com/repos/test/support\nREADME.txt\nINSTALL\nexamples/\n…\n"
msgstr ""

#: ./build/en/book.xml:19822(para) 
msgid "You can pass the <option>--verbose</option> switch for additional information, rather like the UNIX command <command moreinfo=\"none\">ls -l</command>:"
msgstr ""

#: ./build/en/book.xml:19826(screen) 
#, no-wrap
msgid "\n$ svn list --verbose file:///tmp/repos\n     16 sally         28361 Jan 16 23:18 README.txt\n     27 sally             0 Jan 18 15:27 INSTALL\n     24 harry               Jan 18 11:27 examples/\n"
msgstr ""

#: ./build/en/book.xml:19833(para) 
msgid "For further details, see <xref linkend=\"svn.tour.history.browsing.list\"/>."
msgstr ""

#: ./build/en/book.xml:19844(tertiary) ./build/en/book.xml:23514(tertiary) 
msgid "lock"
msgstr ""

#: ./build/en/book.xml:19848(refname) 
msgid "svn lock"
msgstr ""

#: ./build/en/book.xml:19849(refpurpose) 
msgid "Lock working copy paths or URLs in the repository, so that no other user can commit changes to them."
msgstr ""

#: ./build/en/book.xml:19855(programlisting) 
#, no-wrap
msgid "svn lock TARGET..."
msgstr ""

#: ./build/en/book.xml:19860(para) 
msgid "Lock each <replaceable>TARGET</replaceable>. If any <replaceable>TARGET</replaceable> is already locked by another user, print a warning and continue locking the rest of the <replaceable>TARGET</replaceable>s. Use <option>--force</option> to steal a lock from another user or working copy."
msgstr ""

#: ./build/en/book.xml:19876(para) ./build/en/book.xml:21756(para) 
msgid "Working Copy, Repository"
msgstr ""

#: ./build/en/book.xml:19887(screen) 
#, no-wrap
msgid "\n--targets FILENAME\n--message (-m) TEXT\n--file (-F) FILE\n--force-log\n--encoding ENC\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n--force\n"
msgstr ""

#: ./build/en/book.xml:19905(para) 
msgid "Lock two files in your working copy:"
msgstr ""

#: ./build/en/book.xml:19907(screen) 
#, no-wrap
msgid "\n\n$ svn lock tree.jpg house.jpg\n'tree.jpg' locked by user 'harry'.\n'house.jpg' locked by user 'harry'.\n"
msgstr ""

#: ./build/en/book.xml:19914(para) 
msgid "Lock a file in your working copy that is currently locked by another user:"
msgstr ""

#: ./build/en/book.xml:19917(screen) 
#, no-wrap
msgid "\n$ svn lock tree.jpg\nsvn: warning: Path '/tree.jpg is already locked by user 'harry in \\\n     filesystem '/svn/repos/db'\n\n$ svn lock --force foo\n'tree.jpg' locked by user 'sally'.\n"
msgstr ""

#: ./build/en/book.xml:19926(para) 
msgid "Lock a file without a working copy:"
msgstr ""

#: ./build/en/book.xml:19928(screen) 
#, no-wrap
msgid "\n$ svn lock http://svn.red-bean.com/repos/test/tree.jpg\n'tree.jpg' locked by user 'sally'.\n"
msgstr ""

#: ./build/en/book.xml:19933(para) ./build/en/book.xml:21807(para) 
msgid "For further details, see <xref linkend=\"svn.advanced.locking\"/>."
msgstr ""

#: ./build/en/book.xml:19944(tertiary) ./build/en/book.xml:23566(tertiary) 
msgid "log"
msgstr ""

#: ./build/en/book.xml:19949(refpurpose) 
msgid "Display commit log messages."
msgstr ""

#: ./build/en/book.xml:19953(programlisting) 
#, no-wrap
msgid "svn log [PATH]"
msgstr ""

#: ./build/en/book.xml:19954(programlisting) 
#, no-wrap
msgid "svn log URL [PATH...]"
msgstr ""

#: ./build/en/book.xml:19959(para) 
msgid "The default target is the path of your current directory. If no arguments are supplied, <command moreinfo=\"none\">svn log</command> shows the log messages for all files and directories inside of (and including) the current working directory of your working copy. You can refine the results by specifying a path, one or more revisions, or any combination of the two. The default revision range for a local path is <literal moreinfo=\"none\">BASE:1</literal>."
msgstr ""

#: ./build/en/book.xml:19968(para) 
msgid "If you specify a URL alone, then it prints log messages for everything that the URL contains. If you add paths past the URL, only messages for those paths under that URL will be printed. The default revision range for a URL is <literal moreinfo=\"none\">HEAD:1</literal>."
msgstr ""

#: ./build/en/book.xml:19974(para) 
msgid "With <option>--verbose</option>, <command moreinfo=\"none\">svn log</command> will also print all affected paths with each log message. With <option>--quiet</option>, <command moreinfo=\"none\">svn log</command> will not print the log message body itself (this is compatible with <option>--verbose</option>)."
msgstr ""

#: ./build/en/book.xml:19980(para) 
msgid "Each log message is printed just once, even if more than one of the affected paths for that revision were explicitly requested. Logs follow copy history by default. Use <option>--stop-on-copy</option> to disable this behavior, which can be useful for determining branch points."
msgstr ""

#: ./build/en/book.xml:20006(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--quiet (-q)\n--verbose (-v)\n--targets FILENAME\n--stop-on-copy\n--incremental\n--limit NUM\n--xml\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20026(para) 
msgid "You can see the log messages for all the paths that changed in your working copy by running <command moreinfo=\"none\">svn log</command> from the top:"
msgstr ""

#: ./build/en/book.xml:20030(screen) 
#, no-wrap
msgid "\n$ svn log\n------------------------------------------------------------------------\nr20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n\nTweak.\n------------------------------------------------------------------------\nr17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines\n…\n"
msgstr ""

#: ./build/en/book.xml:20041(para) 
msgid "Examine all log messages for a particular file in your working copy:"
msgstr ""

#: ./build/en/book.xml:20044(screen) 
#, no-wrap
msgid "\n$ svn log foo.c\n------------------------------------------------------------------------\nr32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n\nAdded defines.\n------------------------------------------------------------------------\nr28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n…\n"
msgstr ""

#: ./build/en/book.xml:20055(para) 
msgid "If you don't have a working copy handy, you can log a URL:"
msgstr ""

#: ./build/en/book.xml:20058(screen) 
#, no-wrap
msgid "\n$ svn log http://svn.red-bean.com/repos/test/foo.c\n------------------------------------------------------------------------\nr32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n\nAdded defines.\n------------------------------------------------------------------------\nr28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n…\n"
msgstr ""

#: ./build/en/book.xml:20069(para) 
msgid "If you want several distinct paths underneath the same URL, you can use the <literal moreinfo=\"none\">URL [PATH...]</literal> syntax."
msgstr ""

#: ./build/en/book.xml:20073(screen) 
#, no-wrap
msgid "\n$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c\n------------------------------------------------------------------------\nr32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line\n\nAdded defines.\n------------------------------------------------------------------------\nr31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line\n\nAdded new file bar.c\n------------------------------------------------------------------------\nr28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines\n…\n"
msgstr ""

#: ./build/en/book.xml:20088(para) 
msgid "When you're concatenating the results of multiple calls to the log command, you may want to use the <option>--incremental</option> switch. <command moreinfo=\"none\">svn log</command> normally prints out a dashed line at the beginning of a log message, after each subsequent log message, and following the final log message. If you ran <command moreinfo=\"none\">svn log</command> on a range of two revisions, you would get this:"
msgstr ""

#: ./build/en/book.xml:20096(screen) 
#, no-wrap
msgid "\n$ svn log -r 14:15\n------------------------------------------------------------------------\nr14 | …\n\n------------------------------------------------------------------------\nr15 | …\n\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:20107(para) 
msgid "However, if you wanted to gather 2 non-sequential log messages into a file, you might do something like this:"
msgstr ""

#: ./build/en/book.xml:20111(screen) 
#, no-wrap
msgid "\n$ svn log -r 14 &gt; mylog\n$ svn log -r 19 &gt;&gt; mylog\n$ svn log -r 27 &gt;&gt; mylog\n$ cat mylog\n------------------------------------------------------------------------\nr14 | …\n\n------------------------------------------------------------------------\n------------------------------------------------------------------------\nr19 | …\n\n------------------------------------------------------------------------\n------------------------------------------------------------------------\nr27 | …\n\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:20130(para) 
msgid "You can avoid the clutter of the double dashed lines in your output by using the incremental switch:"
msgstr ""

#: ./build/en/book.xml:20134(screen) 
#, no-wrap
msgid "\n$ svn log --incremental -r 14 &gt; mylog\n$ svn log --incremental -r 19 &gt;&gt; mylog\n$ svn log --incremental -r 27 &gt;&gt; mylog\n$ cat mylog\n------------------------------------------------------------------------\nr14 | …\n\n------------------------------------------------------------------------\nr19 | …\n\n------------------------------------------------------------------------\nr27 | …\n"
msgstr ""

#: ./build/en/book.xml:20149(para) 
msgid "The <option>--incremental</option> switch provides similar output control when using the <option>--xml</option> switch."
msgstr ""

#: ./build/en/book.xml:20156(para) 
msgid "If you run <command moreinfo=\"none\">svn log</command> on a specific path and provide a specific revision and get no output at all"
msgstr ""

#: ./build/en/book.xml:20160(screen) 
#, no-wrap
msgid "\n$ svn log -r 20 http://svn.red-bean.com/untouched.txt\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:20165(para) 
msgid "That just means that the path was not modified in that revision. If you log from the top of the repository, or know the file that changed in that revision, you can specify it explicitly:"
msgstr ""

#: ./build/en/book.xml:20170(screen) 
#, no-wrap
msgid "\n$ svn log -r 20 touched.txt \n------------------------------------------------------------------------\nr20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line\n\nMade a change.\n------------------------------------------------------------------------\n"
msgstr ""

#: ./build/en/book.xml:20188(tertiary) 
msgid "merge"
msgstr ""

#: ./build/en/book.xml:20192(refname) 
msgid "svn merge"
msgstr ""

#: ./build/en/book.xml:20193(refpurpose) 
msgid "Apply the differences between two sources to a working copy path."
msgstr ""

#: ./build/en/book.xml:20198(programlisting) 
#, no-wrap
msgid "svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]"
msgstr ""

#: ./build/en/book.xml:20199(programlisting) 
#, no-wrap
msgid "svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]"
msgstr ""

#: ./build/en/book.xml:20200(programlisting) 
#, no-wrap
msgid "svn merge -r N:M SOURCE[@REV] [WCPATH]"
msgstr ""

#: ./build/en/book.xml:20205(para) 
msgid "In the first and second forms, the source paths (URLs in the first form, working copy paths in the second) are specified at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable>. These are the two sources to be compared. The revisions default to <literal moreinfo=\"none\">HEAD</literal> if omitted."
msgstr ""

#: ./build/en/book.xml:20212(para) 
msgid "In the third form, <replaceable>SOURCE</replaceable> can be a URL or working copy item, in which case the corresponding URL is used. This URL, at revisions <replaceable>N</replaceable> and <replaceable>M</replaceable>, defines the two sources to be compared."
msgstr ""

#: ./build/en/book.xml:20219(para) 
msgid "<replaceable>WCPATH</replaceable> is the working copy path that will receive the changes. If <replaceable>WCPATH</replaceable> is omitted, a default value of <quote><filename moreinfo=\"none\">.</filename></quote> is assumed, unless the sources have identical basenames that match a file within <quote><filename moreinfo=\"none\">.</filename></quote>: in which case, the differences will be applied to that file."
msgstr ""

#: ./build/en/book.xml:20227(para) 
msgid "Unlike <command moreinfo=\"none\">svn diff</command>, the merge command takes the ancestry of a file into consideration when performing a merge operation. This is very important when you're merging changes from one branch into another and you've renamed a file on one branch but not the other."
msgstr ""

#: ./build/en/book.xml:20246(para) 
msgid "Only if working with URLs"
msgstr ""

#: ./build/en/book.xml:20252(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--non-recursive (-N)\n--quiet (-q)\n--force\n--dry-run\n--diff3-cmd CMD\n--ignore-ancestry\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20271(para) 
msgid "Merge a branch back into the trunk (assuming that you have a working copy of the trunk, and that the branch was created in revision 250):"
msgstr ""

#: ./build/en/book.xml:20275(screen) 
#, no-wrap
msgid "\n$ svn merge -r 250:HEAD http://svn.red-bean.com/repos/branches/my-branch\nU  myproj/tiny.txt\nU  myproj/thhgttg.txt\nU  myproj/win.txt\nU  myproj/flo.txt\n"
msgstr ""

#: ./build/en/book.xml:20283(para) 
msgid "If you branched at revision 23, and you want to merge changes on trunk into your branch, you could do this from inside the working copy of your branch:"
msgstr ""

#: ./build/en/book.xml:20287(screen) 
#, no-wrap
msgid "\n$ svn merge -r 23:30 file:///tmp/repos/trunk/vendors\nU  myproj/thhgttg.txt\n…\n"
msgstr ""

#: ./build/en/book.xml:20293(para) 
msgid "To merge changes to a single file:"
msgstr ""

#: ./build/en/book.xml:20295(screen) 
#, no-wrap
msgid "\n$ cd myproj\n$ svn merge -r 30:31 thhgttg.txt \nU  thhgttg.txt\n"
msgstr ""

#: ./build/en/book.xml:20309(tertiary) 
msgid "mkdir"
msgstr ""

#: ./build/en/book.xml:20313(refname) 
msgid "svn mkdir"
msgstr ""

#: ./build/en/book.xml:20314(refpurpose) 
msgid "Create a new directory under version control."
msgstr ""

#: ./build/en/book.xml:20318(programlisting) 
#, no-wrap
msgid "svn mkdir PATH..."
msgstr ""

#: ./build/en/book.xml:20319(programlisting) 
#, no-wrap
msgid "svn mkdir URL..."
msgstr ""

#: ./build/en/book.xml:20324(para) 
msgid "Create a directory with a name given by the final component of the <replaceable>PATH</replaceable> or URL. A directory specified by a working copy <replaceable>PATH</replaceable> is scheduled for addition in the working copy. A directory specified by a URL is created in the repository via an immediate commit. Multiple directory URLs are committed atomically. In both cases all the intermediate directories must already exist."
msgstr ""

#: ./build/en/book.xml:20342(para) ./build/en/book.xml:20452(para) 
msgid "Working copy, repository if operating on a URL"
msgstr ""

#: ./build/en/book.xml:20347(para) ./build/en/book.xml:20457(para) ./build/en/book.xml:20542(para) ./build/en/book.xml:20621(para) ./build/en/book.xml:20698(para) ./build/en/book.xml:20778(para) ./build/en/book.xml:20874(para) 
msgid "Only if operating on a URL"
msgstr ""

#: ./build/en/book.xml:20353(screen) 
#, no-wrap
msgid "\n--message (-m) TEXT\n--file (-F) FILE\n--quiet (-q)\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--editor-cmd EDITOR\n--encoding ENC\n--force-log\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20371(para) 
msgid "Create a directory in your working copy:"
msgstr ""

#: ./build/en/book.xml:20373(screen) 
#, no-wrap
msgid "\n$ svn mkdir newdir\nA         newdir\n"
msgstr ""

#: ./build/en/book.xml:20378(para) 
msgid "Create one in the repository (instant commit, so a log message is required):"
msgstr ""

#: ./build/en/book.xml:20381(screen) 
#, no-wrap
msgid "\n$ svn mkdir -m \"Making a new dir.\" http://svn.red-bean.com/repos/newdir\n\nCommitted revision 26.\n"
msgstr ""

#: ./build/en/book.xml:20395(tertiary) 
msgid "move"
msgstr ""

#: ./build/en/book.xml:20400(refpurpose) 
msgid "Move a file or directory."
msgstr ""

#: ./build/en/book.xml:20404(programlisting) 
#, no-wrap
msgid "svn move SRC DST"
msgstr ""

#: ./build/en/book.xml:20409(para) 
msgid "This command moves a file or directory in your working copy or in the repository."
msgstr ""

#: ./build/en/book.xml:20413(para) 
msgid "This command is equivalent to an <command moreinfo=\"none\">svn copy</command> followed by <command moreinfo=\"none\">svn delete</command>."
msgstr ""

#: ./build/en/book.xml:20419(para) 
msgid "Subversion does not support moving between working copies and URLs. In addition, you can only move files within a single repository—Subversion does not support cross-repository moving."
msgstr ""

#: ./build/en/book.xml:20430(para) 
msgid "Move and schedule a file or directory for addition (with history)."
msgstr ""

#: ./build/en/book.xml:20438(para) 
msgid "Complete server-side rename."
msgstr ""

#: ./build/en/book.xml:20447(para) 
msgid "mv, rename, ren"
msgstr ""

#: ./build/en/book.xml:20463(screen) 
#, no-wrap
msgid "\n--message (-m) TEXT\n--file (-F) FILE\n--revision (-r) REV\n--quiet (-q)\n--force\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--editor-cmd EDITOR\n--encoding ENC\n--force-log\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20483(para) 
msgid "Move a file in your working copy:"
msgstr ""

#: ./build/en/book.xml:20485(screen) 
#, no-wrap
msgid "\n$ svn move foo.c bar.c\nA         bar.c\nD         foo.c\n"
msgstr ""

#: ./build/en/book.xml:20491(para) 
msgid "Move a file in the repository (an immediate commit, so it requires a commit message):"
msgstr ""

#: ./build/en/book.xml:20494(screen) 
#, no-wrap
msgid "\n$ svn move -m \"Move a file\" http://svn.red-bean.com/repos/foo.c \\\n                            http://svn.red-bean.com/repos/bar.c\n\nCommitted revision 27.\n"
msgstr ""

#: ./build/en/book.xml:20509(tertiary) 
msgid "propdel"
msgstr ""

#: ./build/en/book.xml:20513(refname) 
msgid "svn propdel"
msgstr ""

#: ./build/en/book.xml:20514(refpurpose) 
msgid "Remove a property from an item."
msgstr ""

#: ./build/en/book.xml:20518(programlisting) 
#, no-wrap
msgid "svn propdel PROPNAME [PATH...]"
msgstr ""

#: ./build/en/book.xml:20519(programlisting) 
#, no-wrap
msgid "svn propdel PROPNAME --revprop -r REV [URL]"
msgstr ""

#: ./build/en/book.xml:20524(para) 
msgid "This removes properties from files, directories, or revisions. The first form removes versioned properties in your working copy, while the second removes unversioned remote properties on a repository revision."
msgstr ""

#: ./build/en/book.xml:20532(para) 
msgid "pdel, pd"
msgstr ""

#: ./build/en/book.xml:20537(para) ./build/en/book.xml:20616(para) ./build/en/book.xml:20693(para) ./build/en/book.xml:20773(para) ./build/en/book.xml:20869(para) 
msgid "Working copy, repository only if operating on a URL"
msgstr ""

#: ./build/en/book.xml:20548(screen) 
#, no-wrap
msgid "\n--quiet (-q)\n--recursive (-R)\n--revision (-r) REV\n--revprop\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20564(para) 
msgid "Delete a property from a file in your working copy"
msgstr ""

#: ./build/en/book.xml:20567(screen) 
#, no-wrap
msgid "\n$ svn propdel svn:mime-type  some-script\nproperty 'svn:mime-type' deleted from 'some-script'.\n"
msgstr ""

#: ./build/en/book.xml:20572(para) 
msgid "Delete a revision property:"
msgstr ""

#: ./build/en/book.xml:20574(screen) 
#, no-wrap
msgid "\n$ svn propdel --revprop -r 26 release-date \nproperty 'release-date' deleted from repository revision '26'\n"
msgstr ""

#: ./build/en/book.xml:20587(tertiary) 
msgid "propedit"
msgstr ""

#: ./build/en/book.xml:20591(refname) 
msgid "svn propedit"
msgstr ""

#: ./build/en/book.xml:20592(refpurpose) 
msgid "Edit the property of one or more items under version control."
msgstr ""

#: ./build/en/book.xml:20597(programlisting) 
#, no-wrap
msgid "svn propedit PROPNAME PATH..."
msgstr ""

#: ./build/en/book.xml:20598(programlisting) 
#, no-wrap
msgid "svn propedit PROPNAME --revprop -r REV [URL]"
msgstr ""

#: ./build/en/book.xml:20603(para) 
msgid "Edit one or more properties using your favorite editor. The first form edits versioned properties in your working copy, while the second edits unversioned remote properties on a repository revision."
msgstr ""

#: ./build/en/book.xml:20611(para) 
msgid "pedit, pe"
msgstr ""

#: ./build/en/book.xml:20627(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--revprop\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--encoding ENC\n--editor-cmd EDITOR\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20643(para) 
msgid "<command moreinfo=\"none\">svn propedit</command> makes it easy to modify properties that have multiple values:"
msgstr ""

#: ./build/en/book.xml:20646(screen) 
#, no-wrap
msgid "\n$ svn propedit svn:keywords  foo.c \n    &lt;svn will launch your favorite editor here, with a buffer open\n    containing the current contents of the svn:keywords property.  You\n    can add multiple values to a property easily here by entering one\n    value per line.&gt;\nSet new value for property 'svn:keywords' on 'foo.c'\n"
msgstr ""

#: ./build/en/book.xml:20663(tertiary) ./build/en/book.xml:23611(tertiary) 
msgid "propget"
msgstr ""

#: ./build/en/book.xml:20667(refname) 
msgid "svn propget"
msgstr ""

#: ./build/en/book.xml:20668(refpurpose) 
msgid "Print the value of a property."
msgstr ""

#: ./build/en/book.xml:20672(programlisting) 
#, no-wrap
msgid "svn propget PROPNAME [TARGET[@REV]...]"
msgstr ""

#: ./build/en/book.xml:20673(programlisting) 
#, no-wrap
msgid "svn propget PROPNAME --revprop -r REV [URL]"
msgstr ""

#: ./build/en/book.xml:20678(para) 
msgid "Print the value of a property on files, directories, or revisions. The first form prints the versioned property of an item or items in your working copy, while the second prints unversioned remote property on a repository revision. See <xref linkend=\"svn.advanced.props\"/> for more information on properties."
msgstr ""

#: ./build/en/book.xml:20688(para) 
msgid "pget, pg"
msgstr ""

#: ./build/en/book.xml:20704(screen) 
#, no-wrap
msgid "\n--recursive (-R)\n--revision (-r) REV\n--revprop\n--strict\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20720(para) 
msgid "Examine a property of a file in your working copy:"
msgstr ""

#: ./build/en/book.xml:20723(screen) 
#, no-wrap
msgid "\n$ svn propget svn:keywords foo.c\nAuthor\nDate\nRev\n"
msgstr ""

#: ./build/en/book.xml:20730(para) 
msgid "The same goes for a revision property:"
msgstr ""

#: ./build/en/book.xml:20732(screen) 
#, no-wrap
msgid "\n$ svn propget svn:log --revprop -r 20 \nBegan journal.\n"
msgstr ""

#: ./build/en/book.xml:20745(tertiary) ./build/en/book.xml:23666(tertiary) 
msgid "proplist"
msgstr ""

#: ./build/en/book.xml:20749(refname) 
msgid "svn proplist"
msgstr ""

#: ./build/en/book.xml:20750(refpurpose) 
msgid "List all properties."
msgstr ""

#: ./build/en/book.xml:20754(programlisting) 
#, no-wrap
msgid "svn proplist [TARGET[@REV]...]"
msgstr ""

#: ./build/en/book.xml:20755(programlisting) 
#, no-wrap
msgid "svn proplist --revprop -r REV [URL]"
msgstr ""

#: ./build/en/book.xml:20760(para) 
msgid "List all properties on files, directories, or revisions. The first form lists versioned properties in your working copy, while the second lists unversioned remote properties on a repository revision."
msgstr ""

#: ./build/en/book.xml:20768(para) 
msgid "plist, pl"
msgstr ""

#: ./build/en/book.xml:20784(screen) 
#, no-wrap
msgid "\n--verbose (-v)\n--recursive (-R)\n--revision (-r) REV\n--quiet (-q)\n--revprop\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20801(para) 
msgid "You can use proplist to see the properties on an item in your working copy:"
msgstr ""

#: ./build/en/book.xml:20804(screen) 
#, no-wrap
msgid "\n$ svn proplist foo.c\nProperties on 'foo.c':\n  svn:mime-type\n  svn:keywords\n  owner\n"
msgstr ""

#: ./build/en/book.xml:20812(para) 
msgid "But with the <option>--verbose</option> flag, svn proplist is extremely handy as it also shows you the values for the properties:"
msgstr ""

#: ./build/en/book.xml:20816(screen) 
#, no-wrap
msgid "\n$ svn proplist --verbose foo.c\nProperties on 'foo.c':\n  svn:mime-type : text/plain\n  svn:keywords : Author Date Rev\n  owner : sally\n"
msgstr ""

#: ./build/en/book.xml:20832(tertiary) 
msgid "propset"
msgstr ""

#: ./build/en/book.xml:20836(refname) 
msgid "svn propset"
msgstr ""

#: ./build/en/book.xml:20837(refpurpose) 
msgid "Set PROPNAME to PROPVAL on files, directories, or revisions."
msgstr ""

#: ./build/en/book.xml:20841(programlisting) 
#, no-wrap
msgid "svn propset PROPNAME [PROPVAL | -F VALFILE] PATH..."
msgstr ""

#: ./build/en/book.xml:20842(programlisting) 
#, no-wrap
msgid "svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [URL]"
msgstr ""

#: ./build/en/book.xml:20848(para) 
msgid "Set <replaceable>PROPNAME</replaceable> to <replaceable>PROPVAL</replaceable> on files, directories, or revisions. The first example creates a versioned, local property change in the working copy, and the second creates an unversioned, remote property change on a repository revision."
msgstr ""

#: ./build/en/book.xml:20856(para) 
msgid "Subversion has a number of <quote>special</quote> properties that affect its behavior. See <xref linkend=\"svn.ref.properties\"/> for more on these properties."
msgstr ""

#: ./build/en/book.xml:20864(para) 
msgid "pset, ps"
msgstr ""

#: ./build/en/book.xml:20880(screen) 
#, no-wrap
msgid "\n--file (-F) FILE\n--quiet (-q)\n--revision (-r) REV\n--targets FILENAME\n--recursive (-R)\n--revprop\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--encoding ENC\n--force\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:20900(para) 
msgid "Set the mimetype on a file:"
msgstr ""

#: ./build/en/book.xml:20902(screen) 
#, no-wrap
msgid "\n$ svn propset svn:mime-type image/jpeg foo.jpg \nproperty 'svn:mime-type' set on 'foo.jpg'\n"
msgstr ""

#: ./build/en/book.xml:20907(para) 
msgid "On a UNIX system, if you want a file to have the executable permission set:"
msgstr ""

#: ./build/en/book.xml:20910(screen) 
#, no-wrap
msgid "\n$ svn propset svn:executable ON somescript\nproperty 'svn:executable' set on 'somescript'\n"
msgstr ""

#: ./build/en/book.xml:20915(para) 
msgid "Perhaps you have an internal policy to set certain properties for the benefit of your coworkers:"
msgstr ""

#: ./build/en/book.xml:20918(screen) 
#, no-wrap
msgid "\n$ svn propset owner sally foo.c\nproperty 'owner' set on 'foo.c'\n"
msgstr ""

#: ./build/en/book.xml:20923(para) 
msgid "If you made a mistake in a log message for a particular revision and want to change it, use <option>--revprop</option> and set <literal moreinfo=\"none\">svn:log</literal> to the new log message:"
msgstr ""

#: ./build/en/book.xml:20928(screen) 
#, no-wrap
msgid "\n$ svn propset --revprop -r 25 svn:log \"Journaled about trip to New York.\"\nproperty 'svn:log' set on repository revision '25'\n"
msgstr ""

#: ./build/en/book.xml:20933(para) 
msgid "Or, if you don't have a working copy, you can provide a URL."
msgstr ""

#: ./build/en/book.xml:20936(screen) 
#, no-wrap
msgid "\n$ svn propset --revprop -r 26 svn:log \"Document nap.\" http://svn.red-bean.com/repos\nproperty 'svn:log' set on repository revision '25'\n"
msgstr ""

#: ./build/en/book.xml:20941(para) 
msgid "Lastly, you can tell propset to take its input from a file. You could even use this to set the contents of a property to something binary:"
msgstr ""

#: ./build/en/book.xml:20945(screen) 
#, no-wrap
msgid "\n$ svn propset owner-pic -F sally.jpg moo.c \nproperty 'owner-pic' set on 'moo.c'\n"
msgstr ""

#: ./build/en/book.xml:20951(para) 
msgid "By default, you cannot modify revision properties in a Subversion repository. Your repository administrator must explicitly enable revision property modifications by creating a hook named <literal moreinfo=\"none\">pre-revprop-change</literal>. See <xref linkend=\"svn.reposadmin.create.hooks\"/> for more information on hook scripts."
msgstr ""

#: ./build/en/book.xml:20967(tertiary) 
msgid "resolved"
msgstr ""

#: ./build/en/book.xml:20972(quote) 
msgid "conflicted"
msgstr ""

#: ./build/en/book.xml:20972(refpurpose) 
msgid "Remove <placeholder-1/> state on working copy files or directories."
msgstr ""

#: ./build/en/book.xml:20977(programlisting) 
#, no-wrap
msgid "svn resolved PATH..."
msgstr ""

#: ./build/en/book.xml:20982(para) 
msgid "Remove <quote>conflicted</quote> state on working copy files or directories. This routine does not semantically resolve conflict markers; it merely removes conflict-related artifact files and allows <replaceable>PATH</replaceable> to be committed again; that is, it tells Subversion that the conflicts have been <quote>resolved</quote>. See <xref linkend=\"svn.tour.cycle.resolve\"/> for an in-depth look at resolving conflicts."
msgstr ""

#: ./build/en/book.xml:21009(screen) ./build/en/book.xml:21098(screen) 
#, no-wrap
msgid "\n--targets FILENAME\n--recursive (-R)\n--quiet (-q)\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:21020(para) 
msgid "If you get a conflict on an update, your working copy will sprout three new files:"
msgstr ""

#: ./build/en/book.xml:21023(screen) 
#, no-wrap
msgid "\n$ svn update\nC  foo.c\nUpdated to revision 31.\n$ ls\nfoo.c\nfoo.c.mine\nfoo.c.r30\nfoo.c.r31\n"
msgstr ""

#: ./build/en/book.xml:21034(para) 
msgid "Once you've resolved the conflict and <filename moreinfo=\"none\">foo.c</filename> is ready to be committed, run <command moreinfo=\"none\">svn resolved</command> to let your working copy know you've taken care of everything."
msgstr ""

#: ./build/en/book.xml:21040(para) 
msgid "You <emphasis>can</emphasis> just remove the conflict files and commit, but <command moreinfo=\"none\">svn resolved</command> fixes up some bookkeeping data in the working copy administrative area in addition to removing the conflict files, so we recommend that you use this command."
msgstr ""

#: ./build/en/book.xml:21056(tertiary) 
msgid "revert"
msgstr ""

#: ./build/en/book.xml:21061(refpurpose) 
msgid "Undo all local edits."
msgstr ""

#: ./build/en/book.xml:21065(programlisting) 
#, no-wrap
msgid "svn revert PATH..."
msgstr ""

#: ./build/en/book.xml:21070(para) 
msgid "Reverts any local changes to a file or directory and resolves any conflicted states. <command moreinfo=\"none\">svn revert</command> will not only revert the contents of an item in your working copy, but also any property changes. Finally, you can use it to undo any scheduling operations that you may have done (e.g. files scheduled for addition or deletion can be <quote>unscheduled</quote>)."
msgstr ""

#: ./build/en/book.xml:21109(para) 
msgid "Discard changes to a file:"
msgstr ""

#: ./build/en/book.xml:21111(screen) 
#, no-wrap
msgid "\n$ svn revert foo.c\nReverted foo.c\n"
msgstr ""

#: ./build/en/book.xml:21116(para) 
msgid "If you want to revert a whole directory of files, use the <option>--recursive</option> flag:"
msgstr ""

#: ./build/en/book.xml:21119(screen) 
#, no-wrap
msgid "\n$ svn revert --recursive .\nReverted newdir/afile\nReverted foo.c\nReverted bar.txt\n"
msgstr ""

#: ./build/en/book.xml:21126(para) 
msgid "Lastly, you can undo any scheduling operations:"
msgstr ""

#: ./build/en/book.xml:21129(screen) 
#, no-wrap
msgid "\n$ svn add mistake.txt whoops\nA         mistake.txt\nA         whoops\nA         whoops/oopsie.c\n\n$ svn revert mistake.txt whoops\nReverted mistake.txt\nReverted whoops\n\n$ svn status\n?      mistake.txt\n?      whoops\n"
msgstr ""

#: ./build/en/book.xml:21145(para) 
msgid "If you provide no targets to <command moreinfo=\"none\">svn revert</command>, it will do nothing—to protect you from accidentally losing changes in your working copy, <command moreinfo=\"none\">svn revert</command> requires you to provide at least one target."
msgstr ""

#: ./build/en/book.xml:21160(tertiary) 
msgid "status"
msgstr ""

#: ./build/en/book.xml:21165(refpurpose) 
msgid "Print the status of working copy files and directories."
msgstr ""

#: ./build/en/book.xml:21169(programlisting) 
#, no-wrap
msgid "svn status [PATH...]"
msgstr ""

#: ./build/en/book.xml:21174(para) 
msgid "Print the status of working copy files and directories. With no arguments, it prints only locally modified items (no repository access). With <option>--show-updates</option>, add working revision and server out-of-date information. With <option>--verbose</option>, print full revision information on every item."
msgstr ""

#: ./build/en/book.xml:21182(para) 
msgid "The first six columns in the output are each one character wide, and each column gives you information about different aspects of each working copy item."
msgstr ""

#: ./build/en/book.xml:21186(para) 
msgid "The first column indicates that an item was added, deleted, or otherwise changed."
msgstr ""

#: ./build/en/book.xml:21192(term) ./build/en/book.xml:21287(term) ./build/en/book.xml:21319(term) ./build/en/book.xml:21340(term) ./build/en/book.xml:21361(term) ./build/en/book.xml:21381(term) ./build/en/book.xml:21440(term) 
msgid "' '"
msgstr ""

#: ./build/en/book.xml:21194(para) ./build/en/book.xml:21289(para) 
msgid "No modifications."
msgstr ""

#: ./build/en/book.xml:21199(term) 
msgid "'A'"
msgstr ""

#: ./build/en/book.xml:21201(para) 
msgid "Item is scheduled for Addition."
msgstr ""

#: ./build/en/book.xml:21206(term) 
msgid "'D'"
msgstr ""

#: ./build/en/book.xml:21208(para) 
msgid "Item is scheduled for Deletion."
msgstr ""

#: ./build/en/book.xml:21213(term) ./build/en/book.xml:21294(term) 
msgid "'M'"
msgstr ""

#: ./build/en/book.xml:21215(para) 
msgid "Item has been modified."
msgstr ""

#: ./build/en/book.xml:21220(term) 
msgid "'R'"
msgstr ""

#: ./build/en/book.xml:21222(para) 
msgid "Item has been replaced in your working copy. This means the file was scheduled for deletion, and then a new file with the same name was scheduled for addition in its place."
msgstr ""

#: ./build/en/book.xml:21230(term) ./build/en/book.xml:21302(term) 
msgid "'C'"
msgstr ""

#: ./build/en/book.xml:21232(para) 
msgid "The contents (as opposed to the properties) of the item conflict with updates received from the repository."
msgstr ""

#: ./build/en/book.xml:21239(term) 
msgid "'X'"
msgstr ""

#: ./build/en/book.xml:21241(para) 
msgid "Item is related to an externals definition."
msgstr ""

#: ./build/en/book.xml:21246(term) 
msgid "'I'"
msgstr ""

#: ./build/en/book.xml:21248(para) 
msgid "Item is being ignored (e.g. with the <literal moreinfo=\"none\">svn:ignore</literal> property)."
msgstr ""

#: ./build/en/book.xml:21254(term) 
msgid "'?'"
msgstr ""

#: ./build/en/book.xml:21256(para) 
msgid "Item is not under version control."
msgstr ""

#: ./build/en/book.xml:21261(term) 
msgid "'!'"
msgstr ""

#: ./build/en/book.xml:21263(para) 
msgid "Item is missing (e.g. you moved or deleted it without using <command moreinfo=\"none\">svn</command>). This also indicates that a directory is incomplete (a checkout or update was interrupted)."
msgstr ""

#: ./build/en/book.xml:21271(term) 
msgid "'~'"
msgstr ""

#: ./build/en/book.xml:21273(para) 
msgid "Item is versioned as one kind of object (file, directory, link), but has been replaced by different kind of object."
msgstr ""

#: ./build/en/book.xml:21281(para) 
msgid "The second column tells the status of a file's or directory's properties."
msgstr ""

#: ./build/en/book.xml:21296(para) 
msgid "Properties for this item have been modified."
msgstr ""

#: ./build/en/book.xml:21304(para) 
msgid "Properties for this item are in conflict with property updates received from the repository."
msgstr ""

#: ./build/en/book.xml:21312(para) 
msgid "The third column is populated only if the working copy directory is locked. (See <xref linkend=\"svn.tour.cleanup\"/>.)"
msgstr ""

#: ./build/en/book.xml:21321(para) 
msgid "Item is not locked."
msgstr ""

#: ./build/en/book.xml:21326(term) 
msgid "'L'"
msgstr ""

#: ./build/en/book.xml:21328(para) 
msgid "Item is locked."
msgstr ""

#: ./build/en/book.xml:21334(para) 
msgid "The fourth column is populated only if the item is scheduled for addition-with-history."
msgstr ""

#: ./build/en/book.xml:21342(para) 
msgid "No history scheduled with commit."
msgstr ""

#: ./build/en/book.xml:21347(term) 
msgid "'+'"
msgstr ""

#: ./build/en/book.xml:21349(para) 
msgid "History scheduled with commit."
msgstr ""

#: ./build/en/book.xml:21355(para) 
msgid "The fifth column is populated only if the item is switched relative to its parent (see <xref linkend=\"svn.branchmerge.switchwc\"/>)."
msgstr ""

#: ./build/en/book.xml:21363(para) 
msgid "Item is a child of its parent directory."
msgstr ""

#: ./build/en/book.xml:21368(term) 
msgid "'S'"
msgstr ""

#: ./build/en/book.xml:21370(para) 
msgid "Item is switched."
msgstr ""

#: ./build/en/book.xml:21376(para) 
msgid "The sixth column is populated with lock information."
msgstr ""

#: ./build/en/book.xml:21383(para) 
msgid "When <option>--show-updates</option> is used, the file is not locked. If <option>--show-updates</option> is <emphasis>not</emphasis> used, this merely means that the file is not locked in this working copy."
msgstr ""

#: ./build/en/book.xml:21392(term) 
msgid "K"
msgstr ""

#: ./build/en/book.xml:21394(para) 
msgid "File is locked in this working copy."
msgstr ""

#: ./build/en/book.xml:21399(term) 
msgid "O"
msgstr ""

#: ./build/en/book.xml:21401(para) 
msgid "File is locked either by another user or in another working copy. This only appears when <option>--show-updates</option> is used."
msgstr ""

#: ./build/en/book.xml:21408(term) 
msgid "T"
msgstr ""

#: ./build/en/book.xml:21410(para) 
msgid "File was locked in this working copy, but the lock has been <quote>stolen</quote>and is invalid. The file is currently locked in the repository. This only appears when <option>--show-updates</option> is used."
msgstr ""

#: ./build/en/book.xml:21419(term) 
msgid "B"
msgstr ""

#: ./build/en/book.xml:21421(para) 
msgid "File was locked in this working copy, but the lock has been <quote>broken</quote>and is invalid. The file is no longer locked This only appears when <option>--show-updates</option> is used."
msgstr ""

#: ./build/en/book.xml:21433(para) 
msgid "The out-of-date information appears in the seventh column (only if you pass the <option>--show-updates</option> switch)."
msgstr ""

#: ./build/en/book.xml:21442(para) 
msgid "The item in your working copy is up-to-date."
msgstr ""

#: ./build/en/book.xml:21447(term) 
msgid "'*'"
msgstr ""

#: ./build/en/book.xml:21449(para) 
msgid "A newer revision of the item exists on the server."
msgstr ""

#: ./build/en/book.xml:21456(para) 
msgid "The remaining fields are variable width and delimited by spaces. The working revision is the next field if the <option>--show-updates</option> or <option>--verbose</option> switches are passed."
msgstr ""

#: ./build/en/book.xml:21461(para) 
msgid "If the <option>--verbose</option> switch is passed, the last committed revision and last committed author are displayed next."
msgstr ""

#: ./build/en/book.xml:21465(para) 
msgid "The working copy path is always the final field, so it can include spaces."
msgstr ""

#: ./build/en/book.xml:21472(para) 
msgid "stat, st"
msgstr ""

#: ./build/en/book.xml:21482(para) 
msgid "Only if using <option>--show-updates</option>"
msgstr ""

#: ./build/en/book.xml:21488(screen) 
#, no-wrap
msgid "\n--show-updates (-u)\n--verbose (-v)\n--non-recursive (-N)\n--quiet (-q)\n--no-ignore\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n--ignore-externals\n"
msgstr ""

#: ./build/en/book.xml:21506(para) 
msgid "This is the easiest way to find out what changes you have made to your working copy:"
msgstr ""

#: ./build/en/book.xml:21509(screen) 
#, no-wrap
msgid "\n$ svn status wc\n M     wc/bar.c\nA  +   wc/qax.c\n"
msgstr ""

#: ./build/en/book.xml:21515(para) 
msgid "If you want to find out what files in your working copy are out-of-date, pass the <option>--show-updates</option> switch (this will <emphasis>not</emphasis> make any changes to your working copy). Here you can see that <filename moreinfo=\"none\">wc/foo.c</filename> has changed in the repository since we last updated our working copy:"
msgstr ""

#: ./build/en/book.xml:21524(screen) 
#, no-wrap
msgid "\n$ svn status --show-updates wc\n M           965    wc/bar.c\n       *     965    wc/foo.c\nA  +         965    wc/qax.c\nStatus against revision:    981\n"
msgstr ""

#: ./build/en/book.xml:21533(para) 
msgid "<option>--show-updates</option><emphasis>only</emphasis> places an asterisk next to items that are out of date (that is, items that will be updated from the repository if you run <command moreinfo=\"none\">svn update</command>). <option>--show-updates</option> does <emphasis>not</emphasis> cause the status listing to reflect the repository's version of the item."
msgstr ""

#: ./build/en/book.xml:21542(para) 
msgid "And finally, the most information you can get out of the status subcommand:"
msgstr ""

#: ./build/en/book.xml:21545(screen) 
#, no-wrap
msgid "\n$ svn status --show-updates --verbose wc\n M           965       938 sally        wc/bar.c\n       *     965       922 harry        wc/foo.c\nA  +         965       687 harry        wc/qax.c\n             965       687 harry        wc/zig.c\nHead revision:   981\n"
msgstr ""

#: ./build/en/book.xml:21554(para) 
msgid "For many more examples of <command moreinfo=\"none\">svn status</command>, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr ""

#: ./build/en/book.xml:21565(tertiary) 
msgid "switch"
msgstr ""

#: ./build/en/book.xml:21569(refname) 
msgid "svn switch"
msgstr ""

#: ./build/en/book.xml:21570(refpurpose) 
msgid "Update working copy to a different URL."
msgstr ""

#: ./build/en/book.xml:21574(programlisting) 
#, no-wrap
msgid "svn switch URL [PATH]"
msgstr ""

#: ./build/en/book.xml:21576(programlisting) 
#, no-wrap
msgid "switch --relocate FROM TO [PATH...]"
msgstr ""

#: ./build/en/book.xml:21583(para) 
msgid "This subcommand updates your working copy to mirror a new URL—usually a URL which shares a common ancestor with your working copy, although not necessarily. This is the Subversion way to move a working copy to a new branch. See <xref linkend=\"svn.branchmerge.switchwc\"/> for an in-depth look at switching."
msgstr ""

#: ./build/en/book.xml:21593(para) 
msgid "sw"
msgstr ""

#: ./build/en/book.xml:21609(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--non-recursive (-N)\n--quiet (-q)\n--diff3-cmd CMD\n--relocate FROM TO\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n"
msgstr ""

#: ./build/en/book.xml:21626(para) 
msgid "If you're currently inside the directory <filename moreinfo=\"none\">vendors</filename> which was branched to <filename moreinfo=\"none\">vendors-with-fix</filename> and you'd like to switch your working copy to that branch:"
msgstr ""

#: ./build/en/book.xml:21631(screen) 
#, no-wrap
msgid "\n$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .\nU  myproj/foo.txt\nU  myproj/bar.txt\nU  myproj/baz.c\nU  myproj/qux.c\nUpdated to revision 31.\n"
msgstr ""

#: ./build/en/book.xml:21640(para) 
msgid "And to switch back, just provide the URL to the location in the repository from which you originally checked out your working copy:"
msgstr ""

#: ./build/en/book.xml:21644(screen) 
#, no-wrap
msgid "\n$ svn switch http://svn.red-bean.com/repos/trunk/vendors .\nU  myproj/foo.txt\nU  myproj/bar.txt\nU  myproj/baz.c\nU  myproj/qux.c\nUpdated to revision 31.\n"
msgstr ""

#: ./build/en/book.xml:21654(para) 
msgid "You can just switch part of your working copy to a branch if you don't want to switch your entire working copy."
msgstr ""

#: ./build/en/book.xml:21659(para) 
msgid "Sometimes an administrator might change the <quote>base location</quote> of your repository—in other words, the contents of the repository doesn't change, but the main URL used to reach the root of the repository does. For example, the hostname may change, the URL scheme, or any part of the URL which leads to the repository itself. Rather than checkout a new working copy, you can have the <command moreinfo=\"none\">svn switch</command> command <quote>rewrite</quote> the beginnings of all the URLs in your working copy. Use the <option>--relocate</option> option to do the substitution. No file contents are changed, nor is the repository contacted. It's similar to running a Perl script over your working copy <filename moreinfo=\"none\">.svn/</filename> directories which runs <command moreinfo=\"none\">s/OldRoot/NewRoot/</command>."
msgstr ""

#: ./build/en/book.xml:21675(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///tmp/repos test\nA  test/a\nA  test/b\n…\n\n$ mv repos newlocation\n$ cd test/\n\n$ svn update\nsvn: Unable to open an ra_local session to URL\nsvn: Unable to open repository 'file:///tmp/repos'\n\n$ svn switch --relocate file:///tmp/repos file:///tmp/newlocation .\n$ svn update\nAt revision 3.\n"
msgstr ""

#: ./build/en/book.xml:21694(para) 
msgid "Be careful when using the <option>--relocate</option> option. If you mistype the argument, you might end up creating nonsensical URLs within your working copy that render the whole workspace unusable and tricky to fix. It's also important to understand exactly when one should or shouldn't use <option>--relocate</option>. Here's the rule of thumb:"
msgstr ""

#: ./build/en/book.xml:21704(para) 
msgid "If the working copy needs to reflect a new directory <emphasis>within</emphasis> the repository, then use just <command moreinfo=\"none\">svn switch</command>."
msgstr ""

#: ./build/en/book.xml:21709(para) 
msgid "If the working copy still reflects the same repository directory, but the location of the repository itself has changed, then use <command moreinfo=\"none\">svn switch --relocate</command>."
msgstr ""

#: ./build/en/book.xml:21725(tertiary) 
msgid "unlock"
msgstr ""

#: ./build/en/book.xml:21729(refname) 
msgid "svn unlock"
msgstr ""

#: ./build/en/book.xml:21730(refpurpose) 
msgid "Unlock working copy paths or URLs."
msgstr ""

#: ./build/en/book.xml:21734(programlisting) 
#, no-wrap
msgid "svn unlock TARGET..."
msgstr ""

#: ./build/en/book.xml:21739(para) 
msgid "Unlock each <replaceable>TARGET</replaceable>. If any <replaceable>TARGET</replaceable> is either locked by another user or no valid lock token exists in the working copy, print a warning and continue unlocking the rest of the <replaceable>TARGET</replaceable>s. Use <option>--force</option> to break a lock belonging to another user or working copy."
msgstr ""

#: ./build/en/book.xml:21767(screen) 
#, no-wrap
msgid "\n--targets FILENAME\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n--force\n"
msgstr ""

#: ./build/en/book.xml:21781(para) 
msgid "Unlock two files in your working copy:"
msgstr ""

#: ./build/en/book.xml:21783(screen) 
#, no-wrap
msgid "\n\n$ svn unlock tree.jpg house.jpg\n'tree.jpg' unlocked.\n'house.jpg' unlocked.\n"
msgstr ""

#: ./build/en/book.xml:21790(para) 
msgid "Unlock a file in your working copy that is currently locked by another user:"
msgstr ""

#: ./build/en/book.xml:21793(screen) 
#, no-wrap
msgid "\n$ svn unlock tree.jpg\nsvn: 'tree.jpg' is not locked in this working copy\n$ svn unlock --force tree.jpg\n'tree.jpg' unlocked.\n"
msgstr ""

#: ./build/en/book.xml:21800(para) 
msgid "Unlock a file without a working copy:"
msgstr ""

#: ./build/en/book.xml:21802(screen) 
#, no-wrap
msgid "\n$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg\n'tree.jpg unlocked.\n"
msgstr ""

#: ./build/en/book.xml:21818(tertiary) 
msgid "update"
msgstr ""

#: ./build/en/book.xml:21823(refpurpose) 
msgid "Update your working copy."
msgstr ""

#: ./build/en/book.xml:21827(programlisting) 
#, no-wrap
msgid "svn update [PATH...]"
msgstr ""

#: ./build/en/book.xml:21832(para) 
msgid "<command moreinfo=\"none\">svn update</command> brings changes from the repository into your working copy. If no revision given, it brings your working copy up-to-date with the <literal moreinfo=\"none\">HEAD</literal> revision. Otherwise, it synchronizes the working copy to the revision given by the <option>--revision</option> switch. As part of the synchronization, <command moreinfo=\"none\">svn update</command> also removes any stale locks (see <xref linkend=\"svn.tour.cleanup\"/>) found in the working copy."
msgstr ""

#: ./build/en/book.xml:21842(para) 
msgid "For each updated item a line will start with a character reporting the action taken. These characters have the following meaning:"
msgstr ""

#: ./build/en/book.xml:21849(term) 
msgid "A"
msgstr ""

#: ./build/en/book.xml:21851(para) 
msgid "Added"
msgstr ""

#: ./build/en/book.xml:21856(term) 
msgid "D"
msgstr ""

#: ./build/en/book.xml:21858(para) 
msgid "Deleted"
msgstr ""

#: ./build/en/book.xml:21863(term) 
msgid "U"
msgstr ""

#: ./build/en/book.xml:21865(para) 
msgid "Updated"
msgstr ""

#: ./build/en/book.xml:21870(term) 
msgid "C"
msgstr ""

#: ./build/en/book.xml:21872(para) 
msgid "Conflict"
msgstr ""

#: ./build/en/book.xml:21877(term) 
msgid "G"
msgstr ""

#: ./build/en/book.xml:21879(para) 
msgid "Merged"
msgstr ""

#: ./build/en/book.xml:21885(para) 
msgid "A character in the first column signifies an update to the actual file, while updates to the file's properties are shown in the second column."
msgstr ""

#: ./build/en/book.xml:21892(para) 
msgid "up"
msgstr ""

#: ./build/en/book.xml:21908(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--non-recursive (-N)\n--quiet (-q)\n--diff3-cmd CMD\n--username USER\n--password PASS\n--no-auth-cache\n--non-interactive\n--config-dir DIR\n--ignore-externals\n"
msgstr ""

#: ./build/en/book.xml:21925(para) 
msgid "Pick up repository changes that have happened since your last update:"
msgstr ""

#: ./build/en/book.xml:21928(screen) 
#, no-wrap
msgid "\n$ svn update\nA  newdir/toggle.c\nA  newdir/disclose.c\nA  newdir/launch.c\nD  newdir/README\nUpdated to revision 32.\n"
msgstr ""

#: ./build/en/book.xml:21937(para) 
msgid "You can also update your working copy to an older revision (Subversion doesn't have the concept of <quote>sticky</quote> files like CVS does; see <xref linkend=\"svn.forcvs\"/>):"
msgstr ""

#: ./build/en/book.xml:21941(screen) 
#, no-wrap
msgid "\n$ svn update -r30\nA  newdir/README\nD  newdir/toggle.c\nD  newdir/disclose.c\nD  newdir/launch.c\nU  foo.c\nUpdated to revision 30.\n"
msgstr ""

#: ./build/en/book.xml:21952(para) 
msgid "If you want to examine an older revision of a single file, you may want to use <command moreinfo=\"none\">svn cat</command>."
msgstr ""

#: ./build/en/book.xml:21969(para) 
msgid "<command moreinfo=\"none\">svnadmin</command> is the administrative tool for monitoring and repairing your Subversion repository. For detailed information, see <xref linkend=\"svn.reposadmin.maint.tk.svnadmin\"/>."
msgstr ""

#: ./build/en/book.xml:21973(para) 
msgid "Since <command moreinfo=\"none\">svnadmin</command> works via direct repository access (and thus can only be used on the machine that holds the repository), it refers to the repository with a path, not a URL."
msgstr ""

#: ./build/en/book.xml:21979(title) 
msgid "<command moreinfo=\"none\">svnadmin</command> Switches"
msgstr ""

#: ./build/en/book.xml:21984(option) 
msgid "--bdb-log-keep"
msgstr ""

#: ./build/en/book.xml:21986(para) 
msgid "(Berkeley DB specific) Disable automatic log removal of database log files."
msgstr ""

#: ./build/en/book.xml:21992(option) 
msgid "--bdb-txn-nosync"
msgstr ""

#: ./build/en/book.xml:21994(para) 
msgid "(Berkeley DB specific) Disables fsync when committing database transactions."
msgstr ""

#: ./build/en/book.xml:22000(option) 
msgid "--bypass-hooks"
msgstr ""

#: ./build/en/book.xml:22002(para) 
msgid "Bypass the repository hook system."
msgstr ""

#: ./build/en/book.xml:22007(option) 
msgid "--clean-logs"
msgstr ""

#: ./build/en/book.xml:22009(para) 
msgid "Removes unused Berkeley DB logs."
msgstr ""

#: ./build/en/book.xml:22016(option) 
msgid "--force-uuid"
msgstr ""

#: ./build/en/book.xml:22018(para) 
msgid "By default, when loading data into repository that already contains revisions, <command moreinfo=\"none\">svnadmin</command> will ignore the <literal moreinfo=\"none\">UUID</literal> from the dump stream. This switch will cause the repository's <literal moreinfo=\"none\">UUID</literal> to be set to the <literal moreinfo=\"none\">UUID</literal> from the stream."
msgstr ""

#: ./build/en/book.xml:22028(option) 
msgid "--ignore-uuid"
msgstr ""

#: ./build/en/book.xml:22030(para) 
msgid "By default, when loading an empty repository, <command moreinfo=\"none\">svnadmin</command> will use the <literal moreinfo=\"none\">UUID</literal> from the dump stream. This switch will cause that UUID to be ignored."
msgstr ""

#: ./build/en/book.xml:22040(para) 
msgid "Dump a revision only as a diff against the previous revision, instead of the usual fulltext."
msgstr ""

#: ./build/en/book.xml:22047(option) 
msgid "--parent-dir <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:22050(para) 
msgid "When loading a dump file, root paths at <replaceable>DIR</replaceable> instead of <filename moreinfo=\"none\">/</filename>."
msgstr ""

#: ./build/en/book.xml:22057(term) 
msgid "<option>--revision</option> (<option>-r</option>) <replaceable>ARG</replaceable>"
msgstr ""

#: ./build/en/book.xml:22060(para) 
msgid "Specify a particular revision to operate on."
msgstr ""

#: ./build/en/book.xml:22066(option) 
msgid "--quiet"
msgstr ""

#: ./build/en/book.xml:22068(para) 
msgid "Do not show normal progress—show only errors."
msgstr ""

#: ./build/en/book.xml:22074(option) 
msgid "--use-post-commit-hook"
msgstr ""

#: ./build/en/book.xml:22076(para) 
msgid "When loading a dump file, run the repository's post-commit hook after finalizing each newly loaded revision."
msgstr ""

#: ./build/en/book.xml:22083(option) 
msgid "--use-pre-commit-hook"
msgstr ""

#: ./build/en/book.xml:22085(para) 
msgid "When loading a dump file, run the repository's pre-commit hook before finalizing each newly loaded revision. If the hook fails, abort the commit and terminate the load process."
msgstr ""

#: ./build/en/book.xml:22097(title) 
msgid "<command moreinfo=\"none\">svnadmin</command> Subcommands"
msgstr ""

#: ./build/en/book.xml:22104(tertiary) 
msgid "create"
msgstr ""

#: ./build/en/book.xml:22108(refname) 
msgid "svnadmin create"
msgstr ""

#: ./build/en/book.xml:22109(refpurpose) 
msgid "Create a new, empty repository."
msgstr ""

#: ./build/en/book.xml:22113(programlisting) 
#, no-wrap
msgid "svnadmin create REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22120(para) 
msgid "Remember, <command moreinfo=\"none\">svnadmin</command> works only with local <emphasis>paths</emphasis>, not <emphasis>URLs</emphasis>."
msgstr ""

#: ./build/en/book.xml:22118(para) 
msgid "Create a new, empty repository at the path provided. If the provided directory does not exist, it will be created for you.<placeholder-1/> As of Subversion 1.2, <command moreinfo=\"none\">svnadmin</command> creates new repositories with the <literal moreinfo=\"none\">fsfs</literal> filesystem backend by default."
msgstr ""

#: ./build/en/book.xml:22132(screen) 
#, no-wrap
msgid "\n--bdb-txn-nosync\n--bdb-log-keep\n--config-dir DIR\n--fs-type TYPE\n"
msgstr ""

#: ./build/en/book.xml:22143(para) 
msgid "Creating a new repository is just this easy:"
msgstr ""

#: ./build/en/book.xml:22145(screen) 
#, no-wrap
msgid "\n$ svnadmin create /usr/local/svn/repos\n"
msgstr ""

#: ./build/en/book.xml:22149(para) 
msgid "In Subversion 1.0, a Berkeley DB repository is always created. In Subversion 1.1, a Berkeley DB repository is the default repository type, but an FSFS repository can be created using the <option>--fs-type</option> option:"
msgstr ""

#: ./build/en/book.xml:22155(screen) 
#, no-wrap
msgid "\n$ svnadmin create /usr/local/svn/repos --fs-type fsfs\n"
msgstr ""

#: ./build/en/book.xml:22167(tertiary) 
msgid "deltify"
msgstr ""

#: ./build/en/book.xml:22171(refname) 
msgid "svnadmin deltify"
msgstr ""

#: ./build/en/book.xml:22172(refpurpose) 
msgid "Deltify changed paths in a revision range."
msgstr ""

#: ./build/en/book.xml:22176(programlisting) 
#, no-wrap
msgid "svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22181(para) 
msgid "<command moreinfo=\"none\">svnadmin deltify</command> only exists in current versions of Subversion due to historical reasons. This command is deprecated and no longer needed."
msgstr ""

#: ./build/en/book.xml:22185(para) 
msgid "It dates from a time when Subversion offered administrators greater control over compression strategies in the repository. This turned out to be a lot of complexity for <emphasis>very</emphasis> little gain, and this <quote>feature</quote> was deprecated."
msgstr ""

#: ./build/en/book.xml:22195(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--quiet (-q)\n"
msgstr ""

#: ./build/en/book.xml:22207(tertiary) 
msgid "dump"
msgstr ""

#: ./build/en/book.xml:22211(refname) 
msgid "svnadmin dump"
msgstr ""

#: ./build/en/book.xml:22212(refpurpose) 
msgid "Dump the contents of filesystem to stdout."
msgstr ""

#: ./build/en/book.xml:22216(programlisting) 
#, no-wrap
msgid "svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]"
msgstr ""

#: ./build/en/book.xml:22221(para) 
msgid "Dump the contents of filesystem to stdout in a <quote>dumpfile</quote> portable format, sending feedback to stderr. Dump revisions <replaceable>LOWER</replaceable> rev through <replaceable>UPPER</replaceable> rev. If no revisions are given, dump all revision trees. If only <replaceable>LOWER</replaceable> is given, dump that one revision tree. See <xref linkend=\"svn.reposadmin.maint.migrate\"/> for a practical use."
msgstr ""

#: ./build/en/book.xml:22231(para) 
msgid "By default, the Subversion dumpfile stream contains a single revision (the first revision in the requested revision range) in which every file and directory in the repository in that revision is presented as if that whole tree was added at once, followed by other revisions (the remainder of the revisions in the requested range) which contain only the files and directories which were modified in those revisions. For a modified file, the complete fulltext representation of its contents, as well as all of its properties, are presented in the dumpfile; for a directory, all of its properties are presented."
msgstr ""

#: ./build/en/book.xml:22243(para) 
msgid "There are a pair of useful options which modify the dumpfile generator's behavior. The first is the <option>--incremental</option> option, which simply causes that first revision in the dumpfile stream to contain only the files and directories modified in that revision, instead of being presented as the addition of a new tree, and in exactly the same way that every other revision in the dumpfile is presented. This is useful for generating a dumpfile that is to be loaded into another repository which already has the files and directories that exist in the original repository."
msgstr ""

#: ./build/en/book.xml:22255(para) 
msgid "The second useful option is <option>--deltas</option>. This switch causes <command moreinfo=\"none\">svnadmin dump</command> to, instead of emitting fulltext representations of file contents and property lists, emit only deltas of those items against their previous versions. This reduces (in some cases, drastically) the size of the dumpfile that <command moreinfo=\"none\">svnadmin dump</command> creates. There are, however, disadvantages to using this option—deltified dumpfiles are more CPU intensive to create, cannot be operated on by <command moreinfo=\"none\">svndumpfilter</command>, and tend not to compress as well as their non-deltified counterparts when using third-party tools like <command moreinfo=\"none\">gzip</command> and <command moreinfo=\"none\">bzip2</command>."
msgstr ""

#: ./build/en/book.xml:22273(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--incremental\n--quiet (-q)\n--deltas\n"
msgstr ""

#: ./build/en/book.xml:22284(para) 
msgid "Dump your whole repository:"
msgstr ""

#: ./build/en/book.xml:22286(screen) 
#, no-wrap
msgid "\n$ svnadmin dump /usr/local/svn/repos\nSVN-fs-dump-format-version: 1\nRevision-number: 0\n* Dumped revision 0.\nProp-content-length: 56\nContent-length: 56\n…\n"
msgstr ""

#: ./build/en/book.xml:22296(para) 
msgid "Incrementally dump a single transaction from your repository:"
msgstr ""

#: ./build/en/book.xml:22299(screen) 
#, no-wrap
msgid "\n$ svnadmin dump /usr/local/svn/repos -r 21 --incremental \n* Dumped revision 21.\nSVN-fs-dump-format-version: 1\nRevision-number: 21\nProp-content-length: 101\nContent-length: 101\n…\n"
msgstr ""

#: ./build/en/book.xml:22321(refname) 
msgid "svnadmin help"
msgstr ""

#: ./build/en/book.xml:22325(programlisting) 
#, no-wrap
msgid "svnadmin help [SUBCOMMAND...]"
msgstr ""

#: ./build/en/book.xml:22331(para) 
msgid "This subcommand is useful when you're trapped on a desert island with neither a net connection nor a copy of this book."
msgstr ""

#: ./build/en/book.xml:22349(tertiary) 
msgid "hotcopy"
msgstr ""

#: ./build/en/book.xml:22353(refname) 
msgid "svnadmin hotcopy"
msgstr ""

#: ./build/en/book.xml:22354(refpurpose) 
msgid "Make a hot copy of a repository."
msgstr ""

#: ./build/en/book.xml:22358(programlisting) 
#, no-wrap
msgid "svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22364(para) 
msgid "This subcommand makes a full <quote>hot</quote> backup of your repository, including all hooks, configuration files, and, of course, database files. If you pass the <option>--clean-logs</option> switch, <command moreinfo=\"none\">svnadmin</command> will perform a hotcopy of your repository, and then remove unused Berkeley DB logs from the original repository. You can run this command at any time and make a safe copy of the repository, regardless of whether other processes are using the repository."
msgstr ""

#: ./build/en/book.xml:22379(screen) 
#, no-wrap
msgid "\n--clean-logs\n"
msgstr ""

#: ./build/en/book.xml:22391(tertiary) 
msgid "list-dblogs"
msgstr ""

#: ./build/en/book.xml:22395(refname) 
msgid "svnadmin list-dblogs"
msgstr ""

#: ./build/en/book.xml:22398(literal) ./build/en/book.xml:22430(literal) ./build/en/book.xml:22633(literal) 
msgid "bdb"
msgstr ""

#: ./build/en/book.xml:22395(refpurpose) 
msgid "Ask Berkeley DB which log files exist for a given Subversion repository (applies only to repositories using the <placeholder-1/> backend)."
msgstr ""

#: ./build/en/book.xml:22402(programlisting) 
#, no-wrap
msgid "svnadmin list-dblogs REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22407(para) ./build/en/book.xml:22439(para) 
msgid "Berkeley DB creates logs of all changes to the repository, which allow it to recover in the face of catastrophe. Unless you enable <literal moreinfo=\"none\">DB_LOG_AUTOREMOVE</literal>, the log files accumulate, although most are no longer used and can be deleted to reclaim disk space. See <xref linkend=\"svn.reposadmin.maint.diskspace\"/> for more information."
msgstr ""

#: ./build/en/book.xml:22423(tertiary) 
msgid "list-unused-dblogs"
msgstr ""

#: ./build/en/book.xml:22427(refname) 
msgid "svnadmin list-unused-dblogs"
msgstr ""

#: ./build/en/book.xml:22428(refpurpose) 
msgid "Ask Berkeley DB which log files can be safely deleted (applies only to repositories using the <placeholder-1/> backend)."
msgstr ""

#: ./build/en/book.xml:22434(programlisting) 
#, no-wrap
msgid "svnadmin list-unused-dblogs REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22451(para) 
msgid "Remove all unused log files from a repository:"
msgstr ""

#: ./build/en/book.xml:22471(tertiary) 
msgid "load"
msgstr ""

#: ./build/en/book.xml:22475(refname) 
msgid "svnadmin load"
msgstr ""

#: ./build/en/book.xml:22476(quote) 
msgid "dumpfile"
msgstr ""

#: ./build/en/book.xml:22475(refpurpose) 
msgid "Read a <placeholder-1/>-formatted stream from stdin."
msgstr ""

#: ./build/en/book.xml:22481(programlisting) 
#, no-wrap
msgid "svnadmin load REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22486(para) 
msgid "Read a <quote>dumpfile</quote>-formatted stream from stdin, committing new revisions into the repository's filesystem. Send progress feedback to stdout."
msgstr ""

#: ./build/en/book.xml:22494(screen) 
#, no-wrap
msgid "\n--quiet (-q)\n--ignore-uuid\n--force-uuid\n--use-pre-commit-hook\n--use-post-commit-hook\n--parent-dir\n"
msgstr ""

#: ./build/en/book.xml:22505(title) ./build/en/book.xml:22561(title) ./build/en/book.xml:22732(title) 
msgid "Example"
msgstr ""

#: ./build/en/book.xml:22507(para) 
msgid "This shows the beginning of loading a repository from a backup file (made, of course, with <command moreinfo=\"none\">svnadmin dump</command>):"
msgstr ""

#: ./build/en/book.xml:22511(screen) 
#, no-wrap
msgid "\n$ svnadmin load /usr/local/svn/restored &lt; repos-backup\n&lt;&lt;&lt; Started new txn, based on original revision 1\n     * adding path : test ... done.\n     * adding path : test/a ... done.\n…\n"
msgstr ""

#: ./build/en/book.xml:22519(para) 
msgid "Or if you want to load into a subdirectory:"
msgstr ""

#: ./build/en/book.xml:22521(screen) 
#, no-wrap
msgid "\n$ svnadmin load --parent-dir new/subdir/for/project /usr/local/svn/restored &lt; repos-backup\n&lt;&lt;&lt; Started new txn, based on original revision 1\n     * adding path : test ... done.\n     * adding path : test/a ... done.\n…\n"
msgstr ""

#: ./build/en/book.xml:22537(tertiary) 
msgid "lslocks"
msgstr ""

#: ./build/en/book.xml:22541(refname) 
msgid "svnadmin lslocks"
msgstr ""

#: ./build/en/book.xml:22542(refpurpose) 
msgid "Print descriptions of all locks."
msgstr ""

#: ./build/en/book.xml:22546(programlisting) 
#, no-wrap
msgid "svnadmin lslocks REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22551(para) 
msgid "Print descriptions of all locks in a repository."
msgstr ""

#: ./build/en/book.xml:22564(para) 
msgid "This lists the one locked file in the repository at <filename moreinfo=\"none\">/svn/repos</filename>"
msgstr ""

#: ./build/en/book.xml:22567(screen) 
#, no-wrap
msgid "\n$ svnadmin lslocks /svn/repos\nPath: /tree.jpg\nUUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\nOwner: harry\nCreated: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\nExpires: \nComment (1 line):\nRework the uppermost branches on the bald cypress in the foreground.\n"
msgstr ""

#: ./build/en/book.xml:22585(tertiary) 
msgid "lstxns"
msgstr ""

#: ./build/en/book.xml:22589(refname) 
msgid "svnadmin lstxns"
msgstr ""

#: ./build/en/book.xml:22590(refpurpose) 
msgid "Print the names of all uncommitted transactions."
msgstr ""

#: ./build/en/book.xml:22594(programlisting) 
#, no-wrap
msgid "svnadmin lstxns REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22599(para) 
msgid "Print the names of all uncommitted transactions. See <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns\"/> for information on how uncommitted transactions are created and what you should do with them."
msgstr ""

#: ./build/en/book.xml:22608(para) 
msgid "List all outstanding transactions in a repository."
msgstr ""

#: ./build/en/book.xml:22611(screen) 
#, no-wrap
msgid "\n$ svnadmin lstxns /usr/local/svn/repos/ \n1w\n1x\n"
msgstr ""

#: ./build/en/book.xml:22625(tertiary) 
msgid "recover"
msgstr ""

#: ./build/en/book.xml:22629(refname) 
msgid "svnadmin recover"
msgstr ""

#: ./build/en/book.xml:22634(filename) 
msgid "repos/conf/passwd"
msgstr ""

#: ./build/en/book.xml:22631(refpurpose) 
msgid "Bring a repository database back into a consistent state (applies only to repositories using the <placeholder-1/> backend). In addition, if <placeholder-2/> does not exist, it will create a default password file ."
msgstr ""

#: ./build/en/book.xml:22640(programlisting) 
#, no-wrap
msgid "svnadmin recover REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22645(para) 
msgid "Run this command if you get an error indicating that your repository needs to be recovered."
msgstr ""

#: ./build/en/book.xml:22650(screen) 
#, no-wrap
msgid "\n--wait\n"
msgstr ""

#: ./build/en/book.xml:22657(para) 
msgid "Recover a hung repository:"
msgstr ""

#: ./build/en/book.xml:22659(screen) 
#, no-wrap
msgid "\n$ svnadmin recover /usr/local/svn/repos/ \nRepository lock acquired.\nPlease wait; recovering the repository may take some time...\n\nRecovery completed.\nThe latest repos revision is 34.\n"
msgstr ""

#: ./build/en/book.xml:22668(para) 
msgid "Recovering the database requires an exclusive lock on the repository. (This is a <quote>database lock</quote>; see <xref linkend=\"svn.advanced.locking.meanings\"/>.) If another process is accessing the repository, then <command moreinfo=\"none\">svnadmin recover</command> will error:"
msgstr ""

#: ./build/en/book.xml:22673(screen) 
#, no-wrap
msgid "\n$ svnadmin recover /usr/local/svn/repos\nsvn: Failed to get exclusive repository access; perhaps another process\nsuch as httpd, svnserve or svn has it open?\n\n$\n"
msgstr ""

#: ./build/en/book.xml:22681(para) 
msgid "The <option>--wait</option> option, however, will cause <command moreinfo=\"none\">svnadmin recover</command> to wait indefinitely for other processes to disconnect:"
msgstr ""

#: ./build/en/book.xml:22685(screen) 
#, no-wrap
msgid "\n$ svnadmin recover /usr/local/svn/repos --wait\nWaiting on repository lock; perhaps another process has it open?\n\n### time goes by…\n\nRepository lock acquired.\nPlease wait; recovering the repository may take some time...\n\nRecovery completed.\nThe latest repos revision is 34.\n"
msgstr ""

#: ./build/en/book.xml:22707(tertiary) 
msgid "rmlocks"
msgstr ""

#: ./build/en/book.xml:22711(refname) 
msgid "svnadmin rmlocks"
msgstr ""

#: ./build/en/book.xml:22712(refpurpose) 
msgid "Unconditionally remove one or more locks from a repository."
msgstr ""

#: ./build/en/book.xml:22717(programlisting) 
#, no-wrap
msgid "svnadmin rmlocks REPOS_PATH LOCKED_PATH..."
msgstr ""

#: ./build/en/book.xml:22722(para) 
msgid "Remove lock from each <replaceable>LOCKED_PATH</replaceable>."
msgstr ""

#: ./build/en/book.xml:22734(para) 
msgid "This deletes the locks on <filename moreinfo=\"none\">tree.jpg</filename> and <filename moreinfo=\"none\">house.jpg</filename> in the repository at <filename moreinfo=\"none\">/svn/repos</filename>"
msgstr ""

#: ./build/en/book.xml:22739(screen) 
#, no-wrap
msgid "\n$ svnadmin rmlocks /svn/repos tree.jpg house.jpg\nRemoved lock on '/tree.jpg.\nRemoved lock on '/house.jpg.\n"
msgstr ""

#: ./build/en/book.xml:22753(tertiary) 
msgid "rmtxns"
msgstr ""

#: ./build/en/book.xml:22757(refname) 
msgid "svnadmin rmtxns"
msgstr ""

#: ./build/en/book.xml:22758(refpurpose) 
msgid "Delete transactions from a repository."
msgstr ""

#: ./build/en/book.xml:22762(programlisting) 
#, no-wrap
msgid "svnadmin rmtxns REPOS_PATH TXN_NAME..."
msgstr ""

#: ./build/en/book.xml:22767(para) 
msgid "Delete outstanding transactions from a repository. This is covered in detail in <xref linkend=\"svn.reposadmin.maint.diskspace.deadtxns\"/>."
msgstr ""

#: ./build/en/book.xml:22774(screen) 
#, no-wrap
msgid "\n--quiet (-q)\n"
msgstr ""

#: ./build/en/book.xml:22782(para) 
msgid "Remove named transactions:"
msgstr ""

#: ./build/en/book.xml:22784(screen) 
#, no-wrap
msgid "\n$ svnadmin rmtxns /usr/local/svn/repos/ 1w 1x\n"
msgstr ""

#: ./build/en/book.xml:22788(para) 
msgid "Fortunately, the output of <command moreinfo=\"none\">lstxns</command> works great as the input for <command moreinfo=\"none\">rmtxns</command>:"
msgstr ""

#: ./build/en/book.xml:22791(screen) 
#, no-wrap
msgid "\n$ svnadmin rmtxns /usr/local/svn/repos/  `svnadmin lstxns /usr/local/svn/repos/`\n"
msgstr ""

#: ./build/en/book.xml:22795(para) 
msgid "Which will remove all uncommitted transactions from your repository."
msgstr ""

#: ./build/en/book.xml:22807(tertiary) 
msgid "setlog"
msgstr ""

#: ./build/en/book.xml:22811(refname) 
msgid "svnadmin setlog"
msgstr ""

#: ./build/en/book.xml:22812(refpurpose) 
msgid "Set the log-message on a revision."
msgstr ""

#: ./build/en/book.xml:22816(programlisting) 
#, no-wrap
msgid "svnadmin setlog REPOS_PATH -r REVISION FILE"
msgstr ""

#: ./build/en/book.xml:22821(para) 
msgid "Set the log-message on revision REVISION to the contents of FILE."
msgstr ""

#: ./build/en/book.xml:22824(para) 
msgid "This is similar to using <command moreinfo=\"none\">svn propset --revprop</command> to set the <literal moreinfo=\"none\">svn:log</literal> property on a revision, except that you can also use the option <option>--bypass-hooks</option> to avoid running any pre- or post-commit hooks, which is useful if the modification of revision properties has not been enabled in the pre-revprop-change hook."
msgstr ""

#: ./build/en/book.xml:22833(para) 
msgid "Revision properties are not under version control, so this command will permanently overwrite the previous log message."
msgstr ""

#: ./build/en/book.xml:22843(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--bypass-hooks\n"
msgstr ""

#: ./build/en/book.xml:22852(para) 
msgid "Set the log message for revision 19 to the contents of the file <filename moreinfo=\"none\">msg</filename>:"
msgstr ""

#: ./build/en/book.xml:22855(screen) 
#, no-wrap
msgid "\n$ svnadmin setlog /usr/local/svn/repos/ -r 19 msg\n"
msgstr ""

#: ./build/en/book.xml:22867(tertiary) 
msgid "verify"
msgstr ""

#: ./build/en/book.xml:22871(refname) 
msgid "svnadmin verify"
msgstr ""

#: ./build/en/book.xml:22872(refpurpose) 
msgid "Verify the data stored in the repository."
msgstr ""

#: ./build/en/book.xml:22876(programlisting) 
#, no-wrap
msgid "svnadmin verify REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:22881(para) 
msgid "Run this command if you wish to verify the integrity of your repository. This basically iterates through all revisions in the repository by internally dumping all revisions and discarding the output."
msgstr ""

#: ./build/en/book.xml:22890(para) 
msgid "Verify a hung repository:"
msgstr ""

#: ./build/en/book.xml:22892(screen) 
#, no-wrap
msgid "\n$ svnadmin verify /usr/local/svn/repos/ \n* Verified revision 1729.\n"
msgstr ""

#: ./build/en/book.xml:22910(para) 
msgid "<command moreinfo=\"none\">svnlook</command> is a command-line utility for examining different aspects of a Subversion repository. It does not make any changes to the repository—it's just used for <quote>peeking</quote>. <command moreinfo=\"none\">svnlook</command> is typically used by the repository hooks, but a repository administrator might find it useful for diagnostic purposes."
msgstr ""

#: ./build/en/book.xml:22918(para) 
msgid "Since <command moreinfo=\"none\">svnlook</command> works via direct repository access (and thus can only be used on the machine that holds the repository), it refers to the repository with a path, not a URL."
msgstr ""

#: ./build/en/book.xml:22922(para) 
msgid "If no revision or transaction is specified, <command moreinfo=\"none\">svnlook</command> defaults to the youngest (most recent) revision of the repository."
msgstr ""

#: ./build/en/book.xml:22928(title) 
msgid "<command moreinfo=\"none\">svnlook</command> Switches"
msgstr ""

#: ./build/en/book.xml:22930(para) 
msgid "Switches in <command moreinfo=\"none\">svnlook</command> are global, just like in <command moreinfo=\"none\">svn</command> and <command moreinfo=\"none\">svnadmin</command>; however, most switches only apply to one subcommand since the functionality of <command moreinfo=\"none\">svnlook</command> is (intentionally) limited in scope."
msgstr ""

#: ./build/en/book.xml:22942(para) 
msgid "Prevents <command moreinfo=\"none\">svnlook</command> from printing differences for deleted files. The default behavior when a file is deleted in a transaction/revision is to print the same differences that you would see if you had left the file but removed all the content."
msgstr ""

#: ./build/en/book.xml:22951(term) 
msgid "<option>--revision</option> (<option>-r</option>)"
msgstr ""

#: ./build/en/book.xml:22954(para) 
msgid "Specify a particular revision number that you wish to examine."
msgstr ""

#: ./build/en/book.xml:22971(term) 
msgid "<option>--transaction</option> (<option>-t</option>)"
msgstr ""

#: ./build/en/book.xml:22974(para) 
msgid "Specify a particular transaction ID that you wish to examine."
msgstr ""

#: ./build/en/book.xml:22980(option) 
msgid "--show-ids"
msgstr ""

#: ./build/en/book.xml:22982(para) 
msgid "Show the filesystem node revision IDs for each path in the filesystem tree."
msgstr ""

#: ./build/en/book.xml:22993(title) 
msgid "<command moreinfo=\"none\">svnlook</command> Subcommands"
msgstr ""

#: ./build/en/book.xml:23000(tertiary) 
msgid "author"
msgstr ""

#: ./build/en/book.xml:23004(refname) 
msgid "svnlook author"
msgstr ""

#: ./build/en/book.xml:23005(refpurpose) 
msgid "Print the author."
msgstr ""

#: ./build/en/book.xml:23009(programlisting) 
#, no-wrap
msgid "svnlook author REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23014(para) 
msgid "Print the author of a revision or transaction in the repository."
msgstr ""

#: ./build/en/book.xml:23021(screen) ./build/en/book.xml:23067(screen) ./build/en/book.xml:23171(screen) ./build/en/book.xml:23224(screen) ./build/en/book.xml:23342(screen) ./build/en/book.xml:23485(screen) ./build/en/book.xml:23586(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--transaction (-t)\n"
msgstr ""

#: ./build/en/book.xml:23030(para) 
msgid "<command moreinfo=\"none\">svnlook author</command> is handy, but not very exciting:"
msgstr ""

#: ./build/en/book.xml:23033(screen) 
#, no-wrap
msgid "\n$ svnlook author -r 40 /usr/local/svn/repos \nsally\n"
msgstr ""

#: ./build/en/book.xml:23050(refname) 
msgid "svnlook cat"
msgstr ""

#: ./build/en/book.xml:23051(refpurpose) ./build/en/book.xml:23060(para) 
msgid "Print the contents of a file."
msgstr ""

#: ./build/en/book.xml:23055(programlisting) 
#, no-wrap
msgid "svnlook cat REPOS_PATH PATH_IN_REPOS"
msgstr ""

#: ./build/en/book.xml:23076(para) 
msgid "This shows the contents of a file in transaction <literal moreinfo=\"none\">ax8</literal>, located at <filename moreinfo=\"none\">/trunk/README</filename>:"
msgstr ""

#: ./build/en/book.xml:23080(screen) 
#, no-wrap
msgid "\n$ svnlook cat -t ax8 /usr/local/svn/repos /trunk/README\n\n               Subversion, a version control system.\n               =====================================\n\n$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $\n\nContents:\n\n     I. A FEW POINTERS\n    II. DOCUMENTATION\n   III. PARTICIPATING IN THE SUBVERSION COMMUNITY\n…\n"
msgstr ""

#: ./build/en/book.xml:23104(tertiary) 
msgid "changed"
msgstr ""

#: ./build/en/book.xml:23108(refname) 
msgid "svnlook changed"
msgstr ""

#: ./build/en/book.xml:23109(refpurpose) 
msgid "Print the paths that were changed."
msgstr ""

#: ./build/en/book.xml:23113(programlisting) 
#, no-wrap
msgid "svnlook changed REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23118(para) 
msgid "Print the paths that were changed in a particular revision or transaction, as well as <quote>svn update-style</quote> status letters in the first two columns:"
msgstr ""

#: ./build/en/book.xml:23126(term) 
msgid "'<literal moreinfo=\"none\">A </literal>'"
msgstr ""

#: ./build/en/book.xml:23128(para) 
msgid "Item added to repository."
msgstr ""

#: ./build/en/book.xml:23133(term) 
msgid "'<literal moreinfo=\"none\">D </literal>'"
msgstr ""

#: ./build/en/book.xml:23135(para) 
msgid "Item deleted from repository."
msgstr ""

#: ./build/en/book.xml:23140(term) 
msgid "'<literal moreinfo=\"none\">U </literal>'"
msgstr ""

#: ./build/en/book.xml:23142(para) 
msgid "File contents changed."
msgstr ""

#: ./build/en/book.xml:23147(term) 
msgid "'<literal moreinfo=\"none\">_U</literal>'"
msgstr ""

#: ./build/en/book.xml:23149(para) 
msgid "Properties of item changed."
msgstr ""

#: ./build/en/book.xml:23154(term) 
msgid "'<literal moreinfo=\"none\">UU</literal>'"
msgstr ""

#: ./build/en/book.xml:23156(para) 
msgid "File contents and properties changed."
msgstr ""

#: ./build/en/book.xml:23162(para) 
msgid "Files and directories can be distinguished, as directory paths are displayed with a trailing '<literal moreinfo=\"none\">/</literal>' character."
msgstr ""

#: ./build/en/book.xml:23180(para) 
msgid "This shows a list of all the changed files in revision 39 of a test repository:"
msgstr ""

#: ./build/en/book.xml:23183(screen) 
#, no-wrap
msgid "\n$ svnlook changed -r 39 /usr/local/svn/repos\nA   trunk/vendors/deli/\nA   trunk/vendors/deli/chips.txt\nA   trunk/vendors/deli/sandwich.txt\nA   trunk/vendors/deli/pickle.txt\nU   trunk/vendors/baker/bagel.txt\n_U  trunk/vendors/baker/croissant.txt\nUU  trunk/vendors/baker/pretzel.txt\nD   trunk/vendors/baker/baguette.txt\n"
msgstr ""

#: ./build/en/book.xml:23203(tertiary) 
msgid "date"
msgstr ""

#: ./build/en/book.xml:23207(refname) 
msgid "svnlook date"
msgstr ""

#: ./build/en/book.xml:23208(refpurpose) 
msgid "Print the datestamp."
msgstr ""

#: ./build/en/book.xml:23212(programlisting) 
#, no-wrap
msgid "svnlook date REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23217(para) 
msgid "Print the datestamp of a revision or transaction in a repository."
msgstr ""

#: ./build/en/book.xml:23233(para) 
msgid "This shows the date of revision 40 of a test repository:"
msgstr ""

#: ./build/en/book.xml:23236(screen) 
#, no-wrap
msgid "\n$ svnlook date -r 40 /tmp/repos/\n2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)\n"
msgstr ""

#: ./build/en/book.xml:23253(refname) 
msgid "svnlook diff"
msgstr ""

#: ./build/en/book.xml:23254(refpurpose) 
msgid "Print differences of changed files and properties."
msgstr ""

#: ./build/en/book.xml:23258(programlisting) 
#, no-wrap
msgid "svnlook diff REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23263(para) 
msgid "Print GNU-style differences of changed files and properties in a repository."
msgstr ""

#: ./build/en/book.xml:23270(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--transaction (-t)\n--no-diff-added\n--no-diff-deleted\n"
msgstr ""

#: ./build/en/book.xml:23281(para) 
msgid "This shows a newly added (empty) file, a deleted file, and a copied file:"
msgstr ""

#: ./build/en/book.xml:23284(screen) 
#, no-wrap
msgid "\n$ svnlook diff -r 40 /usr/local/svn/repos/\nCopied: egg.txt (from rev 39, trunk/vendors/deli/pickle.txt)\n\nAdded: trunk/vendors/deli/soda.txt\n==============================================================================\n\nModified: trunk/vendors/deli/sandwich.txt\n==============================================================================\n--- trunk/vendors/deli/sandwich.txt\t(original)\n+++ trunk/vendors/deli/sandwich.txt\t2003-02-22 17:45:04.000000000 -0600\n@@ -0,0 +1 @@\n+Don't forget the mayo!\n\nModified: trunk/vendors/deli/logo.jpg\n==============================================================================\n(Binary files differ)\n\nDeleted: trunk/vendors/deli/chips.txt\n==============================================================================\n\nDeleted: trunk/vendors/deli/pickle.txt\n==============================================================================\n"
msgstr ""

#: ./build/en/book.xml:23309(para) 
msgid "If a file has a non-textual <literal moreinfo=\"none\">svn:mime-type</literal> property, then the differences are not explicitly shown."
msgstr ""

#: ./build/en/book.xml:23320(tertiary) 
msgid "dirs-changed"
msgstr ""

#: ./build/en/book.xml:23324(refname) 
msgid "svnlook dirs-changed"
msgstr ""

#: ./build/en/book.xml:23325(refpurpose) 
msgid "Print the directories that were themselves changed."
msgstr ""

#: ./build/en/book.xml:23329(programlisting) 
#, no-wrap
msgid "svnlook dirs-changed REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23334(para) 
msgid "Print the directories that were themselves changed (property edits) or whose file children were changed."
msgstr ""

#: ./build/en/book.xml:23351(para) 
msgid "This shows the directories that changed in revision 40 in our sample repository:"
msgstr ""

#: ./build/en/book.xml:23354(screen) 
#, no-wrap
msgid "\n$ svnlook dirs-changed -r 40 /usr/local/svn/repos\ntrunk/vendors/deli/\n"
msgstr ""

#: ./build/en/book.xml:23371(refname) 
msgid "svnlook help"
msgstr ""

#: ./build/en/book.xml:23375(programlisting) 
#, no-wrap
msgid "Also svnlook -h and svnlook -?."
msgstr ""

#: ./build/en/book.xml:23380(para) 
msgid "Displays the help message for svnlook. This command, like its brother <command moreinfo=\"none\">svn help</command>, is also your friend, even though you never call it anymore and forgot to invite it to your last party."
msgstr ""

#: ./build/en/book.xml:23398(tertiary) 
msgid "history"
msgstr ""

#: ./build/en/book.xml:23402(refname) 
msgid "svnlook history"
msgstr ""

#: ./build/en/book.xml:23403(refpurpose) ./build/en/book.xml:23414(para) 
msgid "Print information about the history of a path in the repository (or the root directory if no path is supplied)."
msgstr ""

#: ./build/en/book.xml:23409(programlisting) 
#, no-wrap
msgid "svnlook history REPOS_PATH [PATH_IN_REPOS]"
msgstr ""

#: ./build/en/book.xml:23422(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--show-ids\n"
msgstr ""

#: ./build/en/book.xml:23431(para) 
msgid "This shows the history output for the path <filename moreinfo=\"none\">/tags/1.0</filename> as of revision 20 in our sample repository."
msgstr ""

#: ./build/en/book.xml:23435(screen) 
#, no-wrap
msgid "\n$ svnlook history -r 20 /usr/local/svn/repos /tags/1.0 --show-ids\nREVISION   PATH &lt;ID&gt;\n--------   ---------\n      19   /tags/1.0 &lt;1.2.12&gt;\n      17   /branches/1.0-rc2 &lt;1.1.10&gt;\n      16   /branches/1.0-rc2 &lt;1.1.x&gt;\n      14   /trunk &lt;1.0.q&gt;\n      13   /trunk &lt;1.0.o&gt;\n      11   /trunk &lt;1.0.k&gt;\n       9   /trunk &lt;1.0.g&gt;\n       8   /trunk &lt;1.0.e&gt;\n       7   /trunk &lt;1.0.b&gt;\n       6   /trunk &lt;1.0.9&gt;\n       5   /trunk &lt;1.0.7&gt;\n       4   /trunk &lt;1.0.6&gt;\n       2   /trunk &lt;1.0.3&gt;\n       1   /trunk &lt;1.0.2&gt;\n"
msgstr ""

#: ./build/en/book.xml:23467(refname) 
msgid "svnlook info"
msgstr ""

#: ./build/en/book.xml:23468(refpurpose) ./build/en/book.xml:23478(para) 
msgid "Print the author, datestamp, log message size, and log message."
msgstr ""

#: ./build/en/book.xml:23473(programlisting) 
#, no-wrap
msgid "svnlook info REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23494(para) 
msgid "This shows the info output for revision 40 in our sample repository."
msgstr ""

#: ./build/en/book.xml:23497(screen) 
#, no-wrap
msgid "\n$ svnlook info -r 40 /usr/local/svn/repos\nsally\n2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)\n15\nRearrange lunch.\n"
msgstr ""

#: ./build/en/book.xml:23518(refname) 
msgid "svnlook lock"
msgstr ""

#: ./build/en/book.xml:23519(refpurpose) 
msgid "If a lock exists on a path in the repository, describe it."
msgstr ""

#: ./build/en/book.xml:23524(programlisting) 
#, no-wrap
msgid "svnlook lock REPOS_PATH PATH_IN_REPOS"
msgstr ""

#: ./build/en/book.xml:23529(para) 
msgid "Print all information available for the lock at <replaceable>PATH_IN_REPOS</replaceable>. If <replaceable>PATH_IN_REPOS</replaceable> is not locked, print nothing."
msgstr ""

#: ./build/en/book.xml:23544(para) 
msgid "This describes the lock on the file <filename moreinfo=\"none\">tree.jpg</filename>."
msgstr ""

#: ./build/en/book.xml:23547(screen) 
#, no-wrap
msgid "\n$ svnlook lock /svn/repos tree.jpg\nUUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753\nOwner: harry\nCreated: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)\nExpires: \nComment (1 line):\nRework the uppermost branches on the bald cypress in the foreground.\n"
msgstr ""

#: ./build/en/book.xml:23570(refname) 
msgid "svnlook log"
msgstr ""

#: ./build/en/book.xml:23571(refpurpose) ./build/en/book.xml:23580(para) 
msgid "Print the log message."
msgstr ""

#: ./build/en/book.xml:23575(programlisting) 
#, no-wrap
msgid "svnlook log REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23595(para) 
msgid "This shows the log output for revision 40 in our sample repository:"
msgstr ""

#: ./build/en/book.xml:23598(screen) 
#, no-wrap
msgid "\n$ svnlook log /tmp/repos/\nRearrange lunch.\n"
msgstr ""

#: ./build/en/book.xml:23615(refname) 
msgid "svnlook propget"
msgstr ""

#: ./build/en/book.xml:23616(refpurpose) 
msgid "Print the raw value of a property on a path in the repository."
msgstr ""

#: ./build/en/book.xml:23621(programlisting) 
#, no-wrap
msgid "svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS]"
msgstr ""

#: ./build/en/book.xml:23626(para) 
msgid "List the value of a property on a path in the repository."
msgstr ""

#: ./build/en/book.xml:23633(para) 
msgid "pg, pget"
msgstr ""

#: ./build/en/book.xml:23639(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--transaction (-t)\n--revprop\n"
msgstr ""

#: ./build/en/book.xml:23649(para) 
msgid "This shows the value of the <quote>seasonings</quote> property on the file <filename moreinfo=\"none\">/trunk/sandwich</filename> in the <literal moreinfo=\"none\">HEAD</literal> revision:"
msgstr ""

#: ./build/en/book.xml:23653(screen) 
#, no-wrap
msgid "\n$ svnlook pg /usr/local/svn/repos seasonings /trunk/sandwich\nmustard\n"
msgstr ""

#: ./build/en/book.xml:23670(refname) 
msgid "svnlook proplist"
msgstr ""

#: ./build/en/book.xml:23671(refpurpose) 
msgid "Print the names and values of versioned file and directory properties."
msgstr ""

#: ./build/en/book.xml:23676(programlisting) 
#, no-wrap
msgid "svnlook proplist REPOS_PATH [PATH_IN_REPOS]"
msgstr ""

#: ./build/en/book.xml:23681(para) 
msgid "List the properties of a path in the repository. With <option>--verbose</option>, show the property values too."
msgstr ""

#: ./build/en/book.xml:23688(para) 
msgid "pl, plist"
msgstr ""

#: ./build/en/book.xml:23694(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--transaction (-t)\n--verbose (-v)\n--revprop\n"
msgstr ""

#: ./build/en/book.xml:23705(para) 
msgid "This shows the names of properties set on the file <filename moreinfo=\"none\">/trunk/README</filename> in the <literal moreinfo=\"none\">HEAD</literal> revision:"
msgstr ""

#: ./build/en/book.xml:23709(screen) 
#, no-wrap
msgid "\n$ svnlook proplist /usr/local/svn/repos /trunk/README\n  original-author\n  svn:mime-type\n"
msgstr ""

#: ./build/en/book.xml:23715(para) 
msgid "This is the same command as in the previous example, but this time showing the property values as well:"
msgstr ""

#: ./build/en/book.xml:23718(screen) 
#, no-wrap
msgid "\n$ svnlook --verbose proplist /usr/local/svn/repos /trunk/README\n  original-author : fitz\n  svn:mime-type : text/plain\n"
msgstr ""

#: ./build/en/book.xml:23732(tertiary) 
msgid "tree"
msgstr ""

#: ./build/en/book.xml:23736(refname) 
msgid "svnlook tree"
msgstr ""

#: ./build/en/book.xml:23737(refpurpose) 
msgid "Print the tree."
msgstr ""

#: ./build/en/book.xml:23741(programlisting) 
#, no-wrap
msgid "svnlook tree REPOS_PATH [PATH_IN_REPOS]"
msgstr ""

#: ./build/en/book.xml:23745(para) 
msgid "Print the tree, starting at <replaceable>PATH_IN_REPOS</replaceable> (if supplied, at the root of the tree otherwise), optionally showing node revision IDs."
msgstr ""

#: ./build/en/book.xml:23754(screen) 
#, no-wrap
msgid "\n--revision (-r) REV\n--transaction (-t)\n--show-ids\n"
msgstr ""

#: ./build/en/book.xml:23764(para) 
msgid "This shows the tree output (with node-IDs) for revision 40 in our sample repository:"
msgstr ""

#: ./build/en/book.xml:23767(screen) 
#, no-wrap
msgid "\n$ svnlook tree -r 40 /usr/local/svn/repos --show-ids\n/ &lt;0.0.2j&gt;\n trunk/ &lt;p.0.2j&gt;\n  vendors/ &lt;q.0.2j&gt;\n   deli/ &lt;1g.0.2j&gt;\n    egg.txt &lt;1i.e.2j&gt;\n    soda.txt &lt;1k.0.2j&gt;\n    sandwich.txt &lt;1j.0.2j&gt;\n"
msgstr ""

#: ./build/en/book.xml:23786(tertiary) 
msgid "uuid"
msgstr ""

#: ./build/en/book.xml:23790(refname) 
msgid "svnlook uuid"
msgstr ""

#: ./build/en/book.xml:23792(literal) 
msgid "UUID"
msgstr ""

#: ./build/en/book.xml:23791(refpurpose) 
msgid "Print the repository's <placeholder-1/>."
msgstr ""

#: ./build/en/book.xml:23796(programlisting) 
#, no-wrap
msgid "svnlook uuid REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23801(para) 
msgid "Print the <literal moreinfo=\"none\">UUID</literal> for the repository. the UUID is the repository's <emphasis>u</emphasis>niversal <emphasis>u</emphasis>nique <emphasis>id</emphasis>entifier. The Subversion client uses this identifier to differentiate between one repository and another."
msgstr ""

#: ./build/en/book.xml:23812(screen) 
#, no-wrap
msgid "\n$ svnlook uuid /usr/local/svn/repos\ne7fe1b91-8cd5-0310-98dd-2f12e793c5e8\n"
msgstr ""

#: ./build/en/book.xml:23825(tertiary) 
msgid "youngest"
msgstr ""

#: ./build/en/book.xml:23829(refname) 
msgid "svnlook youngest"
msgstr ""

#: ./build/en/book.xml:23830(refpurpose) 
msgid "Print the youngest revision number."
msgstr ""

#: ./build/en/book.xml:23834(programlisting) 
#, no-wrap
msgid "svnlook youngest REPOS_PATH"
msgstr ""

#: ./build/en/book.xml:23839(para) 
msgid "Print the youngest revision number of a repository."
msgstr ""

#: ./build/en/book.xml:23845(para) 
msgid "This shows the youngest revision of our sample repository:"
msgstr ""

#: ./build/en/book.xml:23848(screen) 
#, no-wrap
msgid "\n$ svnlook youngest /tmp/repos/ \n42\n"
msgstr ""

#: ./build/en/book.xml:23866(para) 
msgid "<command moreinfo=\"none\">svnserve</command> allows access to Subversion repositories using the <literal moreinfo=\"none\">svn</literal> network protocol. You can run svnserve either as a standalone server process, or you can have another process, such as <command moreinfo=\"none\">inetd</command>, <command moreinfo=\"none\">xinetd</command> or <command moreinfo=\"none\">sshd</command>, launch it for you."
msgstr ""

#: ./build/en/book.xml:23873(para) 
msgid "Once the client has selected a repository by transmitting its URL, <command moreinfo=\"none\">svnserve</command> reads a file named <filename moreinfo=\"none\">conf/svnserve.conf</filename> in the repository directory to determine repository-specific settings such as what authentication database to use and what authorization policies to apply. See <xref linkend=\"svn.serverconfig.svnserve\"/> for details of the <filename moreinfo=\"none\">svnserve.conf</filename> file."
msgstr ""

#: ./build/en/book.xml:23883(title) 
msgid "<command moreinfo=\"none\">svnserve</command> Switches"
msgstr ""

#: ./build/en/book.xml:23885(para) 
msgid "Unlike the previous commands we've described. <command moreinfo=\"none\">svnserve</command> has no subcommands—<command moreinfo=\"none\">svnserve</command> is controlled exclusively by switches."
msgstr ""

#: ./build/en/book.xml:23893(term) 
msgid "<option>--daemon</option> (<option>-d</option>)"
msgstr ""

#: ./build/en/book.xml:23895(para) 
msgid "Causes <command moreinfo=\"none\">svnserve</command> to run in daemon mode. <command moreinfo=\"none\">svnserve</command> backgrounds itself and accepts and serves TCP/IP connections on the svn port (3690, by default)."
msgstr ""

#: ./build/en/book.xml:23903(term) 
msgid "<option>--listen-port</option>=<replaceable>PORT</replaceable>"
msgstr ""

#: ./build/en/book.xml:23905(para) 
msgid "Causes svnserve to listen on <replaceable>PORT</replaceable> when run in daemon mode."
msgstr ""

#: ./build/en/book.xml:23912(term) 
msgid "<option>--listen-host</option>=<replaceable>HOST</replaceable>"
msgstr ""

#: ./build/en/book.xml:23914(para) 
msgid "Causes <command moreinfo=\"none\">svnserve</command> to listen on the interface specified by <replaceable>HOST</replaceable>, which may be either a hostname or an IP address."
msgstr ""

#: ./build/en/book.xml:23921(option) 
msgid "--foreground"
msgstr ""

#: ./build/en/book.xml:23923(para) 
msgid "When used together with <option>-d</option>, this switch causes <command moreinfo=\"none\">svnserve</command> to stay in the foreground. This switch is mainly useful for debugging."
msgstr ""

#: ./build/en/book.xml:23931(term) 
msgid "<option>--inetd</option> (<option>-i</option>)"
msgstr ""

#: ./build/en/book.xml:23933(para) 
msgid "Causes <command moreinfo=\"none\">svnserve</command> to use the stdin/stdout file descriptors, as is appropriate for a daemon running out of <command moreinfo=\"none\">inetd</command>."
msgstr ""

#: ./build/en/book.xml:23940(term) ./build/en/book.xml:24089(term) 
msgid "<option>--help</option> (<option>-h</option>)"
msgstr ""

#: ./build/en/book.xml:23942(para) 
msgid "Displays a usage summary and exits."
msgstr ""

#: ./build/en/book.xml:23949(para) 
msgid "Displays version information, a list of repository back-end modules available, and exits."
msgstr ""

#: ./build/en/book.xml:23955(term) 
msgid "<option>--root</option>=<replaceable>ROOT</replaceable> (<option>-r</option>=<replaceable>ROOT</replaceable>)"
msgstr ""

#: ./build/en/book.xml:23958(para) 
msgid "Sets the virtual root for repositories served by <command moreinfo=\"none\">svnserve</command>. The pathname in URLs provided by the client will be interpreted relative to this root, and will not be allowed to escape this root."
msgstr ""

#: ./build/en/book.xml:23967(term) 
msgid "<option>--tunnel</option> (<option>-t</option>)"
msgstr ""

#: ./build/en/book.xml:23969(para) 
msgid "Causes <command moreinfo=\"none\">svnserve</command> to run in tunnel mode, which is just like the <command moreinfo=\"none\">inetd</command> mode of operation (serve one connection over stdin/stdout) except that the connection is considered to be pre-authenticated with the username of the current uid. This flag is selected by the client when running over a tunnel agent such as <command moreinfo=\"none\">ssh</command>."
msgstr ""

#: ./build/en/book.xml:23981(option) 
msgid "--tunnel-user NAME"
msgstr ""

#: ./build/en/book.xml:23983(para) 
msgid "Used in conjunction with <option>--tunnel</option> switch; tells svnserve to assume that <replaceable>NAME</replaceable> is the authenticated user, rather than the UID of the svnserve process. Useful for users wishing to share a single system account over SSH, but maintaining separate commit identities."
msgstr ""

#: ./build/en/book.xml:23994(term) 
msgid "<option>--threads</option> (<option>-T</option>)"
msgstr ""

#: ./build/en/book.xml:23996(para) 
msgid "When running in daemon mode, causes <command moreinfo=\"none\">svnserve</command> to spawn a thread instead of a process for each connection. The <command moreinfo=\"none\">svnserve</command> process still backgrounds itself at startup time."
msgstr ""

#: ./build/en/book.xml:24005(term) 
msgid "<option>--listen-once</option> (<option>-X</option>)"
msgstr ""

#: ./build/en/book.xml:24007(para) 
msgid "Causes <command moreinfo=\"none\">svnserve</command> to accept one connection on the svn port, serve it, and exit. This option is mainly useful for debugging."
msgstr ""

#: ./build/en/book.xml:24034(refpurpose) 
msgid "Summarize the local revision(s) of a working copy."
msgstr ""

#: ./build/en/book.xml:24040(programlisting) 
#, no-wrap
msgid "svnversion [OPTIONS] [WC_PATH [TRAIL_URL]]"
msgstr ""

#: ./build/en/book.xml:24046(para) 
msgid "<command moreinfo=\"none\">svnversion</command> is a program for summarizing the revision mixture of a working copy. The resultant revision number, or revision range, is written to standard output."
msgstr ""

#: ./build/en/book.xml:24051(para) 
msgid "<replaceable>TRAIL_URL</replaceable>, if present, is the trailing portion of the URL used to determine if <replaceable>WC_PATH</replaceable> itself is switched (detection of switches within <replaceable>WC_PATH</replaceable> does not rely on <replaceable>TRAIL_URL</replaceable>)."
msgstr ""

#: ./build/en/book.xml:24058(para) 
msgid "When WC_PATH is not defined the current directory will be used as the working copy path. TRAIL_URL cannot be defined if WC_PATH is not explicitly given."
msgstr ""

#: ./build/en/book.xml:24067(para) 
msgid "Like <command moreinfo=\"none\">svnserve</command>, <command moreinfo=\"none\">svnversion</command> has no subcommands, it only has switches."
msgstr ""

#: ./build/en/book.xml:24074(term) 
msgid "<option>--no-newline</option> (<option>-n</option>)"
msgstr ""

#: ./build/en/book.xml:24076(para) 
msgid "Omit the usual trailing newline from the output."
msgstr ""

#: ./build/en/book.xml:24081(term) 
msgid "<option>--committed</option> (<option>-c</option>)"
msgstr ""

#: ./build/en/book.xml:24083(para) 
msgid "Use the last-changed revisions rather than the current (i.e., highest locally available) revisions."
msgstr ""

#: ./build/en/book.xml:24091(para) 
msgid "Print a help summary."
msgstr ""

#: ./build/en/book.xml:24098(para) 
msgid "Print the version of <command moreinfo=\"none\">svnversion</command> and exit with no error."
msgstr ""

#: ./build/en/book.xml:24109(para) 
msgid "If the working copy is all at the same revision (for example, immediately after an update), then that revision is printed out:"
msgstr ""

#: ./build/en/book.xml:24113(screen) 
#, no-wrap
msgid "\n$ svnversion\n4168\n"
msgstr ""

#: ./build/en/book.xml:24118(para) 
msgid "You can add TRAIL_URL to show that the working copy is not switched from what you expect. Note that the WC_PATH was required in this command:"
msgstr ""

#: ./build/en/book.xml:24122(screen) 
#, no-wrap
msgid "\n$ svnversion . /repos/svn/trunk\n4168\n"
msgstr ""

#: ./build/en/book.xml:24127(para) 
msgid "For a mixed-revision working copy, the range of revisions present is printed:"
msgstr ""

#: ./build/en/book.xml:24130(screen) 
#, no-wrap
msgid "\n$ svnversion\n4123:4168\n"
msgstr ""

#: ./build/en/book.xml:24135(para) 
msgid "If the working copy contains modifications, a trailing \"M\" is added:"
msgstr ""

#: ./build/en/book.xml:24138(screen) 
#, no-wrap
msgid "\n$ svnversion\n4168M\n"
msgstr ""

#: ./build/en/book.xml:24143(para) 
msgid "If the working copy is switched, a trailing \"S\" is added:"
msgstr ""

#: ./build/en/book.xml:24146(screen) 
#, no-wrap
msgid "\n$ svnversion\n4168S\n"
msgstr ""

#: ./build/en/book.xml:24151(para) 
msgid "Thus, here is a mixed-revision, switched working copy containing some local modifications:"
msgstr ""

#: ./build/en/book.xml:24154(screen) 
#, no-wrap
msgid "\n$ svnversion\n4212:4168MS\n"
msgstr ""

#: ./build/en/book.xml:24159(para) 
msgid "If invoked on a directory that is not a working copy, <command moreinfo=\"none\">svnversion</command> assumes it is an exported working copy and prints \"exported\":"
msgstr ""

#: ./build/en/book.xml:24163(screen) 
#, no-wrap
msgid "\n$ svnversion\nexported\n"
msgstr ""

#: ./build/en/book.xml:24183(refname) 
msgid "<placeholder-1/> Configuration Directives"
msgstr ""

#: ./build/en/book.xml:24184(refpurpose) 
msgid "Apache configuration directives for serving Subversion repositories through Apache HTTP Server."
msgstr ""

#: ./build/en/book.xml:24193(para) 
msgid "This section briefly describes each of the Subversion Apache configuration directives. For an in-depth description of configuring Apache with Subversion, see <xref linkend=\"svn.serverconfig.httpd\"/>.)"
msgstr ""

#: ./build/en/book.xml:24200(title) 
msgid "Directives"
msgstr ""

#: ./build/en/book.xml:24205(literal) 
msgid "DAV svn"
msgstr ""

#: ./build/en/book.xml:24208(para) 
msgid "This directive must be included in any <literal moreinfo=\"none\">Directory</literal> or <literal moreinfo=\"none\">Location</literal> block for a Subversion repository. It tells httpd to use the Subversion backend for mod_dav to handle all requests."
msgstr ""

#: ./build/en/book.xml:24218(literal) 
msgid "SVNAutoversioning On"
msgstr ""

#: ./build/en/book.xml:24221(para) 
msgid "This directive allows write requests from WebDAV clients to result in automatic commits. A generic log message is auto-generated and attached to each revision. If you enable Autoversioning, you'll likely want to set <literal moreinfo=\"none\">ModMimeUsePathInfo On</literal> so that <literal moreinfo=\"none\">mod_mime</literal> can set <literal moreinfo=\"none\">svn:mime-type</literal> to the correct mime-type automatically (as best as <literal moreinfo=\"none\">mod_mime</literal> is able to, of course). For more information, see <xref linkend=\"svn.webdav\"/>"
msgstr ""

#: ./build/en/book.xml:24236(literal) 
msgid "SVNPath"
msgstr ""

#: ./build/en/book.xml:24239(para) 
msgid "This directive specifies the location in the filesystem for a Subversion repository's files. In a configuration block for a Subversion repository, either this directive or <literal moreinfo=\"none\">SVNParentPath</literal> must be present, but not both."
msgstr ""

#: ./build/en/book.xml:24250(literal) 
msgid "SVNSpecialURI"
msgstr ""

#: ./build/en/book.xml:24253(para) 
msgid "Specifies the URI component (namespace) for special Subversion resources. The default is <quote><literal moreinfo=\"none\">!svn</literal></quote>, and most administrators will never use this directive. Only set this if there is a pressing need to have a file named <filename moreinfo=\"none\">!svn</filename> in your repository. If you change this on a server already in use, it will break all of the outstanding working copies and your users will hunt you down with pitchforks and flaming torches."
msgstr ""

#: ./build/en/book.xml:24268(literal) 
msgid "SVNReposName"
msgstr ""

#: ./build/en/book.xml:24271(para) 
msgid "Specifies the name of a Subversion repository for use in <literal moreinfo=\"none\">HTTP GET</literal> requests. This value will be prepended to the title of all directory listings (which are served when you navigate to a Subversion repository with a web browser). This directive is optional."
msgstr ""

#: ./build/en/book.xml:24282(literal) 
msgid "SVNIndexXSLT"
msgstr ""

#: ./build/en/book.xml:24285(para) 
msgid "Specifies the URI of an XSL transformation for directory indexes. This directive is optional."
msgstr ""

#: ./build/en/book.xml:24292(literal) 
msgid "SVNParentPath"
msgstr ""

#: ./build/en/book.xml:24295(para) 
msgid "Specifies the location in the filesystem of a parent directory whose child directories are Subversion repositories. In a configuration block for a Subversion repository, either this directive or <literal moreinfo=\"none\">SVNPath</literal> must be present, but not both."
msgstr ""

#: ./build/en/book.xml:24306(literal) 
msgid "SVNPathAuthz"
msgstr ""

#: ./build/en/book.xml:24309(para) 
msgid "Control path-based authorization by enabling or disabling subrequests. See <xref linkend=\"svn.serverconfig.httpd.authz.pathauthzoff\"/> for details."
msgstr ""

#: ./build/en/book.xml:24325(title) 
msgid "Subversion properties"
msgstr ""

#: ./build/en/book.xml:24327(para) 
msgid "Subversion allows users to invent arbitrarily-named versioned properties on files and directories, as well as unversioned properties on revisions. The only restriction is on properties prefixed with <quote>svn:</quote>. Properties in that namespace are reserved for Subversion's own use. While these properties may be set by users to control Subversion's behavior, users may not invent new <quote>svn:</quote> properties."
msgstr ""

#: ./build/en/book.xml:24337(title) 
msgid "Versioned Properties"
msgstr ""

#: ./build/en/book.xml:24342(literal) 
msgid "svn:executable"
msgstr ""

#: ./build/en/book.xml:24345(para) 
msgid "If present on a file, the client will make the file executable in Unix-hosted working copies. See <xref linkend=\"svn.advanced.props.special.executable\"/>."
msgstr ""

#: ./build/en/book.xml:24353(literal) 
msgid "svn:mime-type"
msgstr ""

#: ./build/en/book.xml:24356(para) 
msgid "If present on a file, the value indicates the file's mime-type. This allows the client to decide whether line-based contextual merging is safe to perform during updates, and can also affect how the file behaves when fetched via web browser. See <xref linkend=\"svn.advanced.props.special.mime-type\"/>."
msgstr ""

#: ./build/en/book.xml:24367(literal) 
msgid "svn:ignore"
msgstr ""

#: ./build/en/book.xml:24370(para) 
msgid "If present on a directory, the value is a list of unversioned file patterns to be ignored by <command moreinfo=\"none\">svn status</command> and other subcommands. See <xref linkend=\"svn.advanced.props.special.ignore\"/>"
msgstr ""

#: ./build/en/book.xml:24380(literal) 
msgid "svn:keywords"
msgstr ""

#: ./build/en/book.xml:24383(para) 
msgid "If present on a file, the value tells the client how to expand particular keywords within the file. See <xref linkend=\"svn.advanced.props.special.keywords\"/>."
msgstr ""

#: ./build/en/book.xml:24392(literal) 
msgid "svn:eol-style"
msgstr ""

#: ./build/en/book.xml:24395(para) 
msgid "If present on a file, the value tells the client how to manipulate the file's line-endings in the working copy. See <xref linkend=\"svn.advanced.props.special.eol-style\"/>."
msgstr ""

#: ./build/en/book.xml:24404(literal) 
msgid "svn:externals"
msgstr ""

#: ./build/en/book.xml:24407(para) 
msgid "If present on a directory, the value is a multi-line list of other paths and URLs the client should check out. See <xref linkend=\"svn.advanced.externals\"/>."
msgstr ""

#: ./build/en/book.xml:24416(literal) 
msgid "svn:special"
msgstr ""

#: ./build/en/book.xml:24419(para) 
msgid "If present on a file, indicates that the file is not an ordinary file, but a symbolic link or other special object."
msgstr ""

#: ./build/en/book.xml:24427(literal) 
msgid "svn:needs-lock"
msgstr ""

#: ./build/en/book.xml:24430(para) 
msgid "If present on a file, tells the client to make the file read-only in the working copy, as a reminder that the file should be locked before editing begins. See <xref linkend=\"svn.advanced.locking.lock-communication\"/>."
msgstr ""

#: ./build/en/book.xml:24442(title) 
msgid "Unversioned Properties"
msgstr ""

#: ./build/en/book.xml:24447(literal) 
msgid "svn:author"
msgstr ""

#: ./build/en/book.xml:24450(para) 
msgid "If present, contains the authenticated username of the person who created the revision. (If not present, then the revision was committed anonymously.)"
msgstr ""

#: ./build/en/book.xml:24458(literal) 
msgid "svn:date"
msgstr ""

#: ./build/en/book.xml:24461(para) 
msgid "Contains the UTC time the revision was created, in ISO format. The value comes from the server machine's clock."
msgstr ""

#: ./build/en/book.xml:24469(literal) 
msgid "svn:log"
msgstr ""

#: ./build/en/book.xml:24472(para) 
msgid "Contains the log message describing the revision."
msgstr ""

#: ./build/en/book.xml:24479(literal) 
msgid "svn:autoversioned"
msgstr ""

#: ./build/en/book.xml:24482(para) 
msgid "If present, the revision was created via the autoversioning feature. See <xref linkend=\"svn.webdav.autoversioning\"/>."
msgstr ""

#: ./build/en/book.xml:24499(title) 
msgid "Repository Hooks"
msgstr ""

#: ./build/en/book.xml:24505(primary) ./build/en/book.xml:24557(primary) ./build/en/book.xml:24612(primary) ./build/en/book.xml:24664(primary) ./build/en/book.xml:24732(primary) ./build/en/book.xml:24802(primary) ./build/en/book.xml:24859(primary) ./build/en/book.xml:24913(primary) ./build/en/book.xml:24972(primary) 
msgid "repository"
msgstr ""

#: ./build/en/book.xml:24507(tertiary) ./build/en/book.xml:24511(refname) 
msgid "start-commit"
msgstr ""

#: ./build/en/book.xml:24512(refpurpose) 
msgid "Notification of the beginning of a commit."
msgstr ""

#: ./build/en/book.xml:24518(para) 
msgid "The start-commit hook is run before the commit transaction is even created. It is typically used to decide if the user has commit privileges at all."
msgstr ""

#: ./build/en/book.xml:24522(para) 
msgid "If the start-commit hook program returns a non-zero exit value, the commit is stopped before the commit transaction is even created, and anything printed to stderr is marshalled back to the client."
msgstr ""

#: ./build/en/book.xml:24530(title) ./build/en/book.xml:24586(title) ./build/en/book.xml:24638(title) ./build/en/book.xml:24694(title) ./build/en/book.xml:24761(title) ./build/en/book.xml:24829(title) ./build/en/book.xml:24882(title) ./build/en/book.xml:24942(title) ./build/en/book.xml:24995(title) 
msgid "Input Parameter(s)"
msgstr ""

#: ./build/en/book.xml:24532(para) ./build/en/book.xml:24588(para) ./build/en/book.xml:24640(para) ./build/en/book.xml:24696(para) ./build/en/book.xml:24763(para) ./build/en/book.xml:24831(para) ./build/en/book.xml:24884(para) ./build/en/book.xml:24944(para) ./build/en/book.xml:24997(para) 
msgid "The command-line arguments passed to the hook program, in order, are:"
msgstr ""

#: ./build/en/book.xml:24537(para) ./build/en/book.xml:24593(para) ./build/en/book.xml:24645(para) ./build/en/book.xml:24701(para) ./build/en/book.xml:24768(para) ./build/en/book.xml:24836(para) ./build/en/book.xml:24889(para) ./build/en/book.xml:24949(para) ./build/en/book.xml:25002(para) 
msgid "repository path"
msgstr ""

#: ./build/en/book.xml:24540(para) 
msgid "authenticated username attempting the commit"
msgstr ""

#: ./build/en/book.xml:24546(title) ./build/en/book.xml:24602(title) ./build/en/book.xml:24654(title) ./build/en/book.xml:24722(title) ./build/en/book.xml:24792(title) ./build/en/book.xml:24849(title) ./build/en/book.xml:24903(title) ./build/en/book.xml:24962(title) ./build/en/book.xml:25016(title) 
msgid "Common Uses"
msgstr ""

#: ./build/en/book.xml:24548(para) ./build/en/book.xml:24850(para) ./build/en/book.xml:24963(para) 
msgid "access control"
msgstr ""

#: ./build/en/book.xml:24559(tertiary) ./build/en/book.xml:24563(refname) 
msgid "pre-commit"
msgstr ""

#: ./build/en/book.xml:24564(refpurpose) 
msgid "Notification just prior to commit completion."
msgstr ""

#: ./build/en/book.xml:24570(para) 
msgid "The pre-commit hook is run just before a commit transaction is promoted to a new revision. Typically, this hook is used to protect against commits that are disallowed due to content or location (for example, your site might require that all commits to a certain branch include a ticket number from the bug tracker, or that the incoming log message is non-empty)."
msgstr ""

#: ./build/en/book.xml:24578(para) 
msgid "If the pre-commit hook program returns a non-zero exit value, the commit is aborted, the commit transaction is removed, and anything printed to stderr is marshalled back to the client."
msgstr ""

#: ./build/en/book.xml:24596(para) 
msgid "commit transaction name"
msgstr ""

#: ./build/en/book.xml:24603(para) 
msgid "change validation and control"
msgstr ""

#: ./build/en/book.xml:24614(tertiary) ./build/en/book.xml:24618(refname) 
msgid "post-commit"
msgstr ""

#: ./build/en/book.xml:24619(refpurpose) 
msgid "Notification of a successful commit."
msgstr ""

#: ./build/en/book.xml:24625(para) 
msgid "The post-commit hook is run after the transaction is committed, and a new revision created. Most people use this hook to send out descriptive emails about the commit or to notify some other tool (such as an issue tracker) that a commit has happened. Some configurations also use this hook to trigger backup processes."
msgstr ""

#: ./build/en/book.xml:24632(para) 
msgid "The output from and exit value returned by the post-commit hook program are ignored."
msgstr ""

#: ./build/en/book.xml:24648(para) 
msgid "revision number created by the commit"
msgstr ""

#: ./build/en/book.xml:24655(para) 
msgid "commit notification, tool integration"
msgstr ""

#: ./build/en/book.xml:24666(tertiary) ./build/en/book.xml:24670(refname) 
msgid "pre-revprop-change"
msgstr ""

#: ./build/en/book.xml:24671(refpurpose) 
msgid "Notification of a revision property change attempt."
msgstr ""

#: ./build/en/book.xml:24678(para) 
msgid "The pre-revprop-change hook is run immediately prior to the modification of a revision property when performed outside the scope of a normal commit. Unlike the other hooks, the default state of this one is to deny the proposed action. The hook must actually exist and return a zero exit value before a revision property modification can happen."
msgstr ""

#: ./build/en/book.xml:24686(para) 
msgid "If the pre-revprop-change hook is not implemented or the hook program returns a non-zero exit value, no change to the property will be made, and anything printed to stderr is marshalled back to the client."
msgstr ""

#: ./build/en/book.xml:24704(para) 
msgid "revision whose property is about to be modified"
msgstr ""

#: ./build/en/book.xml:24707(para) 
msgid "authenticated username attempting the propchange"
msgstr ""

#: ./build/en/book.xml:24710(para) ./build/en/book.xml:24780(para) 
msgid "change description: <literal moreinfo=\"none\">A</literal> (added), <literal moreinfo=\"none\">D</literal> (deleted), or <literal moreinfo=\"none\">M</literal> (modified)"
msgstr ""

#: ./build/en/book.xml:24716(para) 
msgid "Additionally, Subversion passes to the hook program via standard input the proposed value of the property."
msgstr ""

#: ./build/en/book.xml:24723(para) 
msgid "access control, change validation and control"
msgstr ""

#: ./build/en/book.xml:24734(tertiary) ./build/en/book.xml:24738(refname) 
msgid "post-revprop-change"
msgstr ""

#: ./build/en/book.xml:24739(refpurpose) 
msgid "Notification of a successful revision property change."
msgstr ""

#: ./build/en/book.xml:24746(para) 
msgid "The post-revprop-change hook is run immediately after to the modification of a revision property when performed outside the scope of a normal commit. As can be derived from the description of its counterpart, the pre-revprop-change hook, this hook will not run at all unless the pre-revprop-change hook is implemented. It is typically used to send email notification of the property change."
msgstr ""

#: ./build/en/book.xml:24755(para) 
msgid "The output from and exit value returned by the post-revprop-change hook program are ignored."
msgstr ""

#: ./build/en/book.xml:24771(para) 
msgid "revision whose property was modified"
msgstr ""

#: ./build/en/book.xml:24774(para) 
msgid "authenticated username of the person making the change"
msgstr ""

#: ./build/en/book.xml:24777(para) 
msgid "name of the property changed"
msgstr ""

#: ./build/en/book.xml:24786(para) 
msgid "Additionally, Subversion passes to the hook program via standard input the previous value of the property."
msgstr ""

#: ./build/en/book.xml:24793(para) 
msgid "propchange notification"
msgstr ""

#: ./build/en/book.xml:24804(tertiary) ./build/en/book.xml:24808(refname) 
msgid "pre-lock"
msgstr ""

#: ./build/en/book.xml:24809(refpurpose) 
msgid "Notification of a path lock attempt."
msgstr ""

#: ./build/en/book.xml:24815(para) 
msgid "The pre-lock hook runs whenever someone attempts to lock a path. It can be used to prevent locks altogether, or to create a more complex policy specifying exactly which users are allowed to lock particular paths. If the hook notices a pre-existing lock, then it can also decide whether a user is allowed to <quote>steal</quote> the existing lock."
msgstr ""

#: ./build/en/book.xml:24822(para) 
msgid "If the pre-lock hook program returns a non-zero exit value, the lock action is aborted and anything printed to stderr is marshalled back to the client."
msgstr ""

#: ./build/en/book.xml:24839(para) ./build/en/book.xml:24952(para) 
msgid "versioned path which is to be locked"
msgstr ""

#: ./build/en/book.xml:24842(para) ./build/en/book.xml:24955(para) 
msgid "authenticated username of the person attempting the lock"
msgstr ""

#: ./build/en/book.xml:24861(tertiary) ./build/en/book.xml:24865(refname) 
msgid "post-lock"
msgstr ""

#: ./build/en/book.xml:24866(refpurpose) 
msgid "Notification of a successful path lock."
msgstr ""

#: ./build/en/book.xml:24872(para) 
msgid "The post-lock hook runs after one or more paths has been locked. It is typically used to send email notification of the lock event."
msgstr ""

#: ./build/en/book.xml:24876(para) 
msgid "The output from and exit value returned by the post-look hook program are ignored."
msgstr ""

#: ./build/en/book.xml:24892(para) 
msgid "authenticated username of the person who locked the paths"
msgstr ""

#: ./build/en/book.xml:24897(para) 
msgid "Additionally, the list of paths locked is passed to the hook program via standard input, one path per line."
msgstr ""

#: ./build/en/book.xml:24904(para) 
msgid "lock notification"
msgstr ""

#: ./build/en/book.xml:24915(tertiary) ./build/en/book.xml:24919(refname) 
msgid "pre-unlock"
msgstr ""

#: ./build/en/book.xml:24920(refpurpose) 
msgid "Notification of a path unlock attempt."
msgstr ""

#: ./build/en/book.xml:24926(para) 
msgid "The pre-unlock hook runs whenever someone attempts to remove a lock on a file. It can be used to create policies that specify which users are allowed to unlock particular paths. It's particularly important for determining policies about lock breakage. If user A locks a file, is user B allowed to break the lock? What if the lock is more than a week old? These sorts of things can be decided and enforced by the hook."
msgstr ""

#: ./build/en/book.xml:24935(para) 
msgid "If the pre-unlock hook program returns a non-zero exit value, the unlock action is aborted and anything printed to stderr is marshalled back to the client."
msgstr ""

#: ./build/en/book.xml:24974(tertiary) ./build/en/book.xml:24978(refname) 
msgid "post-unlock"
msgstr ""

#: ./build/en/book.xml:24979(refpurpose) 
msgid "Notification of a successful path unlock."
msgstr ""

#: ./build/en/book.xml:24985(para) 
msgid "The post-unlock hook runs after one or more paths has been unlocked. It is typically used to send email notification of the unlock event."
msgstr ""

#: ./build/en/book.xml:24989(para) 
msgid "The output from and exit value returned by the post-unlock hook program are ignored."
msgstr ""

#: ./build/en/book.xml:25005(para) 
msgid "authenticated username of the person who unlocked the paths"
msgstr ""

#: ./build/en/book.xml:25010(para) 
msgid "Additionally, the list of paths unlocked is passed to the hook program via standard input, one path per line."
msgstr ""

#: ./build/en/book.xml:25017(para) 
msgid "unlock notification"
msgstr ""

#: ./build/en/book.xml:25033(title) 
msgid "Subversion Quick-Start Guide"
msgstr ""

#: ./build/en/book.xml:25036(para) 
msgid "Some people have trouble absorbing a new technology by reading the sort of <quote>top down</quote> approach provided by this book. This appendix contains a very short introduction to Subversion, and is designed to give <quote>bottom up</quote> learners a fighting chance. If you prefer to learn by experimentation, the following demonstration will get you up and running. Along the way, we give links to the relevant chapters of this book."
msgstr ""

#: ./build/en/book.xml:25045(para) 
msgid "If you're new to the entire concept of version control or to the <quote>copy-modify-merge</quote> model used by both CVS and Subversion, then you should read <xref linkend=\"svn.basic\"/> before going any further."
msgstr ""

#: ./build/en/book.xml:25056(title) 
msgid "Installing Subversion"
msgstr ""

#: ./build/en/book.xml:25058(para) 
msgid "Subversion is built on a portability layer called APR—the Apache Portable Runtime library. The APR library provides all the interfaces that Subversion needs to function on different operating systems: disk access, network access, memory management, and so on. While Subversion is able to use Apache as one of its network server programs, its dependence on APR <emphasis>does not</emphasis> mean that Apache is a required component. APR is a standalone library useable by any application. It does mean, however, that like Apache, Subversion clients and servers run on any operating system that the Apache httpd server runs on: Windows, Linux, all flavors of BSD, Mac OS X, Netware, and others."
msgstr ""

#: ./build/en/book.xml:25071(para) 
msgid "The easiest way to get Subversion is to download a binary package built for your operating system. Subversion's website (<ulink url=\"http://subversion.tigris.org\"/>) often has these packages available for download, posted by volunteers. The site usually contains graphical installer packages for users of Microsoft operating systems. If you run a Unix-like operating system, you can use your system's native package distribution system (RPMs, DEBs, the ports tree, etc.) to get Subversion."
msgstr ""

#: ./build/en/book.xml:25081(para) 
msgid "Alternately, you can build Subversion directly from source code. From the Subversion website, download the latest source-code release. After unpacking it, follow the instructions in the <filename moreinfo=\"none\">INSTALL</filename> file to build it. Note that a released source package contains everything you need to build a command-line client capable of talking to a remote repository (in particular, the apr, apr-util, and neon libraries). But optional portions of Subversion have many other dependencies, such as Berkeley DB and possibly Apache httpd. If you want to do a complete build, make sure you have all of the packages documented in the <filename moreinfo=\"none\">INSTALL</filename> file."
msgstr ""

#: ./build/en/book.xml:25101(para) 
msgid "Note that the URL checked out in the example above ends not with <literal moreinfo=\"none\">svn</literal>, but with a subdirectory thereof called <literal moreinfo=\"none\">trunk</literal>. See our discussion of Subversion's branching and tagging model for the reasoning behind this."
msgstr ""

#: ./build/en/book.xml:25094(para) 
msgid "If you're one of those folks that likes to use bleeding-edge software, you can also get the Subversion source code from the Subversion repository in which it lives. Obviously, you'll need to already have a Subversion client on hand to do this. But once you do, you can checkout a working copy of the Subversion source repository from <ulink url=\"http://svn.collab.net/repos/svn/trunk/\"/>: <placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:25108(screen) 
#, no-wrap
msgid "\n$ svn checkout http://svn.collab.net/repos/svn/trunk subversion\nA    subversion/HACKING\nA    subversion/INSTALL\nA    subversion/README\nA    subversion/autogen.sh\nA    subversion/build.conf\n…\n"
msgstr ""

#: ./build/en/book.xml:25118(para) 
msgid "The above command will checkout the bleeding-edge, latest version of the Subversion source code into a subdirectory named <filename moreinfo=\"none\">subversion</filename> in your current working directory. Obviously, you can adjust that last argument as you see fit. Regardless of what you call the new working copy directory, though, after this operation completes, you will now have the Subversion source code. Of course, you will still need to fetch a few helper libraries (apr, apr-util, etc.)—see the <filename moreinfo=\"none\">INSTALL</filename> file in the top level of the working copy for details."
msgstr ""

#: ./build/en/book.xml:25136(title) 
msgid "High-speed Tutorial"
msgstr ""

#: ./build/en/book.xml:25139(quote) 
msgid "Please make sure your seat backs are in their full, upgright position, and that your tray tables are stored. Flight attendants, prepare for take-off…."
msgstr ""

#: ./build/en/book.xml:25144(para) 
msgid "The following is a very high-level tutorial which will walk you through some basic Subversion configuration and operation. By the time you complete the tutorial, you should have a basic understanding of Subversion's typical usage."
msgstr ""

#: ./build/en/book.xml:25150(para) 
msgid "The examples used in this appendix assume that you have <command moreinfo=\"none\">svn</command>, the Subversion command-line client, and <command moreinfo=\"none\">svnadmin</command>, the administrative tool, ready to go. It also assumes you are using Subversion 1.2 or later (run <command moreinfo=\"none\">svn --version</command> to check.)"
msgstr ""

#: ./build/en/book.xml:25157(para) 
msgid "Subversion stores all versioned data in a central repository. To begin, create a new repository:"
msgstr ""

#: ./build/en/book.xml:25160(screen) 
#, no-wrap
msgid "\n$ svnadmin create /path/to/repos\n$ ls /path/to/repos\nconf/  dav/  db/  format  hooks/  locks/  README.txt\n"
msgstr ""

#: ./build/en/book.xml:25166(para) 
msgid "This command creates a new directory <filename moreinfo=\"none\">/path/to/repos</filename> which contains a Subversion repository. This new directory contains (among other things) a collection of database files. You won't see your versioned files if you peek inside. For more information about repository creation and maintenance, see <xref linkend=\"svn.reposadmin\"/>."
msgstr ""

#: ./build/en/book.xml:25174(para) 
msgid "Subversion has no concept of a <quote>project</quote>. The repository is just a virtual versioned filesystem, a large tree that can hold anything you wish. Some administrators prefer to store only one project in a repository, and others prefer to store multiple projects in a repository by placing them into separate directories. The merits of each approach are discussed in <xref linkend=\"svn.reposadmin.projects.chooselayout\"/>. Either way, the repository only manages files and directories, so it's up to humans to interpret particular directories as <quote>projects</quote>. So while you might see references to projects throughout this book, keep in mind that we're only ever talking about some directory (or collection of directories) in the repository."
msgstr ""

#: ./build/en/book.xml:25188(para) 
msgid "In this example, we assume that you already have some sort of project (a collection of files and directories) that you wish to import into your newly created Subversion repository. Begin by organizing them into a single directory called <filename moreinfo=\"none\">myproject</filename> (or whatever you wish). For reasons that will be clear later (see <xref linkend=\"svn.branchmerge\"/>), your project's tree structure should contain three top-level directories named <filename moreinfo=\"none\">branches</filename>, <filename moreinfo=\"none\">tags</filename>, and <filename moreinfo=\"none\">trunk</filename>. The <filename moreinfo=\"none\">trunk</filename> directory should contain all of your data, while <filename moreinfo=\"none\">branches</filename> and <filename moreinfo=\"none\">tags</filename> directories are empty:"
msgstr ""

#: ./build/en/book.xml:25203(screen) 
#, no-wrap
msgid "\n/tmp/myproject/branches/\n/tmp/myproject/tags/\n/tmp/myproject/trunk/\n                     foo.c\n                     bar.c\n                     Makefile\n                     …\n"
msgstr ""

#: ./build/en/book.xml:25213(para) 
msgid "The <filename moreinfo=\"none\">branches</filename>, <filename moreinfo=\"none\">tags</filename>, and <filename moreinfo=\"none\">trunk</filename> subdirectories aren't actually required by Subversion. They're merely a popular convention that you'll most likely want to use later on."
msgstr ""

#: ./build/en/book.xml:25218(para) 
msgid "Once you have your tree of data ready to go, import it into the repository with the <command moreinfo=\"none\">svn import</command> command (see <xref linkend=\"svn.tour.importing\"/>):"
msgstr ""

#: ./build/en/book.xml:25222(screen) 
#, no-wrap
msgid "\n$ svn import /tmp/myproject file:///path/to/repos/myproject -m \"initial import\"\nAdding         /tmp/myproject/branches\nAdding         /tmp/myproject/tags\nAdding         /tmp/myproject/trunk\nAdding         /tmp/myproject/trunk/foo.c\nAdding         /tmp/myproject/trunk/bar.c\nAdding         /tmp/myproject/trunk/Makefile\n…\nCommitted revision 1.\n$ \n"
msgstr ""

#: ./build/en/book.xml:25235(para) 
msgid "Now the repository contains this tree of data. As mentioned earlier, you won't see your files by directly peeking into the repository; they're all stored within a database. But the repository's imaginary filesystem now contains a top-level directory named <filename moreinfo=\"none\">myproject</filename>, which in turn contains your data."
msgstr ""

#: ./build/en/book.xml:25242(para) 
msgid "Note that the original <filename moreinfo=\"none\">/tmp/myproject</filename> directory is unchanged; Subversion is unaware of it. (In fact, you can even delete that directory if you wish.) In order to start manipulating repository data, you need to create a new <quote>working copy</quote> of the data, a sort of private workspace. Ask Subversion to <quote>check out</quote> a working copy of the <filename moreinfo=\"none\">myproject/trunk</filename> directory in the repository:"
msgstr ""

#: ./build/en/book.xml:25251(screen) 
#, no-wrap
msgid "\n$ svn checkout file:///path/to/repos/myproject/trunk myproject\nA  myproject/foo.c\nA  myproject/bar.c\nA  myproject/Makefile\n…\nChecked out revision 1.\n"
msgstr ""

#: ./build/en/book.xml:25260(para) 
msgid "Now you have a personal copy of part of the repository in a new directory named <filename moreinfo=\"none\">myproject</filename>. You can edit the files in your working copy and then commit those changes back into the repository."
msgstr ""

#: ./build/en/book.xml:25267(para) 
msgid "Enter your working copy and edit a file's contents."
msgstr ""

#: ./build/en/book.xml:25271(para) 
msgid "Run <command moreinfo=\"none\">svn diff</command> to see unified diff output of your changes."
msgstr ""

#: ./build/en/book.xml:25275(para) 
msgid "Run <command moreinfo=\"none\">svn commit</command> to commit the new version of your file to the repository."
msgstr ""

#: ./build/en/book.xml:25279(para) 
msgid "Run <command moreinfo=\"none\">svn update</command> to bring your working copy <quote>up-to-date</quote> with the repository."
msgstr ""

#: ./build/en/book.xml:25284(para) 
msgid "For a full tour of all the things you can do with your working copy, read <xref linkend=\"svn.tour\"/>."
msgstr ""

#: ./build/en/book.xml:25287(para) 
msgid "At this point, you have the option of making your repository available to others over a network. See <xref linkend=\"svn.serverconfig\"/> to learn about the different sorts of server processes available and how to configure them."
msgstr ""

#: ./build/en/book.xml:25291(para) 
msgid "### TODO: Let's make this into a full tutorial, rather than simply referring off to other sections. ###"
msgstr ""

#: ./build/en/book.xml:25306(title) 
msgid "Subversion for CVS Users"
msgstr ""

#: ./build/en/book.xml:25308(para) 
msgid "This appendix is a guide for CVS users new to Subversion. It's essentially a list of differences between the two systems as <quote>viewed from 10,000 feet</quote>. For each section, we provide backreferences to relevant chapters when possible."
msgstr ""

#: ./build/en/book.xml:25314(para) 
msgid "Although the goal of Subversion is to take over the current and future CVS user base, some new features and design changes were required to fix certain <quote>broken</quote> behaviors that CVS had. This means that, as a CVS user, you may need to break habits—ones that you forgot were odd to begin with."
msgstr ""

#: ./build/en/book.xml:25326(title) 
msgid "Revision Numbers Are Different Now"
msgstr ""

#: ./build/en/book.xml:25328(para) 
msgid "In CVS, revision numbers are per-file. This is because CVS stores its data in RCS files; each file has a corresponding RCS file in the repository, and the repository is roughly laid out according to the structure of your project tree."
msgstr ""

#: ./build/en/book.xml:25333(para) 
msgid "In Subversion, the repository looks like a single filesystem. Each commit results in an entirely new filesystem tree; in essence, the repository is an array of trees. Each of these trees is labeled with a single revision number. When someone talks about <quote>revision 54</quote>, they're talking about a particular tree (and indirectly, the way the filesystem looked after the 54th commit)."
msgstr ""

#: ./build/en/book.xml:25341(para) 
msgid "Technically, it's not valid to talk about <quote>revision 5 of <filename moreinfo=\"none\">foo.c</filename></quote>. Instead, one would say <quote><filename moreinfo=\"none\">foo.c</filename> as it appears in revision 5</quote>. Also, be careful when making assumptions about the evolution of a file. In CVS, revisions 5 and 6 of <filename moreinfo=\"none\">foo.c</filename> are always different. In Subversion, it's most likely that <filename moreinfo=\"none\">foo.c</filename> did <emphasis>not</emphasis> change between revisions 5 and 6."
msgstr ""

#: ./build/en/book.xml:25351(para) 
msgid "For more details on this topic, see <xref linkend=\"svn.basic.in-action.revs\"/>."
msgstr ""

#: ./build/en/book.xml:25359(title) 
msgid "Directory Versions"
msgstr ""

#: ./build/en/book.xml:25361(para) 
msgid "Subversion tracks tree structures, not just file contents. It's one of the biggest reasons Subversion was written to replace CVS."
msgstr ""

#: ./build/en/book.xml:25365(para) 
msgid "Here's what this means to you, as a former CVS user:"
msgstr ""

#: ./build/en/book.xml:25369(para) 
msgid "The <command moreinfo=\"none\">svn add</command> and <command moreinfo=\"none\">svn delete</command> commands work on directories now, just as they work on files. So do <command moreinfo=\"none\">svn copy</command> and <command moreinfo=\"none\">svn move</command>. However, these commands do <emphasis>not</emphasis> cause any kind of immediate change in the repository. Instead, the working items are simply <quote>scheduled</quote> for addition or deletion. No repository changes happen until you run <command moreinfo=\"none\">svn commit</command>."
msgstr ""

#: ./build/en/book.xml:25380(para) 
msgid "Directories aren't dumb containers anymore; they have revision numbers like files. (Or more properly, it's correct to talk about <quote>directory <filename moreinfo=\"none\">foo/</filename> in revision 5</quote>.)"
msgstr ""

#: ./build/en/book.xml:25387(para) 
msgid "Let's talk more about that last point. Directory versioning is a hard problem; because we want to allow mixed-revision working copies, there are some limitations on how far we can abuse this model."
msgstr ""

#: ./build/en/book.xml:25392(para) 
msgid "From a theoretical point of view, we define <quote>revision 5 of directory <filename moreinfo=\"none\">foo</filename></quote> to mean a specific collection of directory-entries and properties. Now suppose we start adding and removing files from <filename moreinfo=\"none\">foo</filename>, and then commit. It would be a lie to say that we still have revision 5 of <filename moreinfo=\"none\">foo</filename>. However, if we bumped <filename moreinfo=\"none\">foo</filename>'s revision number after the commit, that would be a lie too; there may be other changes to <filename moreinfo=\"none\">foo</filename> we haven't yet received, because we haven't updated yet."
msgstr ""

#: ./build/en/book.xml:25404(para) 
msgid "Subversion deals with this problem by quietly tracking committed adds and deletes in the <filename moreinfo=\"none\">.svn</filename> area. When you eventually run <command moreinfo=\"none\">svn update</command>, all accounts are settled with the repository, and the directory's new revision number is set correctly. <emphasis>Therefore, only after an update is it truly safe to say that you have a <quote>perfect</quote> revision of a directory.</emphasis> Most of the time, your working copy will contain <quote>imperfect</quote> directory revisions."
msgstr ""

#: ./build/en/book.xml:25414(para) 
msgid "Similarly, a problem arises if you attempt to commit property changes on a directory. Normally, the commit would bump the working directory's local revision number. But again, that would be a lie, because there may be adds or deletes that the directory doesn't yet have, because no update has happened. <emphasis>Therefore, you are not allowed to commit property-changes on a directory unless the directory is up-to-date.</emphasis>"
msgstr ""

#: ./build/en/book.xml:25423(para) 
msgid "For more discussion about the limitations of directory versioning, see <xref linkend=\"svn.basic.in-action.mixedrevs\"/>."
msgstr ""

#: ./build/en/book.xml:25433(title) 
msgid "More Disconnected Operations"
msgstr ""

#: ./build/en/book.xml:25435(para) 
msgid "In recent years, disk space has become outrageously cheap and abundant, but network bandwidth has not. Therefore, the Subversion working copy has been optimized around the scarcer resource."
msgstr ""

#: ./build/en/book.xml:25440(para) 
msgid "The <filename moreinfo=\"none\">.svn</filename> administrative directory serves the same purpose as the <filename moreinfo=\"none\">CVS</filename> directory, except that it also stores read-only, <quote>pristine</quote> copies of your files. This allows you to do many things off-line:"
msgstr ""

#: ./build/en/book.xml:25451(para) 
msgid "Shows you any local changes you've made (see <xref linkend=\"svn.tour.cycle.examine.status\"/>)"
msgstr ""

#: ./build/en/book.xml:25458(para) 
msgid "Shows you the details of your changes (see <xref linkend=\"svn.tour.cycle.examine.diff\"/>)"
msgstr ""

#: ./build/en/book.xml:25465(para) 
msgid "Removes your local changes (see <xref linkend=\"svn.tour.cycle.revert\"/>)"
msgstr ""

#: ./build/en/book.xml:25471(para) 
msgid "Also, the cached pristine files allow the Subversion client to send differences when committing, which CVS cannot do."
msgstr ""

#: ./build/en/book.xml:25474(para) 
msgid "The last subcommand in the list is new; it will not only remove local changes, but it will un-schedule operations such as adds and deletes. It's the preferred way to revert a file; running <command moreinfo=\"none\">rm file; svn update</command> will still work, but it blurs the purpose of updating. And, while we're on this subject…"
msgstr ""

#: ./build/en/book.xml:25489(title) 
msgid "Distinction Between Status and Update"
msgstr ""

#: ./build/en/book.xml:25491(para) 
msgid "In Subversion, we've tried to erase a lot of the confusion between the <command moreinfo=\"none\">cvs status</command> and <command moreinfo=\"none\">cvs update</command> commands."
msgstr ""

#: ./build/en/book.xml:25495(para) 
msgid "The <command moreinfo=\"none\">cvs status</command> command has two purposes: first, to show the user any local modifications in the working copy, and second, to show the user which files are out-of-date. Unfortunately, because of CVS's hard-to-read status output, many CVS users don't take advantage of this command at all. Instead, they've developed a habit of running <command moreinfo=\"none\">cvs update</command> or <command moreinfo=\"none\">cvs -n update</command> to quickly see their changes. If users forget to use the <option>-n</option> option, this has the side effect of merging repository changes they may not be ready to deal with."
msgstr ""

#: ./build/en/book.xml:25507(para) 
msgid "With Subversion, we've tried to remove this muddle by making the output of <command moreinfo=\"none\">svn status</command> easy to read for both humans and parsers. Also, <command moreinfo=\"none\">svn update</command> only prints information about files that are updated, <emphasis>not</emphasis> local modifications."
msgstr ""

#: ./build/en/book.xml:25514(title) 
msgid "Status"
msgstr ""

#: ./build/en/book.xml:25516(para) 
msgid "<command moreinfo=\"none\">svn status</command> prints all files that have local modifications. By default, the repository is not contacted. While this subcommand accepts a fair number of options, the following are the most commonly used ones:"
msgstr ""

#: ./build/en/book.xml:25523(option) 
msgid "-u"
msgstr ""

#: ./build/en/book.xml:25525(para) 
msgid "Contact the repository to determine, and then display, out-of-dateness information."
msgstr ""

#: ./build/en/book.xml:25531(option) 
msgid "-v"
msgstr ""

#: ./build/en/book.xml:25533(para) 
msgid "Show <emphasis>all</emphasis> entries under version control."
msgstr ""

#: ./build/en/book.xml:25539(option) 
msgid "-N"
msgstr ""

#: ./build/en/book.xml:25541(para) 
msgid "Run non-recursively (do not descend into subdirectories)."
msgstr ""

#: ./build/en/book.xml:25547(para) 
msgid "The <command moreinfo=\"none\">status</command> command has two output formats. In the default <quote>short</quote> format, local modifications look like this:"
msgstr ""

#: ./build/en/book.xml:25551(screen) 
#, no-wrap
msgid "\n$ svn status\nM      foo.c\nM      bar/baz.c\n"
msgstr ""

#: ./build/en/book.xml:25557(para) 
msgid "If you specify the <option>--show-updates</option> (<option>-u</option>) switch, a longer output format is used:"
msgstr ""

#: ./build/en/book.xml:25561(screen) 
#, no-wrap
msgid "\n$ svn status -u\nM            1047   foo.c\n       *     1045   faces.html\n       *            bloo.png\nM            1050   bar/baz.c\nStatus against revision:   1066\n"
msgstr ""

#: ./build/en/book.xml:25570(para) 
msgid "In this case, two new columns appear. The second column contains an asterisk if the file or directory is out-of-date. The third column shows the working-copy's revision number of the item. In the example above, the asterisk indicates that <filename moreinfo=\"none\">faces.html</filename> would be patched if we updated, and that <filename moreinfo=\"none\">bloo.png</filename> is a newly added file in the repository. (The absence of any revision number next to <filename moreinfo=\"none\">bloo.png</filename> means that it doesn't yet exist in the working copy.)"
msgstr ""

#. ###TODO describe -v here as well as -uv. -u and -v use
#.            different <quote>long</quote> formats and need to be
#.            documented separately.  Moreover, as you can combine -u and
#.            -v, it needs to be explained what each of them does.  As -u is
#.            much more important than -v, and the example following that
#.            paragraph *is* about -u, not -v, my patch concentrated on
#.            that.
#: ./build/en/book.xml:25588(para) 
msgid "Lastly, here's a quick summary of the most common status codes that you may see:"
msgstr ""

#: ./build/en/book.xml:25591(screen) 
#, no-wrap
msgid "\nA    Resource is scheduled for Addition\nD    Resource is scheduled for Deletion\nM    Resource has local Modifications\nC    Resource has Conflicts (changes have not been completely merged\n       between the repository and working copy version)\nX    Resource is eXternal to this working copy (may come from another\n       repository).  See <xref linkend=\"svn.advanced.externals\"></xref>\n?    Resource is not under version control\n!    Resource is missing or incomplete (removed by another tool than\n       Subversion)\n"
msgstr ""

#: ./build/en/book.xml:25604(para) 
msgid "For a more detailed discussion of <command moreinfo=\"none\">svn status</command>, see <xref linkend=\"svn.tour.cycle.examine.status\"/>."
msgstr ""

#: ./build/en/book.xml:25610(title) 
msgid "Update"
msgstr ""

#: ./build/en/book.xml:25612(para) 
msgid "<command moreinfo=\"none\">svn update</command> updates your working copy, and only prints information about files that it updates."
msgstr ""

#: ./build/en/book.xml:25615(para) 
msgid "Subversion has combined the CVS <literal moreinfo=\"none\">P</literal> and <literal moreinfo=\"none\">U</literal> codes into just <literal moreinfo=\"none\">U</literal>. When a merge or conflict occurs, Subversion simply prints <literal moreinfo=\"none\">G</literal> or <literal moreinfo=\"none\">C</literal>, rather than a whole sentence about it."
msgstr ""

#: ./build/en/book.xml:25621(para) 
msgid "For a more detailed discussion of <command moreinfo=\"none\">svn update</command>, see <xref linkend=\"svn.tour.cycle.update\"/>."
msgstr ""

#: ./build/en/book.xml:25632(title) 
msgid "Branches and Tags"
msgstr ""

#: ./build/en/book.xml:25634(para) 
msgid "Subversion doesn't distinguish between filesystem space and <quote>branch</quote> space; branches and tags are ordinary directories within the filesystem. This is probably the single biggest mental hurdle a CVS user will need to climb. Read all about it in <xref linkend=\"svn.branchmerge\"/>."
msgstr ""

#: ./build/en/book.xml:25651(para) 
msgid "That is, providing you don't run out of disk space before your checkout finishes."
msgstr ""

#: ./build/en/book.xml:25642(para) 
msgid "Since Subversion treats branches and tags as ordinary directories, always remember to check out the <literal moreinfo=\"none\">trunk</literal> (<literal moreinfo=\"none\">http://svn.example.com/repos/calc/trunk/</literal>) of your project, and not the project itself (<literal moreinfo=\"none\">http://svn.example.com/repos/calc/</literal>). If you make the mistake of checking out the project itself, you'll wind up with a working copy that contains a copy of your project for every branch and tag you have.<placeholder-1/>"
msgstr ""

#: ./build/en/book.xml:25663(title) 
msgid "Metadata Properties"
msgstr ""

#: ./build/en/book.xml:25665(para) 
msgid "A new feature of Subversion is that you can attach arbitrary metadata (or <quote>properties</quote>) to files and directories. Properties are arbitrary name/value pairs associated with files and directories in your working copy."
msgstr ""

#: ./build/en/book.xml:25671(para) 
msgid "To set or get a property name, use the <command moreinfo=\"none\">svn propset</command> and <command moreinfo=\"none\">svn propget</command> subcommands. To list all properties on an object, use <command moreinfo=\"none\">svn proplist</command>."
msgstr ""

#: ./build/en/book.xml:25676(para) 
msgid "For more information, see <xref linkend=\"svn.advanced.props\"/>."
msgstr ""

#: ./build/en/book.xml:25684(title) 
msgid "Conflict Resolution"
msgstr ""

#: ./build/en/book.xml:25686(para) 
msgid "CVS marks conflicts with in-line <quote>conflict markers</quote>, and prints a <literal moreinfo=\"none\">C</literal> during an update. Historically, this has caused problems, because CVS isn't doing enough. Many users forget about (or don't see) the <literal moreinfo=\"none\">C</literal> after it whizzes by on their terminal. They often forget that the conflict-markers are even present, and then accidentally commit files containing conflict-markers."
msgstr ""

#: ./build/en/book.xml:25695(para) 
msgid "Subversion solves this problem by making conflicts more tangible. It remembers that a file is in a state of conflict, and won't allow you to commit your changes until you run <command moreinfo=\"none\">svn resolved</command>. See <xref linkend=\"svn.tour.cycle.resolve\"/> for more details."
msgstr ""

#: ./build/en/book.xml:25705(title) 
msgid "Binary Files and Translation"
msgstr ""

#: ./build/en/book.xml:25707(para) 
msgid "In the most general sense, Subversion handles binary files more gracefully than CVS does. Because CVS uses RCS, it can only store successive full copies of a changing binary file. Subversion, however, expresses differences between files using a binary-differencing algorithm, regardless of whether they contain textual or binary data. That means that all files are stored differentially (compressed) in the repository."
msgstr ""

#: ./build/en/book.xml:25715(para) 
msgid "CVS users have to mark binary files with <option>-kb</option> flags, to prevent data from being garbled (due to keyword expansion and line-ending translations). They sometimes forget to do this."
msgstr ""

#: ./build/en/book.xml:25720(para) 
msgid "Subversion takes the more paranoid route—first, it never performs any kind of keyword or line-ending translation unless you explicitly ask it do so (see <xref linkend=\"svn.advanced.props.special.keywords\"/> and <xref linkend=\"svn.advanced.props.special.eol-style\"/> for more details). By default, Subversion treats all file data as literal byte strings, and files are always stored in the repository in an untranslated state."
msgstr ""

#: ./build/en/book.xml:25727(para) 
msgid "Second, Subversion maintains an internal notion of whether a file is <quote>text</quote> or <quote>binary</quote> data, but this notion is <emphasis>only</emphasis> extant in the working copy. During an <command moreinfo=\"none\">svn update</command>, Subversion will perform contextual merges on locally modified text files, but will not attempt to do so for binary files."
msgstr ""

#: ./build/en/book.xml:25734(para) 
msgid "To determine whether a contextual merge is possible, Subversion examines the <literal moreinfo=\"none\">svn:mime-type</literal> property. If the file has no <literal moreinfo=\"none\">svn:mime-type</literal> property, or has a mime-type that is textual (e.g. <literal moreinfo=\"none\">text/*</literal>), Subversion assumes it is text. Otherwise, Subversion assumes the file is binary. Subversion also helps users by running a binary-detection algorithm in the <command moreinfo=\"none\">svn import</command> and <command moreinfo=\"none\">svn add</command> commands. These commands will make a good guess and then (possibly) set a binary <literal moreinfo=\"none\">svn:mime-type</literal> property on the file being added. (If Subversion guesses wrong, the user can always remove or hand-edit the property.)"
msgstr ""

#: ./build/en/book.xml:25755(title) 
msgid "Versioned Modules"
msgstr ""

#: ./build/en/book.xml:25757(para) 
msgid "Unlike CVS, a Subversion working copy is aware that it has checked out a module. That means that if somebody changes the definition of a module (e.g. adds or removes components), then a call to <command moreinfo=\"none\">svn update</command> will update the working copy appropriately, adding and removing components."
msgstr ""

#: ./build/en/book.xml:25763(para) 
msgid "Subversion defines modules as a list of directories within a directory property: see <xref linkend=\"svn.advanced.externals\"/>."
msgstr ""

#: ./build/en/book.xml:25773(title) 
msgid "Authentication"
msgstr ""

#: ./build/en/book.xml:25775(para) 
msgid "With CVS's pserver, you are required to <quote>login</quote> to the server before any read or write operation—you even have to login for anonymous operations. With a Subversion repository using Apache <command moreinfo=\"none\">httpd</command> or <command moreinfo=\"none\">svnserve</command> as the server, you don't provide any authentication credentials at the outset—if an operation that you perform requires authentication, the server will challenge you for your credentials (whether those credentials are username and password, a client certificate, or even both). So if your repository is world-readable, you will not be required to authenticate at all for read operations."
msgstr ""

#: ./build/en/book.xml:25788(para) 
msgid "As with CVS, Subversion still caches your credentials on disk (in your <filename moreinfo=\"none\">~/.subversion/auth/</filename> directory) unless you tell it not to by using the <option>--no-auth-cache</option> switch."
msgstr ""

#: ./build/en/book.xml:25793(para) 
msgid "The exception to this behavior, however, is in the case of accessing an <command moreinfo=\"none\">svnserve</command> server over an SSH tunnel, using the <literal moreinfo=\"none\">svn+ssh://</literal> URL schema. In that case, the <command moreinfo=\"none\">ssh</command> program unconditionally demands authentication just to start the tunnel."
msgstr ""

#: ./build/en/book.xml:25806(title) 
msgid "Converting a Repository from CVS to Subversion"
msgstr ""

#: ./build/en/book.xml:25808(para) 
msgid "Perhaps the most important way to familiarize CVS users with Subversion is to let them continue to work on their projects using the new system. And while that can be somewhat accomplished using a flat import into a Subversion repository of an exported CVS repository, the more thorough solution involves transferring not just the latest snapshot of their data, but all the history behind it as well, from one system to another. This is an extremely difficult problem to solve that involves deducing changesets in the absence of atomicity, and translating between the systems' completely orthogonal branching policies, among other complications. Still, there are a handful of tools claiming to at least partially support the ability to convert existing CVS repositories into Subversion ones."
msgstr ""

#: ./build/en/book.xml:25822(para) 
msgid "One such tool is cvs2svn (<ulink url=\"http://cvs2svn.tigris.org/\"/>), a Python script originally created by members of Subversion's own development community. Others include Lev Serebryakov's RefineCVS (<ulink url=\"http://lev.serebryakov.spb.ru/refinecvs/\"/>). These tools have various levels of completeness, and may make entirely different decisions about how to handle your CVS repository history. Whichever tool you decide to use, be sure to perform as much verification as you can stand on the conversion results—after all, you've worked hard to build that history!"
msgstr ""

#: ./build/en/book.xml:25834(para) 
msgid "For an updated collection of links to known converter tools, visit the Links page of the Subversion website (<ulink url=\"http://subversion.tigris.org/project_links.html\"/>)."
msgstr ""

#: ./build/en/book.xml:25849(title) 
msgid "WebDAV and Autoversioning"
msgstr ""

#: ./build/en/book.xml:25851(para) 
msgid "WebDAV is an extension to HTTP, and is growing more and more popular as a standard for file-sharing. Today's operating systems are becoming extremely Web-aware, and many now have built-in support for mounting <quote>shares</quote> exported by WebDAV servers."
msgstr ""

#: ./build/en/book.xml:25857(para) 
msgid "If you use Apache as your Subversion network server, then to some extent you are also running a WebDAV server. This appendix gives some background on the nature of this protocol, how Subversion uses it, and how well Subversion interoperates with other software that is WebDAV-aware."
msgstr ""

#: ./build/en/book.xml:25868(title) 
msgid "What is WebDAV?"
msgstr ""

#: ./build/en/book.xml:25870(para) 
msgid "<firstterm>DAV</firstterm> stands for <quote>Distributed Authoring and Versioning</quote>. RFC 2518 defines a set of concepts and accompanying extension methods to HTTP 1.1 that make the web into a more universal read/write medium. The basic idea is that a WebDAV-compliant web server can act like a generic file server; clients can <quote>mount</quote> shared folders over HTTP that behave much like other network filesystems (such as NFS or SMB.)"
msgstr ""

#: ./build/en/book.xml:25879(para) 
msgid "The tragedy, though, is that despite the acronym, the RFC specification doesn't actually describe any sort of version control. Basic WebDAV clients and servers assume only one version of each file or directory exists, and can be repeatedly overwritten."
msgstr ""

#: ./build/en/book.xml:25885(para) 
msgid "Because RFC 2518 left out versioning concepts, another committee was left with the responsibility of writing RFC 3253 a few years later. The new RFC adds versioning concepts to WebDAV, placing the <quote>V</quote> back in <quote>DAV</quote> — hence the term <quote>DeltaV</quote>. WebDAV/DeltaV clients and servers are often called just <quote>DeltaV</quote> programs, since DeltaV implies the existence of basic WebDAV."
msgstr ""

#: ./build/en/book.xml:25894(para) 
msgid "The original WebDAV standard has been widely successful. Every modern computer operating system has a general WebDAV client built-in (details to follow), and a number of popular standalone applications are also able to speak WebDAV — Microsoft Office, Dreamweaver, and Photoshop to name a few. On the server end, the Apache webserver has been able to provide WebDAV services since 1998 and is considered the de-facto open-source standard. There are several other commercial WebDAV servers available, including Microsoft's own IIS."
msgstr ""

#: ./build/en/book.xml:25904(para) 
msgid "DeltaV, unfortunately, has not been so successful. It's very difficult to find any DeltaV clients or servers. The few that do exist are relatively unknown commercial products, and thus it's very difficult to test interoperability. It's not entirely clear as to why DeltaV has remained stagnant. Some argue that the specification is just too complex, others argue that while WebDAV's features have mass appeal (even the least technical users appreciate network file-sharing), version control features aren't interesting or necessary for most users. Finally, some have argued that DeltaV remains unpopular because there's still no open-source server product which implements it."
msgstr ""

#: ./build/en/book.xml:25917(para) 
msgid "When Subversion was still in its design phase, it seemed like a great idea to use Apache as a network server. It already had a module to provide WebDAV services. DeltaV was a relatively new specification. The hope was that the Subversion server module (<command moreinfo=\"none\">mod_dav_svn</command>) would eventually evolve into an open-source DeltaV reference implementation. Unfortunately, DeltaV has a very specific versioning model that doesn't quite line up with Subversion's model. Some concepts were mappable, others were not."
msgstr ""

#: ./build/en/book.xml:25927(para) 
msgid "What does this mean, then?"
msgstr ""

#: ./build/en/book.xml:25929(para) 
msgid "First, the Subversion client is not a fully-implemented DeltaV client. It needs certain types of things from the server that DeltaV itself cannot provide, and thus is largely dependent on a number of Subversion-specific HTTP <literal moreinfo=\"none\">REPORT</literal> requests that only <command moreinfo=\"none\">mod_dav_svn</command> understands."
msgstr ""

#: ./build/en/book.xml:25936(para) 
msgid "Second, <command moreinfo=\"none\">mod_dav_svn</command> is not a fully-realized DeltaV server. Many portions of the DeltaV specification were irrelevant to Subversion, and thus left unimplemented."
msgstr ""

#: ./build/en/book.xml:25941(para) 
msgid "There is still some debate in the developer community as to whether or not it's worthwhile to remedy either of these situations. It's fairly unrealistic to change Subversion's design to match DeltaV, so there's probably no way the client can ever learn to get everything it needs from a general DeltaV server. On the other hand, <command moreinfo=\"none\">mod_dav_svn</command><emphasis>could</emphasis> be further developed to implement all of DeltaV, but it's hard to find motivation to do so—there are almost no DeltaV clients to interoperate with."
msgstr ""

#: ./build/en/book.xml:25958(title) 
msgid "Autoversioning"
msgstr ""

#: ./build/en/book.xml:25960(para) 
msgid "While the Subversion client is not a full DeltaV client, nor the Subversion server a full DeltaV server, there's still a glimmer of WebDAV interoperability to be happy about: it's called autoversioning."
msgstr ""

#: ./build/en/book.xml:25965(para) 
msgid "Autoversioning is an optional feature defined in the DeltaV standard. A typical DeltaV server will reject an ignorant WebDAV client attempting to do a <literal moreinfo=\"none\">PUT</literal> to a file that's under version control. To change a version-controlled file, the server expects a series proper versioning requests: something like <literal moreinfo=\"none\">MKACTIVITY</literal>, <literal moreinfo=\"none\">CHECKOUT</literal>, <literal moreinfo=\"none\">PUT</literal>, <literal moreinfo=\"none\">CHECKIN</literal>. But if the DeltaV server supports autoversioning, then write-requests from basic WebDAV clients are accepted. The server behaves as if the client <emphasis>had</emphasis> issued the proper series of versioning requests, performing a commit under the hood. In other words, it allows a DeltaV server to interoperate with ordinary WebDAV clients that don't understand versioning."
msgstr ""

#: ./build/en/book.xml:25980(para) 
msgid "Because so many operating systems already have integrated WebDAV clients, the use case for this feature borders on fantastical: imagine an office of ordinary users running Microsoft Windows or Mac OS. Each user <quote>mounts</quote> the Subversion repository, which appears to be an ordinary network folder. They use the shared folder as they always do: open files, edit them, save them. Meanwhile, the server is automatically versioning everything. Any administrator (or knowledgeable user) can still use a Subversion client to search history and retrieve older versions of data."
msgstr ""

#: ./build/en/book.xml:25991(para) 
msgid "This scenario isn't fiction: it's real and it works, as of Subversion 1.2 and later. To activate autoversioning in <command moreinfo=\"none\">mod_dav_svn</command>, use the <literal moreinfo=\"none\">SVNAutoversioning</literal> directive within the <filename moreinfo=\"none\">httpd.conf</filename> Location block, like so:"
msgstr ""

#: ./build/en/book.xml:25998(screen) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNPath /path/to/repository\n  SVNAutoversioning on\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:26006(para) 
msgid "When SVNAutoversioning is active, write requests from WebDAV clients result in automatic commits. A generic log message is auto-generated and attached to each revision."
msgstr ""

#: ./build/en/book.xml:26010(para) 
msgid "Before activating this feature, however, understand what you're getting into. WebDAV clients tend to do <emphasis>many</emphasis> write requests, resulting in a huge number of automatically committed revisions. For example, when saving data, many clients will do a <literal moreinfo=\"none\">PUT</literal> of a 0-byte file (as a way of reserving a name) followed by another <literal moreinfo=\"none\">PUT</literal> with the real file data. The single file-write results in two separate commits. Also consider that many applications auto-save every few minutes, resulting in even more commits."
msgstr ""

#: ./build/en/book.xml:26021(para) 
msgid "If you have a post-commit hook program that sends email, you may want to disable email generation either altogether, or on certain sections of the repository; it depends on whether you think the influx of emails will still prove to be valuable notifications or not. Also, a smart post-commit hook program can distinguish between a transaction created via autoversioning and one created through a normal <command moreinfo=\"none\">svn commit</command>. The trick is to look for a revision property named <literal moreinfo=\"none\">svn:autoversioned</literal>. If present, the commit was made by a generic WebDAV client."
msgstr ""

#: ./build/en/book.xml:26032(para) 
msgid "Another feature that may be a useful complement for <literal moreinfo=\"none\">SVNAutoversioning</literal> comes from Apache's <literal moreinfo=\"none\">mod_mime</literal> module. If a WebDAV client adds a new file to the repository, there's no opportunity for the user to set the the <literal moreinfo=\"none\">svn:mime-type</literal> property. This might cause the file to appear as generic icon when viewed within a WebDAV shared folder, not having an association with any application. One remedy is to have a sysadmin (or other Subversion-knowledgable person) check out a working copy and manually set the <literal moreinfo=\"none\">svn:mime-type</literal> property on necessary files. But there's potentially no end to such cleanup tasks. Instead, you can use the <literal moreinfo=\"none\">ModMimeUsePathInfo</literal> directive in your Subversion <literal moreinfo=\"none\">&lt;Location&gt;</literal> block:"
msgstr ""

#: ./build/en/book.xml:26048(screen) 
#, no-wrap
msgid "\n&lt;Location /repos&gt;\n  DAV svn\n  SVNPath /path/to/repository\n  SVNAutoversioning on\n\n  ModMimeUsePathInfo on\n\n&lt;/Location&gt;\n"
msgstr ""

#: ./build/en/book.xml:26059(para) 
msgid "This directive allows <literal moreinfo=\"none\">mod_mime</literal> to attempt automatic deduction of the mime-type on new files that enter the repository via autoversioning. The module looks at the file's named extension and possibly the contents as well; if the file matches some common patterns, then the the file's <literal moreinfo=\"none\">svn:mime-type</literal> property will be set automatically."
msgstr ""

#: ./build/en/book.xml:26073(title) 
msgid "Client Interoperability"
msgstr ""

#: ./build/en/book.xml:26075(para) 
msgid "All WebDAV clients fall into one of three categories—standalone applications, file-explorer extensions, or filesystem implementations. These categories broadly define the types of WebDAV functionality available to users. <xref linkend=\"svn.webdav.clients.tbl-1\"/> gives our categorization and a quick description of some common pieces of WebDAV-enabled software. More details about these software offerings, as well as their general category, can be found in the sections that follow."
msgstr ""

#: ./build/en/book.xml:26086(title) 
msgid "Common WebDAV Clients"
msgstr ""

#: ./build/en/book.xml:26090(entry) 
msgid "Software"
msgstr ""

#: ./build/en/book.xml:26091(entry) 
msgid "Type"
msgstr ""

#: ./build/en/book.xml:26092(entry) 
msgid "Windows"
msgstr ""

#: ./build/en/book.xml:26093(entry) 
msgid "Mac"
msgstr ""

#: ./build/en/book.xml:26094(entry) 
msgid "Linux"
msgstr ""

#: ./build/en/book.xml:26100(entry) 
msgid "Adobe Photoshop"
msgstr ""

#: ./build/en/book.xml:26101(entry) ./build/en/book.xml:26110(entry) ./build/en/book.xml:26119(entry) ./build/en/book.xml:26163(entry) ./build/en/book.xml:26172(entry) ./build/en/book.xml:26215(title) 
msgid "Standalone WebDAV applications"
msgstr ""

#: ./build/en/book.xml:26102(entry) ./build/en/book.xml:26112(entry) ./build/en/book.xml:26113(entry) ./build/en/book.xml:26120(entry) ./build/en/book.xml:26121(entry) ./build/en/book.xml:26122(entry) ./build/en/book.xml:26130(entry) ./build/en/book.xml:26139(entry) ./build/en/book.xml:26148(entry) ./build/en/book.xml:26156(entry) ./build/en/book.xml:26164(entry) ./build/en/book.xml:26173(entry) ./build/en/book.xml:26183(entry) ./build/en/book.xml:26192(entry) ./build/en/book.xml:26201(entry) 
msgid "X"
msgstr ""

#: ./build/en/book.xml:26105(entry) 
msgid "Image editing software, allowing direct opening from, and writing to, WebDAV URLs"
msgstr ""

#: ./build/en/book.xml:26109(entry) 
msgid "Cadaver"
msgstr ""

#: ./build/en/book.xml:26114(entry) 
msgid "Command-line WebDAV client supporting file transfer, tree, and locking operations"
msgstr ""

#: ./build/en/book.xml:26118(entry) 
msgid "DAV Explorer"
msgstr ""

#: ./build/en/book.xml:26123(entry) 
msgid "Java GUI tool for exploring WebDAV shares"
msgstr ""

#: ./build/en/book.xml:26126(entry) 
msgid "davfs2"
msgstr ""

#: ./build/en/book.xml:26127(entry) ./build/en/book.xml:26154(entry) ./build/en/book.xml:26191(entry) ./build/en/book.xml:26200(entry) ./build/en/book.xml:26434(title) 
msgid "WebDAV filesystem implementation"
msgstr ""

#: ./build/en/book.xml:26131(entry) 
msgid "Linux file system driver that allows you to mount a WebDAV share"
msgstr ""

#: ./build/en/book.xml:26135(entry) 
msgid "GNOME Nautilus"
msgstr ""

#: ./build/en/book.xml:26136(entry) ./build/en/book.xml:26145(entry) ./build/en/book.xml:26182(entry) ./build/en/book.xml:26305(title) 
msgid "File-explorer WebDAV extensions"
msgstr ""

#: ./build/en/book.xml:26140(entry) ./build/en/book.xml:26149(entry) 
msgid "GUI file explorer able to perform tree operations on a WebDAV share"
msgstr ""

#: ./build/en/book.xml:26144(entry) 
msgid "KDE Konqueror"
msgstr ""

#: ./build/en/book.xml:26153(entry) ./build/en/book.xml:26466(title) 
msgid "Mac OS X"
msgstr ""

#: ./build/en/book.xml:26158(entry) 
msgid "Operating system has built-in support for mounting WebDAV shares."
msgstr ""

#: ./build/en/book.xml:26162(entry) 
msgid "Macromedia Dreamweaver"
msgstr ""

#: ./build/en/book.xml:26167(entry) 
msgid "Web production software able to directly read from and write to WebDAV URLs"
msgstr ""

#: ./build/en/book.xml:26171(entry) 
msgid "Microsoft Office"
msgstr ""

#: ./build/en/book.xml:26176(entry) 
msgid "Office productivity suite with several components able to directly read from and write to WebDAV URLs"
msgstr ""

#: ./build/en/book.xml:26181(entry) ./build/en/book.xml:26321(title) 
msgid "Microsoft Web Folders"
msgstr ""

#: ./build/en/book.xml:26186(entry) 
msgid "GUI file explorer program able to perform tree operations on a WebDAV share"
msgstr ""

#: ./build/en/book.xml:26190(entry) 
msgid "Novell NetDrive"
msgstr ""

#: ./build/en/book.xml:26195(entry) 
msgid "Drive-mapping program for assigning Windows drive letters to a mounted remote WebDAV share"
msgstr ""

#: ./build/en/book.xml:26199(entry) 
msgid "SRT WebDrive"
msgstr ""

#: ./build/en/book.xml:26204(entry) 
msgid "File transfer software which, among other things, allows the assignment of Windows drive letters to a mounted remote WebDAV share"
msgstr ""

#: ./build/en/book.xml:26217(para) 
msgid "A WebDAV application is a program which contains built-in functionality for speaking WebDAV protocols with a WebDAV server. We'll cover some of the most popular programs with this kind of WebDAV support."
msgstr ""

#: ./build/en/book.xml:26224(title) 
msgid "Microsoft Office, Dreamweaver, Photoshop"
msgstr ""

#: ./build/en/book.xml:26230(para) 
msgid "WebDAV support was removed from Microsoft Access for some reason, but exists in the rest of the Office suite."
msgstr ""

#: ./build/en/book.xml:26226(para) 
msgid "On Windows, there are several well-known applications that contain integrated WebDAV client functionality, such as Microsoft's Office, <placeholder-1/> Adobe's Photoshop, and Macromedia's Dreamweaver programs. They're able to directly open and save to URLs, and tend to make heavy use of WebDAV locks when editing a file."
msgstr ""

#: ./build/en/book.xml:26238(para) 
msgid "Note that while many of these programs also exist for the Mac OS X, they do not appear to support WebDAV directly on that platform. In fact, on Mac OS X, the <guimenu moreinfo=\"none\">File-&gt;Open</guimenu> dialog box doesn't allow one to type a path or URL at all. It's likely that the WebDAV features were deliberately left out of Macintosh versions of these programs, since OS X already provides such excellent low-level filesystem support for WebDAV."
msgstr ""

#: ./build/en/book.xml:26251(title) 
msgid "Cadaver, DAV Explorer"
msgstr ""

#: ./build/en/book.xml:26253(para) 
msgid "Cadaver is a bare-bones Unix commandline program for browsing and changing WebDAV shares. Like the Subversion client, it uses the neon HTTP library—not surprisingly, both neon and cadaver are written by the same author. Cadaver is free software (GPL license) and is available at <ulink url=\"http://www.webdav.org/cadaver/\"/>."
msgstr ""

#: ./build/en/book.xml:26259(para) 
msgid "Using cadaver is similar to using a commandline FTP program, and thus it's extremely useful for basic WebDAV debugging. It can be used to upload or download files in a pinch, and also to examine properties, copy, move, lock or unlock files:"
msgstr ""

#: ./build/en/book.xml:26265(screen) 
#, no-wrap
msgid "\n$ cadaver http://host/repos\ndav:/repos/&gt; ls\nListing collection `/repos/': succeeded.\nColl: &gt; foobar                                 0  May 10 16:19\n      &gt; playwright.el                       2864  May  4 16:18\n      &gt; proofbypoem.txt                     1461  May  5 15:09\n      &gt; westcoast.jpg                      66737  May  5 15:09\n\ndav:/repos/&gt; put README\nUploading README to `/repos/README':\nProgress: [=============================&gt;] 100.0% of 357 bytes succeeded.\n\ndav:/repos/&gt; get proofbypoem.txt\nDownloading `/repos/proofbypoem.txt' to proofbypoem.txt:\nProgress: [=============================&gt;] 100.0% of 1461 bytes succeeded.\n"
msgstr ""

#: ./build/en/book.xml:26283(para) 
msgid "DAV Explorer is another standalone WebDAV client, written in Java. It's under a free Apache-like license and is available at <ulink url=\"http://www.ics.uci.edu/~webdav/\"/>. DAV Explorer does everything cadaver does, but has the advantages of being portable and being a more user-friendly GUI application. It's also one of the first clients to support the new WebDAV Access Control Protocol (RFC 3744)."
msgstr ""

#: ./build/en/book.xml:26291(para) 
msgid "Of course, DAV Explorer's ACL support is useless in this case, since <command moreinfo=\"none\">mod_dav_svn</command> doesn't support it. The fact that both Cadaver and DAV Explorer support some limited DeltaV commands isn't particularly useful either, since they don't allow <literal moreinfo=\"none\">MKACTIVITY</literal> requests. But it's not relevant anyway; we're assuming all of these clients are operating against an autoversioning repository."
msgstr ""

#: ./build/en/book.xml:26307(para) 
msgid "Some popular file explorer GUI programs support WebDAV extensions which allow a user to browse a DAV share as if it was just another directory on the local computer, and allowing basic tree editing operations on the items in that share. For example, Windows Explorer is able to browse a WebDAV server as a <quote>network place</quote>. Users can drag files to and from the desktop, or can rename, copy, or delete files in the usual way. But because it's only a feature of the file-explorer, the DAV share isn't visible to ordinary applications. All DAV interaction must happen through the explorer interface."
msgstr ""

#: ./build/en/book.xml:26323(para) 
msgid "Microsoft was one of the original backers of the WebDAV specification, and first started shipping a client in Windows 98, known as <quote>Web Folders</quote>. This client was also shipped in Windows NT4 and 2000."
msgstr ""

#: ./build/en/book.xml:26328(para) 
msgid "The original Web Folders client was an extension to Explorer, the main GUI program used to browse filesystems. It works well enough. In Windows 98, the feature might need to be explicitly installed if Web Folders aren't already visible inside <quote>My Computer</quote>. In Windows 2000, simply add a new <quote>network place</quote>, enter the URL, and the WebDAV share will pop up for browsing."
msgstr ""

#: ./build/en/book.xml:26336(para) 
msgid "With the release of Windows XP, Microsoft started shipping a new implementation of Web Folders, known as the <quote>WebDAV mini-redirector</quote>. The new implementation is a filesystem-level client, allowing WebDAV shares to be mounted as drive letters. Unfortunately, this implementation is incredibly buggy. The client usually tries to convert http URLs (<literal moreinfo=\"none\">http://host/repos</literal>) into UNC share notation (<literal moreinfo=\"none\">\\\\host\\repos</literal>); it also often tries to use Windows Domain authentication to respond to basic-auth HTTP challenges, sending usernames as <literal moreinfo=\"none\">HOST\\username</literal>. These interoperability problems are severe and documented in numerous places around the web, to the frustration of many users. Even Greg Stein, the original author of Apache's WebDAV module, recommends against trying to use XP Web Folders against an Apache server."
msgstr ""

#: ./build/en/book.xml:26353(para) 
msgid "It turns out that the original <quote>Explorer-only</quote> Web Folders implementation isn't dead in XP, it's just buried. It's still possible to find it by using this technique:"
msgstr ""

#: ./build/en/book.xml:26361(para) 
msgid "Go to 'Network Places'."
msgstr ""

#: ./build/en/book.xml:26365(para) 
msgid "Add a new network place."
msgstr ""

#: ./build/en/book.xml:26369(para) 
msgid "When prompted, enter the URL of the repository, but <emphasis>include a port number</emphasis> in the URL. For example, <literal moreinfo=\"none\">http://host/repos</literal> would be entered as <literal moreinfo=\"none\">http://host:80/repos</literal> instead."
msgstr ""

#: ./build/en/book.xml:26377(para) 
msgid "Respond to any authentication prompts."
msgstr ""

#: ./build/en/book.xml:26382(para) 
msgid "There are a number of other rumored workarounds to the problems, but none of them seem to work on all versions and patchlevels of Windows XP. In our tests, only the previous algorithm seems to work consistently on every system. The general consensus of the WebDAV community is that you should avoid the new Web Folders implementation and use the old one instead, and that if you need a real filesystem-level client for Windows XP, then use a third-party program like WebDrive or NetDrive."
msgstr ""

#: ./build/en/book.xml:26392(para) 
msgid "A final tip: if you're attempting to use XP Web Folders, make sure you have the absolute latest version from Microsoft. For example, Microsoft released a bug-fixed version in January 2005, available at <ulink url=\"http://support.microsoft.com/?kbid=892211\"/>. In particular, this release is known to fix a bug whereby browsing a DAV share shows an unexpected infinite recursion."
msgstr ""

#: ./build/en/book.xml:26405(title) 
msgid "Nautilus, Konqueror"
msgstr ""

#: ./build/en/book.xml:26407(para) 
msgid "Nautilus is the official file manager/browser for the GNOME desktop (<ulink url=\"http://www.gnome.org\"/>), and Konqueror is the manager/browser for the KDE desktop (<ulink url=\"http://www.kde.org\"/>). Both of these applications have an explorer-level WebDAV client built-in, and operate just fine against an autoversioning repository."
msgstr ""

#: ./build/en/book.xml:26413(para) 
msgid "In GNOME's Nautilus, from the <guimenu moreinfo=\"none\">File menu</guimenu>, select <guimenuitem moreinfo=\"none\">Open location</guimenuitem> and enter the URL. The repository should then be displayed like any other filesystem."
msgstr ""

#: ./build/en/book.xml:26418(para) 
msgid "In KDE's Konqueror, you need to use the <literal moreinfo=\"none\">webdav://</literal> scheme when entering the URL in the location bar. If you enter an <literal moreinfo=\"none\">http://</literal> URL, Konqueror will behave like an ordinary web browser. You'll likely see the generic HTML directory listing produced by <command moreinfo=\"none\">mod_dav_svn</command>. By entering <literal moreinfo=\"none\">webdav://host/repos</literal> instead of <literal moreinfo=\"none\">http://host/repos</literal>, Konqueror becomes a WebDAV client and displays the repository as a filesystem."
msgstr ""

#: ./build/en/book.xml:26436(para) 
msgid "The WebDAV filesystem implementation is arguably the best sort of WebDAV client. It's implemented as a low-level filesystem module, typically within the operating system's kernel. This means that the DAV share is mounted like any other network filesystem, similar to mounting an NFS share on Unix, or attaching an SMB share as drive-letter in Windows. As a result, this sort of client provides completely transparent read/write WebDAV access to all programs. Applications aren't even aware that WebDAV requests are happening."
msgstr ""

#: ./build/en/book.xml:26449(title) 
msgid "WebDrive, NetDrive"
msgstr ""

#: ./build/en/book.xml:26451(para) 
msgid "Both WebDrive and NetDrive are excellent commercial products which allow a WebDAV share to be attached as drive letters in Windows. We've had nothing but success with these products. At the time of writing, WebDrive can be purchased from South River Technologies (<ulink url=\"http://www.southrivertech.com\"/>). NetDrive ships with Netware, is free of charge, and can be found by searching the web for <quote>netdrive.exe</quote>. Though it is freely available online, users are required to have a Netware license. (If any of that sounds odd to you, you're not alone. See this page on Novell's website: <ulink url=\"http://www.novell.com/coolsolutions/qna/999.html\"/>)"
msgstr ""

#: ./build/en/book.xml:26468(para) 
msgid "Apple's OS X operating system has an integrated filesystem-level WebDAV client. From the Finder, select the <guimenuitem moreinfo=\"none\">Connect to Server</guimenuitem> item from the <guimenu moreinfo=\"none\">Go menu</guimenu>. Enter a WebDAV URL, and it appears as a disk on the desktop, just like any other mounted volume. You can also mount a WebDAV share from the Darwin terminal by using the <literal moreinfo=\"none\">webdav</literal> filesystem type with the <command moreinfo=\"none\">mount</command> command:"
msgstr ""

#: ./build/en/book.xml:26477(screen) 
#, no-wrap
msgid "\n$ mount -t webdav http://svn.example.com/repos/project /some/mountpoint\n$\n"
msgstr ""

#: ./build/en/book.xml:26482(para) 
msgid "Note that if your <command moreinfo=\"none\">mod_dav_svn</command> is older than version 1.2, OS X will refuse to mount the share as read-write; it will appear as read-only. This is because OS X insists on locking support for read-write shares, and the ability to lock files first appeared in Subversion 1.2."
msgstr ""

#: ./build/en/book.xml:26489(para) 
msgid "One more word of warning: OS X's WebDAV client can sometimes be overly sensitive to HTTP redirects. If OS X is unable to mount the repository at all, you may need to enable the BrowserMatch directive in the Apache server's <filename moreinfo=\"none\">httpd.conf</filename>:"
msgstr ""

#: ./build/en/book.xml:26495(screen) 
#, no-wrap
msgid "\nBrowserMatch \"^WebDAVFS/1.[012]\" redirect-carefully\n"
msgstr ""

#: ./build/en/book.xml:26503(title) 
msgid "Linux davfs2"
msgstr ""

#: ./build/en/book.xml:26505(para) 
msgid "Linux davfs2 is a filesystem module for the Linux kernel, whose development is located at <ulink url=\"http://dav.sourceforge.net/\"/>. Once installed, a WebDAV network share can be mounted with the usual Linux mount command:"
msgstr ""

#: ./build/en/book.xml:26510(screen) 
#, no-wrap
msgid "\n$ mount.davfs http://host/repos /mnt/dav\n"
msgstr ""

#: ./build/en/book.xml:26527(title) 
msgid "Third Party Tools"
msgstr ""

#: ./build/en/book.xml:26529(para) 
msgid "Subversion's modular design (covered in <xref linkend=\"svn.developer.layerlib\"/>) and the availability of language bindings (as described in <xref linkend=\"svn.developer.usingapi.otherlangs\"/>) make it a likely candidate for use as an extension or backend to other pieces of software. For a listing of many third-party tools that are using Subversion functionality under-the-hood, check out the Links page on the Subversion website (<ulink url=\"http://subversion.tigris.org/project_links.html\"/>)."
msgstr ""

#: ./build/en/book.xml:26545(title) 
msgid "Copyright"
msgstr ""

#: ./build/en/book.xml:26547(programlisting) 
#, no-wrap
msgid "\n\nCopyright (c) 2002-2006\nBen Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato.  \n\nThis work is licensed under the Creative Commons Attribution License.\nTo view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/2.0/ or send a letter to\nCreative Commons, 559 Nathan Abbott Way, Stanford, California 94305,\nUSA.\n\nA summary of the license is given below, followed by the full legal\ntext.\n\n--------------------------------------------------------------------\n\nYou are free:\n\n    * to copy, distribute, display, and perform the work\n    * to make derivative works\n    * to make commercial use of the work\n\nUnder the following conditions:\n\t\nAttribution. You must give the original author credit.\n\n    * For any reuse or distribution, you must make clear to others the\n      license terms of this work.\n\n    * Any of these conditions can be waived if you get permission from\n      the author.\n\nYour fair use and other rights are in no way affected by the above.\n\nThe above is a summary of the full license below.\n\n====================================================================\n\nCreative Commons Legal Code\nAttribution 2.0\n\nCREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\nLEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN\nATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\nINFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\nREGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR\nDAMAGES RESULTING FROM ITS USE.\n\nLicense\n\nTHE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS\nCREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS\nPROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE\nWORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS\nPROHIBITED.\n\nBY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND\nAGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS\nYOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF\nSUCH TERMS AND CONDITIONS.\n\n1. Definitions\n\n   a. \"Collective Work\" means a work, such as a periodical issue,\n      anthology or encyclopedia, in which the Work in its entirety in\n      unmodified form, along with a number of other contributions,\n      constituting separate and independent works in themselves, are\n      assembled into a collective whole. A work that constitutes a\n      Collective Work will not be considered a Derivative Work (as\n      defined below) for the purposes of this License.\n\n   b. \"Derivative Work\" means a work based upon the Work or upon the\n      Work and other pre-existing works, such as a translation,\n      musical arrangement, dramatization, fictionalization, motion\n      picture version, sound recording, art reproduction, abridgment,\n      condensation, or any other form in which the Work may be recast,\n      transformed, or adapted, except that a work that constitutes a\n      Collective Work will not be considered a Derivative Work for the\n      purpose of this License. For the avoidance of doubt, where the\n      Work is a musical composition or sound recording, the\n      synchronization of the Work in timed-relation with a moving\n      image (\"synching\") will be considered a Derivative Work for the\n      purpose of this License.\n\n   c. \"Licensor\" means the individual or entity that offers the Work\n      under the terms of this License.\n\n   d. \"Original Author\" means the individual or entity who created the Work.\n\n   e. \"Work\" means the copyrightable work of authorship offered under\n      the terms of this License.\n\n   f. \"You\" means an individual or entity exercising rights under this\n      License who has not previously violated the terms of this\n      License with respect to the Work, or who has received express\n      permission from the Licensor to exercise rights under this\n      License despite a previous violation.\n\n2. Fair Use Rights. Nothing in this license is intended to reduce,\n   limit, or restrict any rights arising from fair use, first sale or\n   other limitations on the exclusive rights of the copyright owner\n   under copyright law or other applicable laws.\n\n3. License Grant. Subject to the terms and conditions of this License,\n   Licensor hereby grants You a worldwide, royalty-free,\n   non-exclusive, perpetual (for the duration of the applicable\n   copyright) license to exercise the rights in the Work as stated\n   below:\n\n   a. to reproduce the Work, to incorporate the Work into one or more\n      Collective Works, and to reproduce the Work as incorporated in\n      the Collective Works;\n\n   b. to create and reproduce Derivative Works;\n\n   c. to distribute copies or phonorecords of, display publicly,\n      perform publicly, and perform publicly by means of a digital\n      audio transmission the Work including as incorporated in\n      Collective Works;\n\n   d. to distribute copies or phonorecords of, display publicly,\n      perform publicly, and perform publicly by means of a digital\n      audio transmission Derivative Works.\n\n   e.\n\n      For the avoidance of doubt, where the work is a musical composition:\n\n         i. Performance Royalties Under Blanket Licenses. Licensor\n            waives the exclusive right to collect, whether\n            individually or via a performance rights society\n            (e.g. ASCAP, BMI, SESAC), royalties for the public\n            performance or public digital performance (e.g. webcast)\n            of the Work.\n\n        ii. Mechanical Rights and Statutory Royalties. Licensor waives\n            the exclusive right to collect, whether individually or\n            via a music rights agency or designated agent (e.g. Harry\n            Fox Agency), royalties for any phonorecord You create from\n            the Work (\"cover version\") and distribute, subject to the\n            compulsory license created by 17 USC Section 115 of the US\n            Copyright Act (or the equivalent in other jurisdictions).\n\n   f. Webcasting Rights and Statutory Royalties. For the avoidance of\n      doubt, where the Work is a sound recording, Licensor waives the\n      exclusive right to collect, whether individually or via a\n      performance-rights society (e.g. SoundExchange), royalties for\n      the public digital performance (e.g. webcast) of the Work,\n      subject to the compulsory license created by 17 USC Section 114\n      of the US Copyright Act (or the equivalent in other\n      jurisdictions).\n\nThe above rights may be exercised in all media and formats whether now\nknown or hereafter devised. The above rights include the right to make\nsuch modifications as are technically necessary to exercise the rights\nin other media and formats. All rights not expressly granted by\nLicensor are hereby reserved.\n\n4. Restrictions.The license granted in Section 3 above is expressly\n   made subject to and limited by the following restrictions:\n\n   a. You may distribute, publicly display, publicly perform, or\n      publicly digitally perform the Work only under the terms of this\n      License, and You must include a copy of, or the Uniform Resource\n      Identifier for, this License with every copy or phonorecord of\n      the Work You distribute, publicly display, publicly perform, or\n      publicly digitally perform. You may not offer or impose any\n      terms on the Work that alter or restrict the terms of this\n      License or the recipients' exercise of the rights granted\n      hereunder. You may not sublicense the Work. You must keep intact\n      all notices that refer to this License and to the disclaimer of\n      warranties. You may not distribute, publicly display, publicly\n      perform, or publicly digitally perform the Work with any\n      technological measures that control access or use of the Work in\n      a manner inconsistent with the terms of this License\n      Agreement. The above applies to the Work as incorporated in a\n      Collective Work, but this does not require the Collective Work\n      apart from the Work itself to be made subject to the terms of\n      this License. If You create a Collective Work, upon notice from\n      any Licensor You must, to the extent practicable, remove from\n      the Collective Work any reference to such Licensor or the\n      Original Author, as requested. If You create a Derivative Work,\n      upon notice from any Licensor You must, to the extent\n      practicable, remove from the Derivative Work any reference to\n      such Licensor or the Original Author, as requested.\n\n   b. If you distribute, publicly display, publicly perform, or\n      publicly digitally perform the Work or any Derivative Works or\n      Collective Works, You must keep intact all copyright notices for\n      the Work and give the Original Author credit reasonable to the\n      medium or means You are utilizing by conveying the name (or\n      pseudonym if applicable) of the Original Author if supplied; the\n      title of the Work if supplied; to the extent reasonably\n      practicable, the Uniform Resource Identifier, if any, that\n      Licensor specifies to be associated with the Work, unless such\n      URI does not refer to the copyright notice or licensing\n      information for the Work; and in the case of a Derivative Work,\n      a credit identifying the use of the Work in the Derivative Work\n      (e.g., \"French translation of the Work by Original Author,\" or\n      \"Screenplay based on original Work by Original Author\"). Such\n      credit may be implemented in any reasonable manner; provided,\n      however, that in the case of a Derivative Work or Collective\n      Work, at a minimum such credit will appear where any other\n      comparable authorship credit appears and in a manner at least as\n      prominent as such other comparable authorship credit.\n\n5. Representations, Warranties and Disclaimer\n\nUNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,\nLICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR\nWARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,\nSTATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF\nTITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,\nNONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,\nOR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT\nDISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\nWARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n\n6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY\n   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY\n   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE\n   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE\n   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\n   DAMAGES.\n\n7. Termination\n\n   a. This License and the rights granted hereunder will terminate\n      automatically upon any breach by You of the terms of this\n      License. Individuals or entities who have received Derivative\n      Works or Collective Works from You under this License, however,\n      will not have their licenses terminated provided such\n      individuals or entities remain in full compliance with those\n      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any\n      termination of this License.\n\n   b. Subject to the above terms and conditions, the license granted\n      here is perpetual (for the duration of the applicable copyright\n      in the Work). Notwithstanding the above, Licensor reserves the\n      right to release the Work under different license terms or to\n      stop distributing the Work at any time; provided, however that\n      any such election will not serve to withdraw this License (or\n      any other license that has been, or is required to be, granted\n      under the terms of this License), and this License will continue\n      in full force and effect unless terminated as stated above.\n\n8. Miscellaneous\n\n   a. Each time You distribute or publicly digitally perform the Work\n      or a Collective Work, the Licensor offers to the recipient a\n      license to the Work on the same terms and conditions as the\n      license granted to You under this License.\n\n   b. Each time You distribute or publicly digitally perform a\n      Derivative Work, Licensor offers to the recipient a license to\n      the original Work on the same terms and conditions as the\n      license granted to You under this License.\n\n   c. If any provision of this License is invalid or unenforceable\n      under applicable law, it shall not affect the validity or\n      enforceability of the remainder of the terms of this License,\n      and without further action by the parties to this agreement,\n      such provision shall be reformed to the minimum extent necessary\n      to make such provision valid and enforceable.\n\n   d. No term or provision of this License shall be deemed waived and\n      no breach consented to unless such waiver or consent shall be in\n      writing and signed by the party to be charged with such waiver\n      or consent.\n\n   e. This License constitutes the entire agreement between the\n      parties with respect to the Work licensed here. There are no\n      understandings, agreements or representations with respect to\n      the Work not specified here. Licensor shall not be bound by any\n      additional provisions that may appear in any communication from\n      You. This License may not be modified without the mutual written\n      agreement of the Licensor and You.\n\nCreative Commons is not a party to this License, and makes no warranty\nwhatsoever in connection with the Work. Creative Commons will not be\nliable to You or any party on any legal theory for any damages\nwhatsoever, including without limitation any general, special,\nincidental or consequential damages arising in connection to this\nlicense. Notwithstanding the foregoing two (2) sentences, if Creative\nCommons has expressly identified itself as the Licensor hereunder, it\nshall have all rights and obligations of Licensor.\n\nExcept for the limited purpose of indicating to the public that the\nWork is licensed under the CCPL, neither party will use the trademark\n\"Creative Commons\" or any related trademark or logo of Creative\nCommons without the prior written consent of Creative Commons. Any\npermitted use will be in compliance with Creative Commons'\nthen-current trademark usage guidelines, as may be published on its\nwebsite or otherwise made available upon request from time to time.\n\nCreative Commons may be contacted at http://creativecommons.org/.\n\n====================================================================\n"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: ./build/en/book.xml:0(None) 
msgid "translator-credits"
msgstr ""

